// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_body_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_body_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "maths.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_body_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_body_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_body_2eproto;
namespace messages {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Joint;
class JointDefaultTypeInternal;
extern JointDefaultTypeInternal _Joint_default_instance_;
class Skeleton;
class SkeletonDefaultTypeInternal;
extern SkeletonDefaultTypeInternal _Skeleton_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::Body* Arena::CreateMaybeMessage<::messages::Body>(Arena*);
template<> ::messages::Joint* Arena::CreateMaybeMessage<::messages::Joint>(Arena*);
template<> ::messages::Skeleton* Arena::CreateMaybeMessage<::messages::Skeleton>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

enum Body_State : int {
  Body_State_error = 0,
  Body_State_noSkeleton = 1,
  Body_State_calibrating = 2,
  Body_State_tracked = 3,
  Body_State_missing = 4,
  Body_State_lost = 5,
  Body_State_Body_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Body_State_Body_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Body_State_IsValid(int value);
constexpr Body_State Body_State_State_MIN = Body_State_error;
constexpr Body_State Body_State_State_MAX = Body_State_lost;
constexpr int Body_State_State_ARRAYSIZE = Body_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Body_State_descriptor();
template<typename T>
inline const std::string& Body_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Body_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Body_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Body_State_descriptor(), enum_t_value);
}
inline bool Body_State_Parse(
    const std::string& name, Body_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Body_State>(
    Body_State_descriptor(), name, value);
}
// ===================================================================

class Joint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Joint) */ {
 public:
  Joint();
  virtual ~Joint();

  Joint(const Joint& from);
  Joint(Joint&& from) noexcept
    : Joint() {
    *this = ::std::move(from);
  }

  inline Joint& operator=(const Joint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joint& operator=(Joint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Joint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint* internal_default_instance() {
    return reinterpret_cast<const Joint*>(
               &_Joint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Joint& a, Joint& b) {
    a.Swap(&b);
  }
  inline void Swap(Joint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joint* New() const final {
    return CreateMaybeMessage<Joint>(nullptr);
  }

  Joint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joint& from);
  void MergeFrom(const Joint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Joint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_body_2eproto);
    return ::descriptor_table_body_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 1,
    kPositionFieldNumber = 3,
    kPosition2DFieldNumber = 4,
    kOrientationConfidenceFieldNumber = 2,
    kPositionConfidenceFieldNumber = 5,
  };
  // .messages.vec4 orientation = 1;
  bool has_orientation() const;
  void clear_orientation();
  const ::messages::vec4& orientation() const;
  ::messages::vec4* release_orientation();
  ::messages::vec4* mutable_orientation();
  void set_allocated_orientation(::messages::vec4* orientation);

  // .messages.vec3 position = 3;
  bool has_position() const;
  void clear_position();
  const ::messages::vec3& position() const;
  ::messages::vec3* release_position();
  ::messages::vec3* mutable_position();
  void set_allocated_position(::messages::vec3* position);

  // .messages.vec2 position2D = 4;
  bool has_position2d() const;
  void clear_position2d();
  const ::messages::vec2& position2d() const;
  ::messages::vec2* release_position2d();
  ::messages::vec2* mutable_position2d();
  void set_allocated_position2d(::messages::vec2* position2d);

  // double orientationConfidence = 2;
  void clear_orientationconfidence();
  double orientationconfidence() const;
  void set_orientationconfidence(double value);

  // double positionConfidence = 5;
  void clear_positionconfidence();
  double positionconfidence() const;
  void set_positionconfidence(double value);

  // @@protoc_insertion_point(class_scope:messages.Joint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::messages::vec4* orientation_;
  ::messages::vec3* position_;
  ::messages::vec2* position2d_;
  double orientationconfidence_;
  double positionconfidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_body_2eproto;
};
// -------------------------------------------------------------------

class Skeleton :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Skeleton) */ {
 public:
  Skeleton();
  virtual ~Skeleton();

  Skeleton(const Skeleton& from);
  Skeleton(Skeleton&& from) noexcept
    : Skeleton() {
    *this = ::std::move(from);
  }

  inline Skeleton& operator=(const Skeleton& from) {
    CopyFrom(from);
    return *this;
  }
  inline Skeleton& operator=(Skeleton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Skeleton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Skeleton* internal_default_instance() {
    return reinterpret_cast<const Skeleton*>(
               &_Skeleton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Skeleton& a, Skeleton& b) {
    a.Swap(&b);
  }
  inline void Swap(Skeleton* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Skeleton* New() const final {
    return CreateMaybeMessage<Skeleton>(nullptr);
  }

  Skeleton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Skeleton>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Skeleton& from);
  void MergeFrom(const Skeleton& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Skeleton* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Skeleton";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_body_2eproto);
    return ::descriptor_table_body_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointsFieldNumber = 1,
    kCenterOfMassFieldNumber = 2,
  };
  // repeated .messages.Joint joints = 1;
  int joints_size() const;
  void clear_joints();
  ::messages::Joint* mutable_joints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::Joint >*
      mutable_joints();
  const ::messages::Joint& joints(int index) const;
  ::messages::Joint* add_joints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::Joint >&
      joints() const;

  // .messages.vec3 centerOfMass = 2;
  bool has_centerofmass() const;
  void clear_centerofmass();
  const ::messages::vec3& centerofmass() const;
  ::messages::vec3* release_centerofmass();
  ::messages::vec3* mutable_centerofmass();
  void set_allocated_centerofmass(::messages::vec3* centerofmass);

  // @@protoc_insertion_point(class_scope:messages.Skeleton)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::Joint > joints_;
  ::messages::vec3* centerofmass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_body_2eproto;
};
// -------------------------------------------------------------------

class Body :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(nullptr);
  }

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Body";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_body_2eproto);
    return ::descriptor_table_body_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Body_State State;
  static constexpr State error =
    Body_State_error;
  static constexpr State noSkeleton =
    Body_State_noSkeleton;
  static constexpr State calibrating =
    Body_State_calibrating;
  static constexpr State tracked =
    Body_State_tracked;
  static constexpr State missing =
    Body_State_missing;
  static constexpr State lost =
    Body_State_lost;
  static inline bool State_IsValid(int value) {
    return Body_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Body_State_State_MIN;
  static constexpr State State_MAX =
    Body_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Body_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Body_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Body_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Body_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceUIDFieldNumber = 4,
    kSkeletonFieldNumber = 2,
    kUidFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // string deviceUID = 4;
  void clear_deviceuid();
  const std::string& deviceuid() const;
  void set_deviceuid(const std::string& value);
  void set_deviceuid(std::string&& value);
  void set_deviceuid(const char* value);
  void set_deviceuid(const char* value, size_t size);
  std::string* mutable_deviceuid();
  std::string* release_deviceuid();
  void set_allocated_deviceuid(std::string* deviceuid);

  // .messages.Skeleton skeleton = 2;
  bool has_skeleton() const;
  void clear_skeleton();
  const ::messages::Skeleton& skeleton() const;
  ::messages::Skeleton* release_skeleton();
  ::messages::Skeleton* mutable_skeleton();
  void set_allocated_skeleton(::messages::Skeleton* skeleton);

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .messages.Body.State state = 3;
  void clear_state();
  ::messages::Body_State state() const;
  void set_state(::messages::Body_State value);

  // @@protoc_insertion_point(class_scope:messages.Body)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceuid_;
  ::messages::Skeleton* skeleton_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_body_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Joint

// .messages.vec4 orientation = 1;
inline bool Joint::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline const ::messages::vec4& Joint::orientation() const {
  const ::messages::vec4* p = orientation_;
  // @@protoc_insertion_point(field_get:messages.Joint.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::vec4*>(
      &::messages::_vec4_default_instance_);
}
inline ::messages::vec4* Joint::release_orientation() {
  // @@protoc_insertion_point(field_release:messages.Joint.orientation)
  
  ::messages::vec4* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::messages::vec4* Joint::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::vec4>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:messages.Joint.orientation)
  return orientation_;
}
inline void Joint::set_allocated_orientation(::messages::vec4* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:messages.Joint.orientation)
}

// double orientationConfidence = 2;
inline void Joint::clear_orientationconfidence() {
  orientationconfidence_ = 0;
}
inline double Joint::orientationconfidence() const {
  // @@protoc_insertion_point(field_get:messages.Joint.orientationConfidence)
  return orientationconfidence_;
}
inline void Joint::set_orientationconfidence(double value) {
  
  orientationconfidence_ = value;
  // @@protoc_insertion_point(field_set:messages.Joint.orientationConfidence)
}

// .messages.vec3 position = 3;
inline bool Joint::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::messages::vec3& Joint::position() const {
  const ::messages::vec3* p = position_;
  // @@protoc_insertion_point(field_get:messages.Joint.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::vec3*>(
      &::messages::_vec3_default_instance_);
}
inline ::messages::vec3* Joint::release_position() {
  // @@protoc_insertion_point(field_release:messages.Joint.position)
  
  ::messages::vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::messages::vec3* Joint::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:messages.Joint.position)
  return position_;
}
inline void Joint::set_allocated_position(::messages::vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:messages.Joint.position)
}

// .messages.vec2 position2D = 4;
inline bool Joint::has_position2d() const {
  return this != internal_default_instance() && position2d_ != nullptr;
}
inline const ::messages::vec2& Joint::position2d() const {
  const ::messages::vec2* p = position2d_;
  // @@protoc_insertion_point(field_get:messages.Joint.position2D)
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::vec2*>(
      &::messages::_vec2_default_instance_);
}
inline ::messages::vec2* Joint::release_position2d() {
  // @@protoc_insertion_point(field_release:messages.Joint.position2D)
  
  ::messages::vec2* temp = position2d_;
  position2d_ = nullptr;
  return temp;
}
inline ::messages::vec2* Joint::mutable_position2d() {
  
  if (position2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::vec2>(GetArenaNoVirtual());
    position2d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:messages.Joint.position2D)
  return position2d_;
}
inline void Joint::set_allocated_position2d(::messages::vec2* position2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position2d_);
  }
  if (position2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position2d, submessage_arena);
    }
    
  } else {
    
  }
  position2d_ = position2d;
  // @@protoc_insertion_point(field_set_allocated:messages.Joint.position2D)
}

// double positionConfidence = 5;
inline void Joint::clear_positionconfidence() {
  positionconfidence_ = 0;
}
inline double Joint::positionconfidence() const {
  // @@protoc_insertion_point(field_get:messages.Joint.positionConfidence)
  return positionconfidence_;
}
inline void Joint::set_positionconfidence(double value) {
  
  positionconfidence_ = value;
  // @@protoc_insertion_point(field_set:messages.Joint.positionConfidence)
}

// -------------------------------------------------------------------

// Skeleton

// repeated .messages.Joint joints = 1;
inline int Skeleton::joints_size() const {
  return joints_.size();
}
inline void Skeleton::clear_joints() {
  joints_.Clear();
}
inline ::messages::Joint* Skeleton::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:messages.Skeleton.joints)
  return joints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::Joint >*
Skeleton::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:messages.Skeleton.joints)
  return &joints_;
}
inline const ::messages::Joint& Skeleton::joints(int index) const {
  // @@protoc_insertion_point(field_get:messages.Skeleton.joints)
  return joints_.Get(index);
}
inline ::messages::Joint* Skeleton::add_joints() {
  // @@protoc_insertion_point(field_add:messages.Skeleton.joints)
  return joints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::Joint >&
Skeleton::joints() const {
  // @@protoc_insertion_point(field_list:messages.Skeleton.joints)
  return joints_;
}

// .messages.vec3 centerOfMass = 2;
inline bool Skeleton::has_centerofmass() const {
  return this != internal_default_instance() && centerofmass_ != nullptr;
}
inline const ::messages::vec3& Skeleton::centerofmass() const {
  const ::messages::vec3* p = centerofmass_;
  // @@protoc_insertion_point(field_get:messages.Skeleton.centerOfMass)
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::vec3*>(
      &::messages::_vec3_default_instance_);
}
inline ::messages::vec3* Skeleton::release_centerofmass() {
  // @@protoc_insertion_point(field_release:messages.Skeleton.centerOfMass)
  
  ::messages::vec3* temp = centerofmass_;
  centerofmass_ = nullptr;
  return temp;
}
inline ::messages::vec3* Skeleton::mutable_centerofmass() {
  
  if (centerofmass_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::vec3>(GetArenaNoVirtual());
    centerofmass_ = p;
  }
  // @@protoc_insertion_point(field_mutable:messages.Skeleton.centerOfMass)
  return centerofmass_;
}
inline void Skeleton::set_allocated_centerofmass(::messages::vec3* centerofmass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centerofmass_);
  }
  if (centerofmass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      centerofmass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centerofmass, submessage_arena);
    }
    
  } else {
    
  }
  centerofmass_ = centerofmass;
  // @@protoc_insertion_point(field_set_allocated:messages.Skeleton.centerOfMass)
}

// -------------------------------------------------------------------

// Body

// int32 uid = 1;
inline void Body::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Body::uid() const {
  // @@protoc_insertion_point(field_get:messages.Body.uid)
  return uid_;
}
inline void Body::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:messages.Body.uid)
}

// .messages.Skeleton skeleton = 2;
inline bool Body::has_skeleton() const {
  return this != internal_default_instance() && skeleton_ != nullptr;
}
inline void Body::clear_skeleton() {
  if (GetArenaNoVirtual() == nullptr && skeleton_ != nullptr) {
    delete skeleton_;
  }
  skeleton_ = nullptr;
}
inline const ::messages::Skeleton& Body::skeleton() const {
  const ::messages::Skeleton* p = skeleton_;
  // @@protoc_insertion_point(field_get:messages.Body.skeleton)
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::Skeleton*>(
      &::messages::_Skeleton_default_instance_);
}
inline ::messages::Skeleton* Body::release_skeleton() {
  // @@protoc_insertion_point(field_release:messages.Body.skeleton)
  
  ::messages::Skeleton* temp = skeleton_;
  skeleton_ = nullptr;
  return temp;
}
inline ::messages::Skeleton* Body::mutable_skeleton() {
  
  if (skeleton_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::Skeleton>(GetArenaNoVirtual());
    skeleton_ = p;
  }
  // @@protoc_insertion_point(field_mutable:messages.Body.skeleton)
  return skeleton_;
}
inline void Body::set_allocated_skeleton(::messages::Skeleton* skeleton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete skeleton_;
  }
  if (skeleton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skeleton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skeleton, submessage_arena);
    }
    
  } else {
    
  }
  skeleton_ = skeleton;
  // @@protoc_insertion_point(field_set_allocated:messages.Body.skeleton)
}

// .messages.Body.State state = 3;
inline void Body::clear_state() {
  state_ = 0;
}
inline ::messages::Body_State Body::state() const {
  // @@protoc_insertion_point(field_get:messages.Body.state)
  return static_cast< ::messages::Body_State >(state_);
}
inline void Body::set_state(::messages::Body_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:messages.Body.state)
}

// string deviceUID = 4;
inline void Body::clear_deviceuid() {
  deviceuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Body::deviceuid() const {
  // @@protoc_insertion_point(field_get:messages.Body.deviceUID)
  return deviceuid_.GetNoArena();
}
inline void Body::set_deviceuid(const std::string& value) {
  
  deviceuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Body.deviceUID)
}
inline void Body::set_deviceuid(std::string&& value) {
  
  deviceuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Body.deviceUID)
}
inline void Body::set_deviceuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Body.deviceUID)
}
inline void Body::set_deviceuid(const char* value, size_t size) {
  
  deviceuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Body.deviceUID)
}
inline std::string* Body::mutable_deviceuid() {
  
  // @@protoc_insertion_point(field_mutable:messages.Body.deviceUID)
  return deviceuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Body::release_deviceuid() {
  // @@protoc_insertion_point(field_release:messages.Body.deviceUID)
  
  return deviceuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Body::set_allocated_deviceuid(std::string* deviceuid) {
  if (deviceuid != nullptr) {
    
  } else {
    
  }
  deviceuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceuid);
  // @@protoc_insertion_point(field_set_allocated:messages.Body.deviceUID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messages::Body_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::Body_State>() {
  return ::messages::Body_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_body_2eproto
