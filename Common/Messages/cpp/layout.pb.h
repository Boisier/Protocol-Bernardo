// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout.proto

#ifndef PROTOBUF_layout_2eproto__INCLUDED
#define PROTOBUF_layout_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "maths.pb.h"
// @@protoc_insertion_point(includes)

namespace messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_layout_2eproto();
void protobuf_AssignDesc_layout_2eproto();
void protobuf_ShutdownFile_layout_2eproto();

class Device;
class Layout;
class LayoutList;
class LayoutName;
class Screen;

// ===================================================================

class LayoutList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.LayoutList) */ {
 public:
  LayoutList();
  virtual ~LayoutList();

  LayoutList(const LayoutList& from);

  inline LayoutList& operator=(const LayoutList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutList& default_instance();

  void Swap(LayoutList* other);

  // implements Message ----------------------------------------------

  inline LayoutList* New() const { return New(NULL); }

  LayoutList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayoutList& from);
  void MergeFrom(const LayoutList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayoutList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string layoutName = 10;
  int layoutname_size() const;
  void clear_layoutname();
  static const int kLayoutNameFieldNumber = 10;
  const ::std::string& layoutname(int index) const;
  ::std::string* mutable_layoutname(int index);
  void set_layoutname(int index, const ::std::string& value);
  void set_layoutname(int index, const char* value);
  void set_layoutname(int index, const char* value, size_t size);
  ::std::string* add_layoutname();
  void add_layoutname(const ::std::string& value);
  void add_layoutname(const char* value);
  void add_layoutname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& layoutname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_layoutname();

  // @@protoc_insertion_point(class_scope:messages.LayoutList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> layoutname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_layout_2eproto();
  friend void protobuf_AssignDesc_layout_2eproto();
  friend void protobuf_ShutdownFile_layout_2eproto();

  void InitAsDefaultInstance();
  static LayoutList* default_instance_;
};
// -------------------------------------------------------------------

class LayoutName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.LayoutName) */ {
 public:
  LayoutName();
  virtual ~LayoutName();

  LayoutName(const LayoutName& from);

  inline LayoutName& operator=(const LayoutName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutName& default_instance();

  void Swap(LayoutName* other);

  // implements Message ----------------------------------------------

  inline LayoutName* New() const { return New(NULL); }

  LayoutName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayoutName& from);
  void MergeFrom(const LayoutName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayoutName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:messages.LayoutName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_layout_2eproto();
  friend void protobuf_AssignDesc_layout_2eproto();
  friend void protobuf_ShutdownFile_layout_2eproto();

  void InitAsDefaultInstance();
  static LayoutName* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  inline Device* New() const { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uid = 20;
  void clear_uid();
  static const int kUidFieldNumber = 20;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional double horizontalFOV = 30;
  void clear_horizontalfov();
  static const int kHorizontalFOVFieldNumber = 30;
  double horizontalfov() const;
  void set_horizontalfov(double value);

  // optional double minDistance = 40;
  void clear_mindistance();
  static const int kMinDistanceFieldNumber = 40;
  double mindistance() const;
  void set_mindistance(double value);

  // optional double maxDistance = 50;
  void clear_maxdistance();
  static const int kMaxDistanceFieldNumber = 50;
  double maxdistance() const;
  void set_maxdistance(double value);

  // optional .messages.vec3 position = 60;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 60;
  const ::messages::vec3& position() const;
  ::messages::vec3* mutable_position();
  ::messages::vec3* release_position();
  void set_allocated_position(::messages::vec3* position);

  // optional .messages.vec3 orientation = 70;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 70;
  const ::messages::vec3& orientation() const;
  ::messages::vec3* mutable_orientation();
  ::messages::vec3* release_orientation();
  void set_allocated_orientation(::messages::vec3* orientation);

  // optional string physicaluid = 80;
  void clear_physicaluid();
  static const int kPhysicaluidFieldNumber = 80;
  const ::std::string& physicaluid() const;
  void set_physicaluid(const ::std::string& value);
  void set_physicaluid(const char* value);
  void set_physicaluid(const char* value, size_t size);
  ::std::string* mutable_physicaluid();
  ::std::string* release_physicaluid();
  void set_allocated_physicaluid(::std::string* physicaluid);

  // optional .messages.vec3 positionDelta = 90;
  bool has_positiondelta() const;
  void clear_positiondelta();
  static const int kPositionDeltaFieldNumber = 90;
  const ::messages::vec3& positiondelta() const;
  ::messages::vec3* mutable_positiondelta();
  ::messages::vec3* release_positiondelta();
  void set_allocated_positiondelta(::messages::vec3* positiondelta);

  // optional .messages.vec3 orientationDelta = 100;
  bool has_orientationdelta() const;
  void clear_orientationdelta();
  static const int kOrientationDeltaFieldNumber = 100;
  const ::messages::vec3& orientationdelta() const;
  ::messages::vec3* mutable_orientationdelta();
  ::messages::vec3* release_orientationdelta();
  void set_allocated_orientationdelta(::messages::vec3* orientationdelta);

  // @@protoc_insertion_point(class_scope:messages.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  double horizontalfov_;
  double mindistance_;
  double maxdistance_;
  ::messages::vec3* position_;
  ::messages::vec3* orientation_;
  ::google::protobuf::internal::ArenaStringPtr physicaluid_;
  ::messages::vec3* positiondelta_;
  ::messages::vec3* orientationdelta_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_layout_2eproto();
  friend void protobuf_AssignDesc_layout_2eproto();
  friend void protobuf_ShutdownFile_layout_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class Screen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Screen) */ {
 public:
  Screen();
  virtual ~Screen();

  Screen(const Screen& from);

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Screen& default_instance();

  void Swap(Screen* other);

  // implements Message ----------------------------------------------

  inline Screen* New() const { return New(NULL); }

  Screen* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Screen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uid = 20;
  void clear_uid();
  static const int kUidFieldNumber = 20;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional .messages.vec3 position = 30;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 30;
  const ::messages::vec3& position() const;
  ::messages::vec3* mutable_position();
  ::messages::vec3* release_position();
  void set_allocated_position(::messages::vec3* position);

  // optional .messages.vec3 orientation = 40;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 40;
  const ::messages::vec3& orientation() const;
  ::messages::vec3* mutable_orientation();
  ::messages::vec3* release_orientation();
  void set_allocated_orientation(::messages::vec3* orientation);

  // optional .messages.vec2 size = 50;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 50;
  const ::messages::vec2& size() const;
  ::messages::vec2* mutable_size();
  ::messages::vec2* release_size();
  void set_allocated_size(::messages::vec2* size);

  // @@protoc_insertion_point(class_scope:messages.Screen)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::messages::vec3* position_;
  ::messages::vec3* orientation_;
  ::messages::vec2* size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_layout_2eproto();
  friend void protobuf_AssignDesc_layout_2eproto();
  friend void protobuf_ShutdownFile_layout_2eproto();

  void InitAsDefaultInstance();
  static Screen* default_instance_;
};
// -------------------------------------------------------------------

class Layout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Layout) */ {
 public:
  Layout();
  virtual ~Layout();

  Layout(const Layout& from);

  inline Layout& operator=(const Layout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layout& default_instance();

  void Swap(Layout* other);

  // implements Message ----------------------------------------------

  inline Layout* New() const { return New(NULL); }

  Layout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layout& from);
  void MergeFrom(const Layout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .messages.Device devices = 20;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 20;
  const ::messages::Device& devices(int index) const;
  ::messages::Device* mutable_devices(int index);
  ::messages::Device* add_devices();
  ::google::protobuf::RepeatedPtrField< ::messages::Device >*
      mutable_devices();
  const ::google::protobuf::RepeatedPtrField< ::messages::Device >&
      devices() const;

  // repeated .messages.Screen screens = 30;
  int screens_size() const;
  void clear_screens();
  static const int kScreensFieldNumber = 30;
  const ::messages::Screen& screens(int index) const;
  ::messages::Screen* mutable_screens(int index);
  ::messages::Screen* add_screens();
  ::google::protobuf::RepeatedPtrField< ::messages::Screen >*
      mutable_screens();
  const ::google::protobuf::RepeatedPtrField< ::messages::Screen >&
      screens() const;

  // @@protoc_insertion_point(class_scope:messages.Layout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::messages::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::messages::Screen > screens_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_layout_2eproto();
  friend void protobuf_AssignDesc_layout_2eproto();
  friend void protobuf_ShutdownFile_layout_2eproto();

  void InitAsDefaultInstance();
  static Layout* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LayoutList

// repeated string layoutName = 10;
inline int LayoutList::layoutname_size() const {
  return layoutname_.size();
}
inline void LayoutList::clear_layoutname() {
  layoutname_.Clear();
}
inline const ::std::string& LayoutList::layoutname(int index) const {
  // @@protoc_insertion_point(field_get:messages.LayoutList.layoutName)
  return layoutname_.Get(index);
}
inline ::std::string* LayoutList::mutable_layoutname(int index) {
  // @@protoc_insertion_point(field_mutable:messages.LayoutList.layoutName)
  return layoutname_.Mutable(index);
}
inline void LayoutList::set_layoutname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:messages.LayoutList.layoutName)
  layoutname_.Mutable(index)->assign(value);
}
inline void LayoutList::set_layoutname(int index, const char* value) {
  layoutname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.LayoutList.layoutName)
}
inline void LayoutList::set_layoutname(int index, const char* value, size_t size) {
  layoutname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.LayoutList.layoutName)
}
inline ::std::string* LayoutList::add_layoutname() {
  // @@protoc_insertion_point(field_add_mutable:messages.LayoutList.layoutName)
  return layoutname_.Add();
}
inline void LayoutList::add_layoutname(const ::std::string& value) {
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messages.LayoutList.layoutName)
}
inline void LayoutList::add_layoutname(const char* value) {
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messages.LayoutList.layoutName)
}
inline void LayoutList::add_layoutname(const char* value, size_t size) {
  layoutname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messages.LayoutList.layoutName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayoutList::layoutname() const {
  // @@protoc_insertion_point(field_list:messages.LayoutList.layoutName)
  return layoutname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayoutList::mutable_layoutname() {
  // @@protoc_insertion_point(field_mutable_list:messages.LayoutList.layoutName)
  return &layoutname_;
}

// -------------------------------------------------------------------

// LayoutName

// optional string name = 10;
inline void LayoutName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayoutName::name() const {
  // @@protoc_insertion_point(field_get:messages.LayoutName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayoutName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.LayoutName.name)
}
inline void LayoutName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.LayoutName.name)
}
inline void LayoutName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.LayoutName.name)
}
inline ::std::string* LayoutName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:messages.LayoutName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayoutName::release_name() {
  // @@protoc_insertion_point(field_release:messages.LayoutName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayoutName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:messages.LayoutName.name)
}

// -------------------------------------------------------------------

// Device

// optional string name = 10;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:messages.Device.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Device.name)
}
inline void Device::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Device.name)
}
inline ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:messages.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:messages.Device.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:messages.Device.name)
}

// optional string uid = 20;
inline void Device::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::uid() const {
  // @@protoc_insertion_point(field_get:messages.Device.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Device.uid)
}
inline void Device::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Device.uid)
}
inline void Device::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Device.uid)
}
inline ::std::string* Device::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:messages.Device.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_uid() {
  // @@protoc_insertion_point(field_release:messages.Device.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:messages.Device.uid)
}

// optional double horizontalFOV = 30;
inline void Device::clear_horizontalfov() {
  horizontalfov_ = 0;
}
inline double Device::horizontalfov() const {
  // @@protoc_insertion_point(field_get:messages.Device.horizontalFOV)
  return horizontalfov_;
}
inline void Device::set_horizontalfov(double value) {
  
  horizontalfov_ = value;
  // @@protoc_insertion_point(field_set:messages.Device.horizontalFOV)
}

// optional double minDistance = 40;
inline void Device::clear_mindistance() {
  mindistance_ = 0;
}
inline double Device::mindistance() const {
  // @@protoc_insertion_point(field_get:messages.Device.minDistance)
  return mindistance_;
}
inline void Device::set_mindistance(double value) {
  
  mindistance_ = value;
  // @@protoc_insertion_point(field_set:messages.Device.minDistance)
}

// optional double maxDistance = 50;
inline void Device::clear_maxdistance() {
  maxdistance_ = 0;
}
inline double Device::maxdistance() const {
  // @@protoc_insertion_point(field_get:messages.Device.maxDistance)
  return maxdistance_;
}
inline void Device::set_maxdistance(double value) {
  
  maxdistance_ = value;
  // @@protoc_insertion_point(field_set:messages.Device.maxDistance)
}

// optional .messages.vec3 position = 60;
inline bool Device::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Device::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::messages::vec3& Device::position() const {
  // @@protoc_insertion_point(field_get:messages.Device.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::messages::vec3* Device::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Device.position)
  return position_;
}
inline ::messages::vec3* Device::release_position() {
  // @@protoc_insertion_point(field_release:messages.Device.position)
  
  ::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Device::set_allocated_position(::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Device.position)
}

// optional .messages.vec3 orientation = 70;
inline bool Device::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
inline void Device::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::messages::vec3& Device::orientation() const {
  // @@protoc_insertion_point(field_get:messages.Device.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::messages::vec3* Device::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Device.orientation)
  return orientation_;
}
inline ::messages::vec3* Device::release_orientation() {
  // @@protoc_insertion_point(field_release:messages.Device.orientation)
  
  ::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Device::set_allocated_orientation(::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Device.orientation)
}

// optional string physicaluid = 80;
inline void Device::clear_physicaluid() {
  physicaluid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::physicaluid() const {
  // @@protoc_insertion_point(field_get:messages.Device.physicaluid)
  return physicaluid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_physicaluid(const ::std::string& value) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Device.physicaluid)
}
inline void Device::set_physicaluid(const char* value) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Device.physicaluid)
}
inline void Device::set_physicaluid(const char* value, size_t size) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Device.physicaluid)
}
inline ::std::string* Device::mutable_physicaluid() {
  
  // @@protoc_insertion_point(field_mutable:messages.Device.physicaluid)
  return physicaluid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_physicaluid() {
  // @@protoc_insertion_point(field_release:messages.Device.physicaluid)
  
  return physicaluid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_physicaluid(::std::string* physicaluid) {
  if (physicaluid != NULL) {
    
  } else {
    
  }
  physicaluid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physicaluid);
  // @@protoc_insertion_point(field_set_allocated:messages.Device.physicaluid)
}

// optional .messages.vec3 positionDelta = 90;
inline bool Device::has_positiondelta() const {
  return !_is_default_instance_ && positiondelta_ != NULL;
}
inline void Device::clear_positiondelta() {
  if (GetArenaNoVirtual() == NULL && positiondelta_ != NULL) delete positiondelta_;
  positiondelta_ = NULL;
}
inline const ::messages::vec3& Device::positiondelta() const {
  // @@protoc_insertion_point(field_get:messages.Device.positionDelta)
  return positiondelta_ != NULL ? *positiondelta_ : *default_instance_->positiondelta_;
}
inline ::messages::vec3* Device::mutable_positiondelta() {
  
  if (positiondelta_ == NULL) {
    positiondelta_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Device.positionDelta)
  return positiondelta_;
}
inline ::messages::vec3* Device::release_positiondelta() {
  // @@protoc_insertion_point(field_release:messages.Device.positionDelta)
  
  ::messages::vec3* temp = positiondelta_;
  positiondelta_ = NULL;
  return temp;
}
inline void Device::set_allocated_positiondelta(::messages::vec3* positiondelta) {
  delete positiondelta_;
  positiondelta_ = positiondelta;
  if (positiondelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Device.positionDelta)
}

// optional .messages.vec3 orientationDelta = 100;
inline bool Device::has_orientationdelta() const {
  return !_is_default_instance_ && orientationdelta_ != NULL;
}
inline void Device::clear_orientationdelta() {
  if (GetArenaNoVirtual() == NULL && orientationdelta_ != NULL) delete orientationdelta_;
  orientationdelta_ = NULL;
}
inline const ::messages::vec3& Device::orientationdelta() const {
  // @@protoc_insertion_point(field_get:messages.Device.orientationDelta)
  return orientationdelta_ != NULL ? *orientationdelta_ : *default_instance_->orientationdelta_;
}
inline ::messages::vec3* Device::mutable_orientationdelta() {
  
  if (orientationdelta_ == NULL) {
    orientationdelta_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Device.orientationDelta)
  return orientationdelta_;
}
inline ::messages::vec3* Device::release_orientationdelta() {
  // @@protoc_insertion_point(field_release:messages.Device.orientationDelta)
  
  ::messages::vec3* temp = orientationdelta_;
  orientationdelta_ = NULL;
  return temp;
}
inline void Device::set_allocated_orientationdelta(::messages::vec3* orientationdelta) {
  delete orientationdelta_;
  orientationdelta_ = orientationdelta;
  if (orientationdelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Device.orientationDelta)
}

// -------------------------------------------------------------------

// Screen

// optional string name = 10;
inline void Screen::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Screen::name() const {
  // @@protoc_insertion_point(field_get:messages.Screen.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Screen.name)
}
inline void Screen::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Screen.name)
}
inline void Screen::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Screen.name)
}
inline ::std::string* Screen::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:messages.Screen.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Screen::release_name() {
  // @@protoc_insertion_point(field_release:messages.Screen.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:messages.Screen.name)
}

// optional string uid = 20;
inline void Screen::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Screen::uid() const {
  // @@protoc_insertion_point(field_get:messages.Screen.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Screen.uid)
}
inline void Screen::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Screen.uid)
}
inline void Screen::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Screen.uid)
}
inline ::std::string* Screen::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:messages.Screen.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Screen::release_uid() {
  // @@protoc_insertion_point(field_release:messages.Screen.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:messages.Screen.uid)
}

// optional .messages.vec3 position = 30;
inline bool Screen::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Screen::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::messages::vec3& Screen::position() const {
  // @@protoc_insertion_point(field_get:messages.Screen.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::messages::vec3* Screen::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Screen.position)
  return position_;
}
inline ::messages::vec3* Screen::release_position() {
  // @@protoc_insertion_point(field_release:messages.Screen.position)
  
  ::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Screen::set_allocated_position(::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Screen.position)
}

// optional .messages.vec3 orientation = 40;
inline bool Screen::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
inline void Screen::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::messages::vec3& Screen::orientation() const {
  // @@protoc_insertion_point(field_get:messages.Screen.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::messages::vec3* Screen::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:messages.Screen.orientation)
  return orientation_;
}
inline ::messages::vec3* Screen::release_orientation() {
  // @@protoc_insertion_point(field_release:messages.Screen.orientation)
  
  ::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Screen::set_allocated_orientation(::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Screen.orientation)
}

// optional .messages.vec2 size = 50;
inline bool Screen::has_size() const {
  return !_is_default_instance_ && size_ != NULL;
}
inline void Screen::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
inline const ::messages::vec2& Screen::size() const {
  // @@protoc_insertion_point(field_get:messages.Screen.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::messages::vec2* Screen::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::messages::vec2;
  }
  // @@protoc_insertion_point(field_mutable:messages.Screen.size)
  return size_;
}
inline ::messages::vec2* Screen::release_size() {
  // @@protoc_insertion_point(field_release:messages.Screen.size)
  
  ::messages::vec2* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Screen::set_allocated_size(::messages::vec2* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Screen.size)
}

// -------------------------------------------------------------------

// Layout

// optional string name = 10;
inline void Layout::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Layout::name() const {
  // @@protoc_insertion_point(field_get:messages.Layout.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layout::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Layout.name)
}
inline void Layout::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Layout.name)
}
inline void Layout::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Layout.name)
}
inline ::std::string* Layout::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:messages.Layout.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layout::release_name() {
  // @@protoc_insertion_point(field_release:messages.Layout.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layout::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:messages.Layout.name)
}

// repeated .messages.Device devices = 20;
inline int Layout::devices_size() const {
  return devices_.size();
}
inline void Layout::clear_devices() {
  devices_.Clear();
}
inline const ::messages::Device& Layout::devices(int index) const {
  // @@protoc_insertion_point(field_get:messages.Layout.devices)
  return devices_.Get(index);
}
inline ::messages::Device* Layout::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:messages.Layout.devices)
  return devices_.Mutable(index);
}
inline ::messages::Device* Layout::add_devices() {
  // @@protoc_insertion_point(field_add:messages.Layout.devices)
  return devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::messages::Device >*
Layout::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:messages.Layout.devices)
  return &devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::messages::Device >&
Layout::devices() const {
  // @@protoc_insertion_point(field_list:messages.Layout.devices)
  return devices_;
}

// repeated .messages.Screen screens = 30;
inline int Layout::screens_size() const {
  return screens_.size();
}
inline void Layout::clear_screens() {
  screens_.Clear();
}
inline const ::messages::Screen& Layout::screens(int index) const {
  // @@protoc_insertion_point(field_get:messages.Layout.screens)
  return screens_.Get(index);
}
inline ::messages::Screen* Layout::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:messages.Layout.screens)
  return screens_.Mutable(index);
}
inline ::messages::Screen* Layout::add_screens() {
  // @@protoc_insertion_point(field_add:messages.Layout.screens)
  return screens_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::messages::Screen >*
Layout::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:messages.Layout.screens)
  return &screens_;
}
inline const ::google::protobuf::RepeatedPtrField< ::messages::Screen >&
Layout::screens() const {
  // @@protoc_insertion_point(field_list:messages.Layout.screens)
  return screens_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_layout_2eproto__INCLUDED
