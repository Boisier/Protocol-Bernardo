// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace messages {

namespace {

const ::google::protobuf::Descriptor* Endpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Endpoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Endpoint_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datagram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datagram_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Datagram_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_network_2eproto() {
  protobuf_AddDesc_network_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network.proto");
  GOOGLE_CHECK(file != NULL);
  Endpoint_descriptor_ = file->message_type(0);
  static const int Endpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, type_),
  };
  Endpoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Endpoint_descriptor_,
      Endpoint::default_instance_,
      Endpoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(Endpoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _is_default_instance_));
  Endpoint_Type_descriptor_ = Endpoint_descriptor_->enum_type(0);
  Ping_descriptor_ = file->message_type(1);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, time_),
  };
  Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _is_default_instance_));
  MasterStatus_descriptor_ = file->message_type(2);
  static const int MasterStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterStatus, activelayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterStatus, connecteddevices_),
  };
  MasterStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterStatus_descriptor_,
      MasterStatus::default_instance_,
      MasterStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(MasterStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterStatus, _is_default_instance_));
  Datagram_descriptor_ = file->message_type(3);
  static const int Datagram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datagram, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datagram, data_),
  };
  Datagram_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Datagram_descriptor_,
      Datagram::default_instance_,
      Datagram_offsets_,
      -1,
      -1,
      -1,
      sizeof(Datagram),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datagram, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datagram, _is_default_instance_));
  Datagram_Type_descriptor_ = Datagram_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Endpoint_descriptor_, &Endpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterStatus_descriptor_, &MasterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Datagram_descriptor_, &Datagram::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2eproto() {
  delete Endpoint::default_instance_;
  delete Endpoint_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete MasterStatus::default_instance_;
  delete MasterStatus_reflection_;
  delete Datagram::default_instance_;
  delete Datagram_reflection_;
}

void protobuf_AddDesc_network_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_network_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnetwork.proto\022\010messages\032\031google/protob"
    "uf/any.proto\"\221\001\n\010Endpoint\022\014\n\004name\030\001 \001(\t\022"
    "%\n\004type\030\002 \001(\0162\027.messages.Endpoint.Type\"P"
    "\n\004Type\022\r\n\tUNDEFINED\020\000\022\016\n\nACQUISITOR\020\001\022\017\n"
    "\013BROADCASTER\020\002\022\n\n\006MASTER\020\003\022\014\n\010TERMINAL\020\004"
    "\"\024\n\004Ping\022\014\n\004time\030\001 \001(\004\">\n\014MasterStatus\022\024"
    "\n\014activeLayout\030\n \001(\t\022\030\n\020connectedDevices"
    "\030\024 \003(\t\"\210\003\n\010Datagram\022%\n\004type\030\001 \001(\0162\027.mess"
    "ages.Datagram.Type\022\"\n\004data\030d \001(\0132\024.googl"
    "e.protobuf.Any\"\260\002\n\004Type\022\r\n\tUNDEFINED\020\000\022\t"
    "\n\005CLOSE\020\005\022\010\n\004PING\020\n\022\010\n\004PONG\020\013\022\n\n\006STATUS\020"
    "2\022\027\n\023ACQ_GET_BODY_STREAM\020n\022\027\n\023ACQ_END_BO"
    "DY_STREAM\020o\022\014\n\010ACQ_BODY\020s\022\022\n\rLAYOUT_LAYO"
    "UT\020\315\001\022\020\n\013LAYOUT_LIST\020\322\001\022\022\n\rLAYOUT_CREATE"
    "\020\323\001\022\020\n\013LAYOUT_OPEN\020\324\001\022\022\n\rLAYOUT_RENAME\020\325"
    "\001\022\022\n\rLAYOUT_UPDATE\020\326\001\022\021\n\014LAYOUT_CLOSE\020\327\001"
    "\022\022\n\rLAYOUT_DELETE\020\330\001\022\023\n\016TRACKED_BODIES\020\372"
    "\001b\006proto3", 689);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
  Endpoint::default_instance_ = new Endpoint();
  Ping::default_instance_ = new Ping();
  MasterStatus::default_instance_ = new MasterStatus();
  Datagram::default_instance_ = new Datagram();
  Endpoint::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  MasterStatus::default_instance_->InitAsDefaultInstance();
  Datagram::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2eproto {
  StaticDescriptorInitializer_network_2eproto() {
    protobuf_AddDesc_network_2eproto();
  }
} static_descriptor_initializer_network_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Endpoint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_Type_descriptor_;
}
bool Endpoint_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Endpoint_Type Endpoint::UNDEFINED;
const Endpoint_Type Endpoint::ACQUISITOR;
const Endpoint_Type Endpoint::BROADCASTER;
const Endpoint_Type Endpoint::MASTER;
const Endpoint_Type Endpoint::TERMINAL;
const Endpoint_Type Endpoint::Type_MIN;
const Endpoint_Type Endpoint::Type_MAX;
const int Endpoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Endpoint::kNameFieldNumber;
const int Endpoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Endpoint::Endpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messages.Endpoint)
}

void Endpoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messages.Endpoint)
}

void Endpoint::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:messages.Endpoint)
  SharedDtor();
}

void Endpoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_descriptor_;
}

const Endpoint& Endpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New(::google::protobuf::Arena* arena) const {
  Endpoint* n = new Endpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.Endpoint)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messages.Endpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messages.Endpoint.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .messages.Endpoint.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::messages::Endpoint_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messages.Endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messages.Endpoint)
  return false;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messages.Endpoint)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.Endpoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .messages.Endpoint.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:messages.Endpoint)
}

::google::protobuf::uint8* Endpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.Endpoint)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.Endpoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .messages.Endpoint.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messages.Endpoint)
  return target;
}

int Endpoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messages.Endpoint)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .messages.Endpoint.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.Endpoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Endpoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Endpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.Endpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.Endpoint)
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.Endpoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {

  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Endpoint::InternalSwap(Endpoint* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Endpoint_descriptor_;
  metadata.reflection = Endpoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Endpoint

// optional string name = 1;
void Endpoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Endpoint::name() const {
  // @@protoc_insertion_point(field_get:messages.Endpoint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Endpoint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.Endpoint.name)
}
 void Endpoint::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Endpoint.name)
}
 void Endpoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Endpoint.name)
}
 ::std::string* Endpoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:messages.Endpoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Endpoint::release_name() {
  // @@protoc_insertion_point(field_release:messages.Endpoint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Endpoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:messages.Endpoint.name)
}

// optional .messages.Endpoint.Type type = 2;
void Endpoint::clear_type() {
  type_ = 0;
}
 ::messages::Endpoint_Type Endpoint::type() const {
  // @@protoc_insertion_point(field_get:messages.Endpoint.type)
  return static_cast< ::messages::Endpoint_Type >(type_);
}
 void Endpoint::set_type(::messages::Endpoint_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:messages.Endpoint.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messages.Ping)
}

void Ping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messages.Ping)
}

void Ping::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:messages.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.Ping)
  time_ = GOOGLE_ULONGLONG(0);
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messages.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messages.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messages.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messages.Ping)
  // optional uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:messages.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.Ping)
  // optional uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messages.Ping)
  return target;
}

int Ping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messages.Ping)
  int total_size = 0;

  // optional uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional uint64 time = 1;
void Ping::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Ping::time() const {
  // @@protoc_insertion_point(field_get:messages.Ping.time)
  return time_;
}
 void Ping::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:messages.Ping.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterStatus::kActiveLayoutFieldNumber;
const int MasterStatus::kConnectedDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterStatus::MasterStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messages.MasterStatus)
}

void MasterStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MasterStatus::MasterStatus(const MasterStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messages.MasterStatus)
}

void MasterStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activelayout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MasterStatus::~MasterStatus() {
  // @@protoc_insertion_point(destructor:messages.MasterStatus)
  SharedDtor();
}

void MasterStatus::SharedDtor() {
  activelayout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterStatus_descriptor_;
}

const MasterStatus& MasterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

MasterStatus* MasterStatus::default_instance_ = NULL;

MasterStatus* MasterStatus::New(::google::protobuf::Arena* arena) const {
  MasterStatus* n = new MasterStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.MasterStatus)
  activelayout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connecteddevices_.Clear();
}

bool MasterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messages.MasterStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string activeLayout = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activelayout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activelayout().data(), this->activelayout().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messages.MasterStatus.activeLayout"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_connectedDevices;
        break;
      }

      // repeated string connectedDevices = 20;
      case 20: {
        if (tag == 162) {
         parse_connectedDevices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_connecteddevices()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connecteddevices(this->connecteddevices_size() - 1).data(),
            this->connecteddevices(this->connecteddevices_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messages.MasterStatus.connectedDevices"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_connectedDevices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messages.MasterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messages.MasterStatus)
  return false;
#undef DO_
}

void MasterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messages.MasterStatus)
  // optional string activeLayout = 10;
  if (this->activelayout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activelayout().data(), this->activelayout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.MasterStatus.activeLayout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->activelayout(), output);
  }

  // repeated string connectedDevices = 20;
  for (int i = 0; i < this->connecteddevices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecteddevices(i).data(), this->connecteddevices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.MasterStatus.connectedDevices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->connecteddevices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:messages.MasterStatus)
}

::google::protobuf::uint8* MasterStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.MasterStatus)
  // optional string activeLayout = 10;
  if (this->activelayout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activelayout().data(), this->activelayout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.MasterStatus.activeLayout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->activelayout(), target);
  }

  // repeated string connectedDevices = 20;
  for (int i = 0; i < this->connecteddevices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connecteddevices(i).data(), this->connecteddevices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messages.MasterStatus.connectedDevices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->connecteddevices(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messages.MasterStatus)
  return target;
}

int MasterStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messages.MasterStatus)
  int total_size = 0;

  // optional string activeLayout = 10;
  if (this->activelayout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activelayout());
  }

  // repeated string connectedDevices = 20;
  total_size += 2 * this->connecteddevices_size();
  for (int i = 0; i < this->connecteddevices_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->connecteddevices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.MasterStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.MasterStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.MasterStatus)
    MergeFrom(*source);
  }
}

void MasterStatus::MergeFrom(const MasterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.MasterStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  connecteddevices_.MergeFrom(from.connecteddevices_);
  if (from.activelayout().size() > 0) {

    activelayout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activelayout_);
  }
}

void MasterStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.MasterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterStatus::CopyFrom(const MasterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.MasterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterStatus::IsInitialized() const {

  return true;
}

void MasterStatus::Swap(MasterStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterStatus::InternalSwap(MasterStatus* other) {
  activelayout_.Swap(&other->activelayout_);
  connecteddevices_.UnsafeArenaSwap(&other->connecteddevices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterStatus_descriptor_;
  metadata.reflection = MasterStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterStatus

// optional string activeLayout = 10;
void MasterStatus::clear_activelayout() {
  activelayout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MasterStatus::activelayout() const {
  // @@protoc_insertion_point(field_get:messages.MasterStatus.activeLayout)
  return activelayout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterStatus::set_activelayout(const ::std::string& value) {
  
  activelayout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messages.MasterStatus.activeLayout)
}
 void MasterStatus::set_activelayout(const char* value) {
  
  activelayout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.MasterStatus.activeLayout)
}
 void MasterStatus::set_activelayout(const char* value, size_t size) {
  
  activelayout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.MasterStatus.activeLayout)
}
 ::std::string* MasterStatus::mutable_activelayout() {
  
  // @@protoc_insertion_point(field_mutable:messages.MasterStatus.activeLayout)
  return activelayout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterStatus::release_activelayout() {
  // @@protoc_insertion_point(field_release:messages.MasterStatus.activeLayout)
  
  return activelayout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterStatus::set_allocated_activelayout(::std::string* activelayout) {
  if (activelayout != NULL) {
    
  } else {
    
  }
  activelayout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activelayout);
  // @@protoc_insertion_point(field_set_allocated:messages.MasterStatus.activeLayout)
}

// repeated string connectedDevices = 20;
int MasterStatus::connecteddevices_size() const {
  return connecteddevices_.size();
}
void MasterStatus::clear_connecteddevices() {
  connecteddevices_.Clear();
}
 const ::std::string& MasterStatus::connecteddevices(int index) const {
  // @@protoc_insertion_point(field_get:messages.MasterStatus.connectedDevices)
  return connecteddevices_.Get(index);
}
 ::std::string* MasterStatus::mutable_connecteddevices(int index) {
  // @@protoc_insertion_point(field_mutable:messages.MasterStatus.connectedDevices)
  return connecteddevices_.Mutable(index);
}
 void MasterStatus::set_connecteddevices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:messages.MasterStatus.connectedDevices)
  connecteddevices_.Mutable(index)->assign(value);
}
 void MasterStatus::set_connecteddevices(int index, const char* value) {
  connecteddevices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.MasterStatus.connectedDevices)
}
 void MasterStatus::set_connecteddevices(int index, const char* value, size_t size) {
  connecteddevices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.MasterStatus.connectedDevices)
}
 ::std::string* MasterStatus::add_connecteddevices() {
  // @@protoc_insertion_point(field_add_mutable:messages.MasterStatus.connectedDevices)
  return connecteddevices_.Add();
}
 void MasterStatus::add_connecteddevices(const ::std::string& value) {
  connecteddevices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messages.MasterStatus.connectedDevices)
}
 void MasterStatus::add_connecteddevices(const char* value) {
  connecteddevices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messages.MasterStatus.connectedDevices)
}
 void MasterStatus::add_connecteddevices(const char* value, size_t size) {
  connecteddevices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messages.MasterStatus.connectedDevices)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterStatus::connecteddevices() const {
  // @@protoc_insertion_point(field_list:messages.MasterStatus.connectedDevices)
  return connecteddevices_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterStatus::mutable_connecteddevices() {
  // @@protoc_insertion_point(field_mutable_list:messages.MasterStatus.connectedDevices)
  return &connecteddevices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Datagram_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datagram_Type_descriptor_;
}
bool Datagram_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 5:
    case 10:
    case 11:
    case 50:
    case 110:
    case 111:
    case 115:
    case 205:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 250:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Datagram_Type Datagram::UNDEFINED;
const Datagram_Type Datagram::CLOSE;
const Datagram_Type Datagram::PING;
const Datagram_Type Datagram::PONG;
const Datagram_Type Datagram::STATUS;
const Datagram_Type Datagram::ACQ_GET_BODY_STREAM;
const Datagram_Type Datagram::ACQ_END_BODY_STREAM;
const Datagram_Type Datagram::ACQ_BODY;
const Datagram_Type Datagram::LAYOUT_LAYOUT;
const Datagram_Type Datagram::LAYOUT_LIST;
const Datagram_Type Datagram::LAYOUT_CREATE;
const Datagram_Type Datagram::LAYOUT_OPEN;
const Datagram_Type Datagram::LAYOUT_RENAME;
const Datagram_Type Datagram::LAYOUT_UPDATE;
const Datagram_Type Datagram::LAYOUT_CLOSE;
const Datagram_Type Datagram::LAYOUT_DELETE;
const Datagram_Type Datagram::TRACKED_BODIES;
const Datagram_Type Datagram::Type_MIN;
const Datagram_Type Datagram::Type_MAX;
const int Datagram::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datagram::kTypeFieldNumber;
const int Datagram::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datagram::Datagram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messages.Datagram)
}

void Datagram::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Datagram::Datagram(const Datagram& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messages.Datagram)
}

void Datagram::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  data_ = NULL;
}

Datagram::~Datagram() {
  // @@protoc_insertion_point(destructor:messages.Datagram)
  SharedDtor();
}

void Datagram::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Datagram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datagram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datagram_descriptor_;
}

const Datagram& Datagram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

Datagram* Datagram::default_instance_ = NULL;

Datagram* Datagram::New(::google::protobuf::Arena* arena) const {
  Datagram* n = new Datagram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datagram::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.Datagram)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool Datagram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messages.Datagram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .messages.Datagram.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::messages::Datagram_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_data;
        break;
      }

      // optional .google.protobuf.Any data = 100;
      case 100: {
        if (tag == 802) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messages.Datagram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messages.Datagram)
  return false;
#undef DO_
}

void Datagram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messages.Datagram)
  // optional .messages.Datagram.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .google.protobuf.Any data = 100;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:messages.Datagram)
}

::google::protobuf::uint8* Datagram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.Datagram)
  // optional .messages.Datagram.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .google.protobuf.Any data = 100;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messages.Datagram)
  return target;
}

int Datagram::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messages.Datagram)
  int total_size = 0;

  // optional .messages.Datagram.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .google.protobuf.Any data = 100;
  if (this->has_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datagram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messages.Datagram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Datagram* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Datagram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messages.Datagram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messages.Datagram)
    MergeFrom(*source);
  }
}

void Datagram::MergeFrom(const Datagram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.Datagram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void Datagram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messages.Datagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datagram::CopyFrom(const Datagram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.Datagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datagram::IsInitialized() const {

  return true;
}

void Datagram::Swap(Datagram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datagram::InternalSwap(Datagram* other) {
  std::swap(type_, other->type_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datagram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datagram_descriptor_;
  metadata.reflection = Datagram_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datagram

// optional .messages.Datagram.Type type = 1;
void Datagram::clear_type() {
  type_ = 0;
}
 ::messages::Datagram_Type Datagram::type() const {
  // @@protoc_insertion_point(field_get:messages.Datagram.type)
  return static_cast< ::messages::Datagram_Type >(type_);
}
 void Datagram::set_type(::messages::Datagram_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:messages.Datagram.type)
}

// optional .google.protobuf.Any data = 100;
bool Datagram::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Datagram::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::google::protobuf::Any& Datagram::data() const {
  // @@protoc_insertion_point(field_get:messages.Datagram.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::google::protobuf::Any* Datagram::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:messages.Datagram.data)
  return data_;
}
::google::protobuf::Any* Datagram::release_data() {
  // @@protoc_insertion_point(field_release:messages.Datagram.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
void Datagram::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messages.Datagram.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)
