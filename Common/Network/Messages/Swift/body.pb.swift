// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: body.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_Network_Messages_Joint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orientation: Pb_Network_Messages_vec3 {
    get {return _storage._orientation ?? Pb_Network_Messages_vec3()}
    set {_uniqueStorage()._orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return _storage._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

  var orientationConfidence: Double {
    get {return _storage._orientationConfidence}
    set {_uniqueStorage()._orientationConfidence = newValue}
  }

  var position: Pb_Network_Messages_vec3 {
    get {return _storage._position ?? Pb_Network_Messages_vec3()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_uniqueStorage()._position = nil}

  var position2D: Pb_Network_Messages_vec2 {
    get {return _storage._position2D ?? Pb_Network_Messages_vec2()}
    set {_uniqueStorage()._position2D = newValue}
  }
  /// Returns true if `position2D` has been explicitly set.
  var hasPosition2D: Bool {return _storage._position2D != nil}
  /// Clears the value of `position2D`. Subsequent reads from it will return its default value.
  mutating func clearPosition2D() {_uniqueStorage()._position2D = nil}

  var positionConfidence: Double {
    get {return _storage._positionConfidence}
    set {_uniqueStorage()._positionConfidence = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Pb_Network_Messages_Skeleton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var joints: [Pb_Network_Messages_Joint] {
    get {return _storage._joints}
    set {_uniqueStorage()._joints = newValue}
  }

  var centerOfMass: Pb_Network_Messages_vec3 {
    get {return _storage._centerOfMass ?? Pb_Network_Messages_vec3()}
    set {_uniqueStorage()._centerOfMass = newValue}
  }
  /// Returns true if `centerOfMass` has been explicitly set.
  var hasCenterOfMass: Bool {return _storage._centerOfMass != nil}
  /// Clears the value of `centerOfMass`. Subsequent reads from it will return its default value.
  mutating func clearCenterOfMass() {_uniqueStorage()._centerOfMass = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Pb_Network_Messages_RawBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uid: Int32 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  var skeleton: Pb_Network_Messages_Skeleton {
    get {return _storage._skeleton ?? Pb_Network_Messages_Skeleton()}
    set {_uniqueStorage()._skeleton = newValue}
  }
  /// Returns true if `skeleton` has been explicitly set.
  var hasSkeleton: Bool {return _storage._skeleton != nil}
  /// Clears the value of `skeleton`. Subsequent reads from it will return its default value.
  mutating func clearSkeleton() {_uniqueStorage()._skeleton = nil}

  var state: Pb_Network_Messages_RawBody.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var deviceUid: String {
    get {return _storage._deviceUid}
    set {_uniqueStorage()._deviceUid = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case error // = 0
    case noSkeleton // = 1
    case calibrating // = 2
    case tracked // = 3
    case missing // = 4
    case lost // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .error
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .error
      case 1: self = .noSkeleton
      case 2: self = .calibrating
      case 3: self = .tracked
      case 4: self = .missing
      case 5: self = .lost
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .error: return 0
      case .noSkeleton: return 1
      case .calibrating: return 2
      case .tracked: return 3
      case .missing: return 4
      case .lost: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Pb_Network_Messages_RawBody.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pb_Network_Messages_RawBody.State] = [
    .error,
    .noSkeleton,
    .calibrating,
    .tracked,
    .missing,
    .lost,
  ]
}

#endif  // swift(>=4.2)

struct Pb_Network_Messages_RawBodies {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rawBodies: [Pb_Network_Messages_RawBody] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_Network_Messages_Body {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uid: String = String()

  var isValid: Bool = false

  var frame: UInt32 = 0

  var skeletons: [Pb_Network_Messages_Skeleton] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_Network_Messages_TrackedBodies {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bodies: [Pb_Network_Messages_Body] {
    get {return _storage._bodies}
    set {_uniqueStorage()._bodies = newValue}
  }

  var calibrationValues: Pb_Network_Messages_CalibrationValues {
    get {return _storage._calibrationValues ?? Pb_Network_Messages_CalibrationValues()}
    set {_uniqueStorage()._calibrationValues = newValue}
  }
  /// Returns true if `calibrationValues` has been explicitly set.
  var hasCalibrationValues: Bool {return _storage._calibrationValues != nil}
  /// Clears the value of `calibrationValues`. Subsequent reads from it will return its default value.
  mutating func clearCalibrationValues() {_uniqueStorage()._calibrationValues = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb.network.messages"

extension Pb_Network_Messages_Joint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Joint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orientation"),
    2: .same(proto: "orientationConfidence"),
    3: .same(proto: "position"),
    4: .same(proto: "position2D"),
    5: .same(proto: "positionConfidence"),
  ]

  fileprivate class _StorageClass {
    var _orientation: Pb_Network_Messages_vec3? = nil
    var _orientationConfidence: Double = 0
    var _position: Pb_Network_Messages_vec3? = nil
    var _position2D: Pb_Network_Messages_vec2? = nil
    var _positionConfidence: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orientation = source._orientation
      _orientationConfidence = source._orientationConfidence
      _position = source._position
      _position2D = source._position2D
      _positionConfidence = source._positionConfidence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._orientation)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._orientationConfidence)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._position2D)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._positionConfidence)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._orientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._orientationConfidence != 0 {
        try visitor.visitSingularDoubleField(value: _storage._orientationConfidence, fieldNumber: 2)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._position2D {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._positionConfidence != 0 {
        try visitor.visitSingularDoubleField(value: _storage._positionConfidence, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_Joint, rhs: Pb_Network_Messages_Joint) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._orientationConfidence != rhs_storage._orientationConfidence {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._position2D != rhs_storage._position2D {return false}
        if _storage._positionConfidence != rhs_storage._positionConfidence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Network_Messages_Skeleton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Skeleton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "joints"),
    2: .same(proto: "centerOfMass"),
  ]

  fileprivate class _StorageClass {
    var _joints: [Pb_Network_Messages_Joint] = []
    var _centerOfMass: Pb_Network_Messages_vec3? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _joints = source._joints
      _centerOfMass = source._centerOfMass
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._joints)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._centerOfMass)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._joints.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._joints, fieldNumber: 1)
      }
      if let v = _storage._centerOfMass {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_Skeleton, rhs: Pb_Network_Messages_Skeleton) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._joints != rhs_storage._joints {return false}
        if _storage._centerOfMass != rhs_storage._centerOfMass {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Network_Messages_RawBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RawBody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "skeleton"),
    3: .same(proto: "state"),
    4: .same(proto: "deviceUID"),
  ]

  fileprivate class _StorageClass {
    var _uid: Int32 = 0
    var _skeleton: Pb_Network_Messages_Skeleton? = nil
    var _state: Pb_Network_Messages_RawBody.State = .error
    var _deviceUid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _skeleton = source._skeleton
      _state = source._state
      _deviceUid = source._deviceUid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._uid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._skeleton)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 4: try decoder.decodeSingularStringField(value: &_storage._deviceUid)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._uid != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uid, fieldNumber: 1)
      }
      if let v = _storage._skeleton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._state != .error {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 3)
      }
      if !_storage._deviceUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceUid, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_RawBody, rhs: Pb_Network_Messages_RawBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._skeleton != rhs_storage._skeleton {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._deviceUid != rhs_storage._deviceUid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Network_Messages_RawBody.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "error"),
    1: .same(proto: "noSkeleton"),
    2: .same(proto: "calibrating"),
    3: .same(proto: "tracked"),
    4: .same(proto: "missing"),
    5: .same(proto: "lost"),
  ]
}

extension Pb_Network_Messages_RawBodies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RawBodies"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rawBodies"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rawBodies)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rawBodies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rawBodies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_RawBodies, rhs: Pb_Network_Messages_RawBodies) -> Bool {
    if lhs.rawBodies != rhs.rawBodies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Network_Messages_Body: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Body"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "isValid"),
    5: .same(proto: "frame"),
    10: .same(proto: "skeletons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uid)
      case 2: try decoder.decodeSingularBoolField(value: &self.isValid)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.frame)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.skeletons)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if self.isValid != false {
      try visitor.visitSingularBoolField(value: self.isValid, fieldNumber: 2)
    }
    if self.frame != 0 {
      try visitor.visitSingularUInt32Field(value: self.frame, fieldNumber: 5)
    }
    if !self.skeletons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.skeletons, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_Body, rhs: Pb_Network_Messages_Body) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.isValid != rhs.isValid {return false}
    if lhs.frame != rhs.frame {return false}
    if lhs.skeletons != rhs.skeletons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Network_Messages_TrackedBodies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackedBodies"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "bodies"),
    20: .same(proto: "calibrationValues"),
  ]

  fileprivate class _StorageClass {
    var _bodies: [Pb_Network_Messages_Body] = []
    var _calibrationValues: Pb_Network_Messages_CalibrationValues? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bodies = source._bodies
      _calibrationValues = source._calibrationValues
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._bodies)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._calibrationValues)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bodies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bodies, fieldNumber: 10)
      }
      if let v = _storage._calibrationValues {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Network_Messages_TrackedBodies, rhs: Pb_Network_Messages_TrackedBodies) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bodies != rhs_storage._bodies {return false}
        if _storage._calibrationValues != rhs_storage._calibrationValues {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
