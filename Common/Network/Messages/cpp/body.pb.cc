// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#include "body.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_body_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Joint_body_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_body_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawBody_body_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_body_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Skeleton_body_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_maths_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec2_maths_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_maths_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec3_maths_2eproto;
namespace pb {
namespace network {
namespace messages {
class JointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Joint> _instance;
} _Joint_default_instance_;
class SkeletonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Skeleton> _instance;
} _Skeleton_default_instance_;
class RawBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawBody> _instance;
} _RawBody_default_instance_;
class RawBodiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawBodies> _instance;
} _RawBodies_default_instance_;
class PartialBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartialBody> _instance;
} _PartialBody_default_instance_;
}  // namespace messages
}  // namespace network
}  // namespace pb
static void InitDefaultsscc_info_Joint_body_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_Joint_default_instance_;
    new (ptr) ::pb::network::messages::Joint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::Joint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Joint_body_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Joint_body_2eproto}, {
      &scc_info_vec3_maths_2eproto.base,
      &scc_info_vec2_maths_2eproto.base,}};

static void InitDefaultsscc_info_PartialBody_body_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_PartialBody_default_instance_;
    new (ptr) ::pb::network::messages::PartialBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::PartialBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartialBody_body_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartialBody_body_2eproto}, {
      &scc_info_Skeleton_body_2eproto.base,}};

static void InitDefaultsscc_info_RawBodies_body_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_RawBodies_default_instance_;
    new (ptr) ::pb::network::messages::RawBodies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::RawBodies::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawBodies_body_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawBodies_body_2eproto}, {
      &scc_info_RawBody_body_2eproto.base,}};

static void InitDefaultsscc_info_RawBody_body_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_RawBody_default_instance_;
    new (ptr) ::pb::network::messages::RawBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::RawBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawBody_body_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawBody_body_2eproto}, {
      &scc_info_Skeleton_body_2eproto.base,}};

static void InitDefaultsscc_info_Skeleton_body_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_Skeleton_default_instance_;
    new (ptr) ::pb::network::messages::Skeleton();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::Skeleton::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Skeleton_body_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Skeleton_body_2eproto}, {
      &scc_info_Joint_body_2eproto.base,
      &scc_info_vec3_maths_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_body_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_body_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_body_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_body_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, orientation_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, orientationconfidence_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, position_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, position2d_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Joint, positionconfidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Skeleton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Skeleton, joints_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Skeleton, centerofmass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBody, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBody, skeleton_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBody, state_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBody, deviceuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBodies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::RawBodies, rawbodies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, frame_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, isvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, devicesuid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::PartialBody, skeleton_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::network::messages::Joint)},
  { 10, -1, sizeof(::pb::network::messages::Skeleton)},
  { 17, -1, sizeof(::pb::network::messages::RawBody)},
  { 26, -1, sizeof(::pb::network::messages::RawBodies)},
  { 32, -1, sizeof(::pb::network::messages::PartialBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_Joint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_Skeleton_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_RawBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_RawBodies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_PartialBody_default_instance_),
};

const char descriptor_table_protodef_body_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbody.proto\022\023pb.network.messages\032\013maths"
  ".proto\032\014layout.proto\"\316\001\n\005Joint\022.\n\013orient"
  "ation\030\001 \001(\0132\031.pb.network.messages.vec3\022\035"
  "\n\025orientationConfidence\030\002 \001(\001\022+\n\010positio"
  "n\030\003 \001(\0132\031.pb.network.messages.vec3\022-\n\npo"
  "sition2D\030\004 \001(\0132\031.pb.network.messages.vec"
  "2\022\032\n\022positionConfidence\030\005 \001(\001\"g\n\010Skeleto"
  "n\022*\n\006joints\030\001 \003(\0132\032.pb.network.messages."
  "Joint\022/\n\014centerOfMass\030\002 \001(\0132\031.pb.network"
  ".messages.vec3\"\346\001\n\007RawBody\022\013\n\003uid\030\001 \001(\005\022"
  "/\n\010skeleton\030\002 \001(\0132\035.pb.network.messages."
  "Skeleton\0221\n\005state\030\003 \001(\0162\".pb.network.mes"
  "sages.RawBody.State\022\021\n\tdeviceUID\030\004 \001(\t\"W"
  "\n\005State\022\t\n\005error\020\000\022\016\n\nnoSkeleton\020\001\022\017\n\013ca"
  "librating\020\002\022\013\n\007tracked\020\003\022\013\n\007missing\020\004\022\010\n"
  "\004lost\020\005\"<\n\tRawBodies\022/\n\trawBodies\030\001 \003(\0132"
  "\034.pb.network.messages.RawBody\"\177\n\013Partial"
  "Body\022\013\n\003uid\030\001 \001(\t\022\r\n\005frame\030\002 \001(\r\022\017\n\007isVa"
  "lid\030\003 \001(\010\022\022\n\ndevicesUID\030\005 \003(\t\022/\n\010skeleto"
  "n\030\n \001(\0132\035.pb.network.messages.Skeletonb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_body_2eproto_deps[2] = {
  &::descriptor_table_layout_2eproto,
  &::descriptor_table_maths_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_body_2eproto_sccs[5] = {
  &scc_info_Joint_body_2eproto.base,
  &scc_info_PartialBody_body_2eproto.base,
  &scc_info_RawBodies_body_2eproto.base,
  &scc_info_RawBody_body_2eproto.base,
  &scc_info_Skeleton_body_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_body_2eproto_once;
static bool descriptor_table_body_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_body_2eproto = {
  &descriptor_table_body_2eproto_initialized, descriptor_table_protodef_body_2eproto, "body.proto", 806,
  &descriptor_table_body_2eproto_once, descriptor_table_body_2eproto_sccs, descriptor_table_body_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_body_2eproto::offsets,
  file_level_metadata_body_2eproto, 5, file_level_enum_descriptors_body_2eproto, file_level_service_descriptors_body_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_body_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_body_2eproto), true);
namespace pb {
namespace network {
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RawBody_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_body_2eproto);
  return file_level_enum_descriptors_body_2eproto[0];
}
bool RawBody_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RawBody_State RawBody::error;
constexpr RawBody_State RawBody::noSkeleton;
constexpr RawBody_State RawBody::calibrating;
constexpr RawBody_State RawBody::tracked;
constexpr RawBody_State RawBody::missing;
constexpr RawBody_State RawBody::lost;
constexpr RawBody_State RawBody::State_MIN;
constexpr RawBody_State RawBody::State_MAX;
constexpr int RawBody::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Joint::InitAsDefaultInstance() {
  ::pb::network::messages::_Joint_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Joint_default_instance_._instance.get_mutable()->position_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Joint_default_instance_._instance.get_mutable()->position2d_ = const_cast< ::pb::network::messages::vec2*>(
      ::pb::network::messages::vec2::internal_default_instance());
}
class Joint::_Internal {
 public:
  static const ::pb::network::messages::vec3& orientation(const Joint* msg);
  static const ::pb::network::messages::vec3& position(const Joint* msg);
  static const ::pb::network::messages::vec2& position2d(const Joint* msg);
};

const ::pb::network::messages::vec3&
Joint::_Internal::orientation(const Joint* msg) {
  return *msg->orientation_;
}
const ::pb::network::messages::vec3&
Joint::_Internal::position(const Joint* msg) {
  return *msg->position_;
}
const ::pb::network::messages::vec2&
Joint::_Internal::position2d(const Joint* msg) {
  return *msg->position2d_;
}
void Joint::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void Joint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Joint::clear_position2d() {
  if (GetArenaNoVirtual() == nullptr && position2d_ != nullptr) {
    delete position2d_;
  }
  position2d_ = nullptr;
}
Joint::Joint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Joint)
}
Joint::Joint(const Joint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_orientation()) {
    orientation_ = new ::pb::network::messages::vec3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::pb::network::messages::vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_position2d()) {
    position2d_ = new ::pb::network::messages::vec2(*from.position2d_);
  } else {
    position2d_ = nullptr;
  }
  ::memcpy(&orientationconfidence_, &from.orientationconfidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionconfidence_) -
    reinterpret_cast<char*>(&orientationconfidence_)) + sizeof(positionconfidence_));
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Joint)
}

void Joint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Joint_body_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionconfidence_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(positionconfidence_));
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position2d_;
}

void Joint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Joint& Joint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Joint_body_2eproto.base);
  return *internal_default_instance();
}


void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position2d_ != nullptr) {
    delete position2d_;
  }
  position2d_ = nullptr;
  ::memset(&orientationconfidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionconfidence_) -
      reinterpret_cast<char*>(&orientationconfidence_)) + sizeof(positionconfidence_));
  _internal_metadata_.Clear();
}

const char* Joint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.network.messages.vec3 orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double orientationConfidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          orientationconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec2 position2D = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double positionConfidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          positionconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.network.messages.vec3 orientation = 1;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orientation(this), target, stream);
  }

  // double orientationConfidence = 2;
  if (!(this->orientationconfidence() <= 0 && this->orientationconfidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_orientationconfidence(), target);
  }

  // .pb.network.messages.vec3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .pb.network.messages.vec2 position2D = 4;
  if (this->has_position2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position2d(this), target, stream);
  }

  // double positionConfidence = 5;
  if (!(this->positionconfidence() <= 0 && this->positionconfidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_positionconfidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Joint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.network.messages.vec3 orientation = 1;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .pb.network.messages.vec3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .pb.network.messages.vec2 position2D = 4;
  if (this->has_position2d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position2d_);
  }

  // double orientationConfidence = 2;
  if (!(this->orientationconfidence() <= 0 && this->orientationconfidence() >= 0)) {
    total_size += 1 + 8;
  }

  // double positionConfidence = 5;
  if (!(this->positionconfidence() <= 0 && this->positionconfidence() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Joint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Joint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Joint)
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    _internal_mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from._internal_orientation());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::pb::network::messages::vec3::MergeFrom(from._internal_position());
  }
  if (from.has_position2d()) {
    _internal_mutable_position2d()->::pb::network::messages::vec2::MergeFrom(from._internal_position2d());
  }
  if (!(from.orientationconfidence() <= 0 && from.orientationconfidence() >= 0)) {
    _internal_set_orientationconfidence(from._internal_orientationconfidence());
  }
  if (!(from.positionconfidence() <= 0 && from.positionconfidence() >= 0)) {
    _internal_set_positionconfidence(from._internal_positionconfidence());
  }
}

void Joint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::InternalSwap(Joint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(position_, other->position_);
  swap(position2d_, other->position2d_);
  swap(orientationconfidence_, other->orientationconfidence_);
  swap(positionconfidence_, other->positionconfidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Skeleton::InitAsDefaultInstance() {
  ::pb::network::messages::_Skeleton_default_instance_._instance.get_mutable()->centerofmass_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
}
class Skeleton::_Internal {
 public:
  static const ::pb::network::messages::vec3& centerofmass(const Skeleton* msg);
};

const ::pb::network::messages::vec3&
Skeleton::_Internal::centerofmass(const Skeleton* msg) {
  return *msg->centerofmass_;
}
void Skeleton::clear_centerofmass() {
  if (GetArenaNoVirtual() == nullptr && centerofmass_ != nullptr) {
    delete centerofmass_;
  }
  centerofmass_ = nullptr;
}
Skeleton::Skeleton()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Skeleton)
}
Skeleton::Skeleton(const Skeleton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_centerofmass()) {
    centerofmass_ = new ::pb::network::messages::vec3(*from.centerofmass_);
  } else {
    centerofmass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Skeleton)
}

void Skeleton::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Skeleton_body_2eproto.base);
  centerofmass_ = nullptr;
}

Skeleton::~Skeleton() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Skeleton)
  SharedDtor();
}

void Skeleton::SharedDtor() {
  if (this != internal_default_instance()) delete centerofmass_;
}

void Skeleton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skeleton& Skeleton::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Skeleton_body_2eproto.base);
  return *internal_default_instance();
}


void Skeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Skeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joints_.Clear();
  if (GetArenaNoVirtual() == nullptr && centerofmass_ != nullptr) {
    delete centerofmass_;
  }
  centerofmass_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Skeleton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.network.messages.Joint joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 centerOfMass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_centerofmass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Skeleton::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Skeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.network.messages.Joint joints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_joints(i), target, stream);
  }

  // .pb.network.messages.vec3 centerOfMass = 2;
  if (this->has_centerofmass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::centerofmass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Skeleton)
  return target;
}

size_t Skeleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Skeleton)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.network.messages.Joint joints = 1;
  total_size += 1UL * this->_internal_joints_size();
  for (const auto& msg : this->joints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.network.messages.vec3 centerOfMass = 2;
  if (this->has_centerofmass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centerofmass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skeleton::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  const Skeleton* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Skeleton>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Skeleton)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Skeleton)
    MergeFrom(*source);
  }
}

void Skeleton::MergeFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joints_.MergeFrom(from.joints_);
  if (from.has_centerofmass()) {
    _internal_mutable_centerofmass()->::pb::network::messages::vec3::MergeFrom(from._internal_centerofmass());
  }
}

void Skeleton::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skeleton::CopyFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skeleton::IsInitialized() const {
  return true;
}

void Skeleton::InternalSwap(Skeleton* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  joints_.InternalSwap(&other->joints_);
  swap(centerofmass_, other->centerofmass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Skeleton::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawBody::InitAsDefaultInstance() {
  ::pb::network::messages::_RawBody_default_instance_._instance.get_mutable()->skeleton_ = const_cast< ::pb::network::messages::Skeleton*>(
      ::pb::network::messages::Skeleton::internal_default_instance());
}
class RawBody::_Internal {
 public:
  static const ::pb::network::messages::Skeleton& skeleton(const RawBody* msg);
};

const ::pb::network::messages::Skeleton&
RawBody::_Internal::skeleton(const RawBody* msg) {
  return *msg->skeleton_;
}
RawBody::RawBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.RawBody)
}
RawBody::RawBody(const RawBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceuid().empty()) {
    deviceuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceuid_);
  }
  if (from._internal_has_skeleton()) {
    skeleton_ = new ::pb::network::messages::Skeleton(*from.skeleton_);
  } else {
    skeleton_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.RawBody)
}

void RawBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawBody_body_2eproto.base);
  deviceuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&skeleton_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&skeleton_)) + sizeof(state_));
}

RawBody::~RawBody() {
  // @@protoc_insertion_point(destructor:pb.network.messages.RawBody)
  SharedDtor();
}

void RawBody::SharedDtor() {
  deviceuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete skeleton_;
}

void RawBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawBody& RawBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawBody_body_2eproto.base);
  return *internal_default_instance();
}


void RawBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && skeleton_ != nullptr) {
    delete skeleton_;
  }
  skeleton_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* RawBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.Skeleton skeleton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_skeleton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.RawBody.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pb::network::messages::RawBody_State>(val));
        } else goto handle_unusual;
        continue;
      // string deviceUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_deviceuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.RawBody.deviceUID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // .pb.network.messages.Skeleton skeleton = 2;
  if (this->has_skeleton()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::skeleton(this), target, stream);
  }

  // .pb.network.messages.RawBody.State state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // string deviceUID = 4;
  if (this->deviceuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceuid().data(), static_cast<int>(this->_internal_deviceuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.RawBody.deviceUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deviceuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.RawBody)
  return target;
}

size_t RawBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.RawBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceUID = 4;
  if (this->deviceuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceuid());
  }

  // .pb.network.messages.Skeleton skeleton = 2;
  if (this->has_skeleton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skeleton_);
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // .pb.network.messages.RawBody.State state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RawBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.RawBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.RawBody)
    MergeFrom(*source);
  }
}

void RawBody::MergeFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceuid().size() > 0) {

    deviceuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceuid_);
  }
  if (from.has_skeleton()) {
    _internal_mutable_skeleton()->::pb::network::messages::Skeleton::MergeFrom(from._internal_skeleton());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void RawBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBody::CopyFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBody::IsInitialized() const {
  return true;
}

void RawBody::InternalSwap(RawBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceuid_.Swap(&other->deviceuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(skeleton_, other->skeleton_);
  swap(uid_, other->uid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawBodies::InitAsDefaultInstance() {
}
class RawBodies::_Internal {
 public:
};

RawBodies::RawBodies()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.RawBodies)
}
RawBodies::RawBodies(const RawBodies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rawbodies_(from.rawbodies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.RawBodies)
}

void RawBodies::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawBodies_body_2eproto.base);
}

RawBodies::~RawBodies() {
  // @@protoc_insertion_point(destructor:pb.network.messages.RawBodies)
  SharedDtor();
}

void RawBodies::SharedDtor() {
}

void RawBodies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawBodies& RawBodies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawBodies_body_2eproto.base);
  return *internal_default_instance();
}


void RawBodies::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.RawBodies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rawbodies_.Clear();
  _internal_metadata_.Clear();
}

const char* RawBodies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.network.messages.RawBody rawBodies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rawbodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawBodies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.RawBodies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.network.messages.RawBody rawBodies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rawbodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rawbodies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.RawBodies)
  return target;
}

size_t RawBodies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.RawBodies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.network.messages.RawBody rawBodies = 1;
  total_size += 1UL * this->_internal_rawbodies_size();
  for (const auto& msg : this->rawbodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawBodies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.RawBodies)
  GOOGLE_DCHECK_NE(&from, this);
  const RawBodies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawBodies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.RawBodies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.RawBodies)
    MergeFrom(*source);
  }
}

void RawBodies::MergeFrom(const RawBodies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.RawBodies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rawbodies_.MergeFrom(from.rawbodies_);
}

void RawBodies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.RawBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBodies::CopyFrom(const RawBodies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.RawBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBodies::IsInitialized() const {
  return true;
}

void RawBodies::InternalSwap(RawBodies* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rawbodies_.InternalSwap(&other->rawbodies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawBodies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartialBody::InitAsDefaultInstance() {
  ::pb::network::messages::_PartialBody_default_instance_._instance.get_mutable()->skeleton_ = const_cast< ::pb::network::messages::Skeleton*>(
      ::pb::network::messages::Skeleton::internal_default_instance());
}
class PartialBody::_Internal {
 public:
  static const ::pb::network::messages::Skeleton& skeleton(const PartialBody* msg);
};

const ::pb::network::messages::Skeleton&
PartialBody::_Internal::skeleton(const PartialBody* msg) {
  return *msg->skeleton_;
}
PartialBody::PartialBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.PartialBody)
}
PartialBody::PartialBody(const PartialBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devicesuid_(from.devicesuid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from._internal_has_skeleton()) {
    skeleton_ = new ::pb::network::messages::Skeleton(*from.skeleton_);
  } else {
    skeleton_ = nullptr;
  }
  ::memcpy(&frame_, &from.frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(isvalid_));
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.PartialBody)
}

void PartialBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartialBody_body_2eproto.base);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&skeleton_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&skeleton_)) + sizeof(isvalid_));
}

PartialBody::~PartialBody() {
  // @@protoc_insertion_point(destructor:pb.network.messages.PartialBody)
  SharedDtor();
}

void PartialBody::SharedDtor() {
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete skeleton_;
}

void PartialBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialBody& PartialBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartialBody_body_2eproto.base);
  return *internal_default_instance();
}


void PartialBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.PartialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicesuid_.Clear();
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && skeleton_ != nullptr) {
    delete skeleton_;
  }
  skeleton_ = nullptr;
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(isvalid_));
  _internal_metadata_.Clear();
}

const char* PartialBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.PartialBody.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isValid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string devicesUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_devicesuid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.PartialBody.devicesUID"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.Skeleton skeleton = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_skeleton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartialBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.PartialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.PartialBody.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // uint32 frame = 2;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame(), target);
  }

  // bool isValid = 3;
  if (this->isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isvalid(), target);
  }

  // repeated string devicesUID = 5;
  for (int i = 0, n = this->_internal_devicesuid_size(); i < n; i++) {
    const auto& s = this->_internal_devicesuid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.PartialBody.devicesUID");
    target = stream->WriteString(5, s, target);
  }

  // .pb.network.messages.Skeleton skeleton = 10;
  if (this->has_skeleton()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::skeleton(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.PartialBody)
  return target;
}

size_t PartialBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.PartialBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string devicesUID = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(devicesuid_.size());
  for (int i = 0, n = devicesuid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      devicesuid_.Get(i));
  }

  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .pb.network.messages.Skeleton skeleton = 10;
  if (this->has_skeleton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skeleton_);
  }

  // uint32 frame = 2;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  // bool isValid = 3;
  if (this->isvalid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.PartialBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartialBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.PartialBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.PartialBody)
    MergeFrom(*source);
  }
}

void PartialBody::MergeFrom(const PartialBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.PartialBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devicesuid_.MergeFrom(from.devicesuid_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_skeleton()) {
    _internal_mutable_skeleton()->::pb::network::messages::Skeleton::MergeFrom(from._internal_skeleton());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
  if (from.isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
}

void PartialBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.PartialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialBody::CopyFrom(const PartialBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.PartialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialBody::IsInitialized() const {
  return true;
}

void PartialBody::InternalSwap(PartialBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devicesuid_.InternalSwap(&other->devicesuid_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(skeleton_, other->skeleton_);
  swap(frame_, other->frame_);
  swap(isvalid_, other->isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialBody::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace network
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::network::messages::Joint* Arena::CreateMaybeMessage< ::pb::network::messages::Joint >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::Joint >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::Skeleton* Arena::CreateMaybeMessage< ::pb::network::messages::Skeleton >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::Skeleton >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::RawBody* Arena::CreateMaybeMessage< ::pb::network::messages::RawBody >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::RawBody >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::RawBodies* Arena::CreateMaybeMessage< ::pb::network::messages::RawBodies >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::RawBodies >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::PartialBody* Arena::CreateMaybeMessage< ::pb::network::messages::PartialBody >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::PartialBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
