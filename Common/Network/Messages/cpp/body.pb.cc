// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "body.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace network {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* Joint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skeleton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skeleton_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBody_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RawBody_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RawBodies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBodies_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackedBodies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackedBodies_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_body_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_body_2eproto() {
  protobuf_AddDesc_body_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "body.proto");
  GOOGLE_CHECK(file != NULL);
  Joint_descriptor_ = file->message_type(0);
  static const int Joint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, orientationconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, position2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, positionconfidence_),
  };
  Joint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Joint_descriptor_,
      Joint::default_instance_,
      Joint_offsets_,
      -1,
      -1,
      -1,
      sizeof(Joint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _is_default_instance_));
  Skeleton_descriptor_ = file->message_type(1);
  static const int Skeleton_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skeleton, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skeleton, centerofmass_),
  };
  Skeleton_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Skeleton_descriptor_,
      Skeleton::default_instance_,
      Skeleton_offsets_,
      -1,
      -1,
      -1,
      sizeof(Skeleton),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skeleton, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skeleton, _is_default_instance_));
  RawBody_descriptor_ = file->message_type(2);
  static const int RawBody_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, skeleton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, deviceuid_),
  };
  RawBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBody_descriptor_,
      RawBody::default_instance_,
      RawBody_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBody, _is_default_instance_));
  RawBody_State_descriptor_ = RawBody_descriptor_->enum_type(0);
  RawBodies_descriptor_ = file->message_type(3);
  static const int RawBodies_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBodies, rawbodies_),
  };
  RawBodies_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBodies_descriptor_,
      RawBodies::default_instance_,
      RawBodies_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBodies),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBodies, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBodies, _is_default_instance_));
  Body_descriptor_ = file->message_type(4);
  static const int Body_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, skeletons_),
  };
  Body_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      -1,
      -1,
      -1,
      sizeof(Body),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _is_default_instance_));
  TrackedBodies_descriptor_ = file->message_type(5);
  static const int TrackedBodies_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedBodies, bodies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedBodies, calibrationvalues_),
  };
  TrackedBodies_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackedBodies_descriptor_,
      TrackedBodies::default_instance_,
      TrackedBodies_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackedBodies),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedBodies, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedBodies, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_body_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Joint_descriptor_, &Joint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Skeleton_descriptor_, &Skeleton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBody_descriptor_, &RawBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBodies_descriptor_, &RawBodies::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackedBodies_descriptor_, &TrackedBodies::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_body_2eproto() {
  delete Joint::default_instance_;
  delete Joint_reflection_;
  delete Skeleton::default_instance_;
  delete Skeleton_reflection_;
  delete RawBody::default_instance_;
  delete RawBody_reflection_;
  delete RawBodies::default_instance_;
  delete RawBodies_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete TrackedBodies::default_instance_;
  delete TrackedBodies_reflection_;
}

void protobuf_AddDesc_body_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_body_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::network::messages::protobuf_AddDesc_maths_2eproto();
  ::pb::network::messages::protobuf_AddDesc_layout_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbody.proto\022\023pb.network.messages\032\013maths"
    ".proto\032\014layout.proto\"\316\001\n\005Joint\022.\n\013orient"
    "ation\030\001 \001(\0132\031.pb.network.messages.vec3\022\035"
    "\n\025orientationConfidence\030\002 \001(\001\022+\n\010positio"
    "n\030\003 \001(\0132\031.pb.network.messages.vec3\022-\n\npo"
    "sition2D\030\004 \001(\0132\031.pb.network.messages.vec"
    "2\022\032\n\022positionConfidence\030\005 \001(\001\"g\n\010Skeleto"
    "n\022*\n\006joints\030\001 \003(\0132\032.pb.network.messages."
    "Joint\022/\n\014centerOfMass\030\002 \001(\0132\031.pb.network"
    ".messages.vec3\"\346\001\n\007RawBody\022\013\n\003uid\030\001 \001(\005\022"
    "/\n\010skeleton\030\002 \001(\0132\035.pb.network.messages."
    "Skeleton\0221\n\005state\030\003 \001(\0162\".pb.network.mes"
    "sages.RawBody.State\022\021\n\tdeviceUID\030\004 \001(\t\"W"
    "\n\005State\022\t\n\005error\020\000\022\016\n\nnoSkeleton\020\001\022\017\n\013ca"
    "librating\020\002\022\013\n\007tracked\020\003\022\013\n\007missing\020\004\022\010\n"
    "\004lost\020\005\"<\n\tRawBodies\022/\n\trawBodies\030\001 \003(\0132"
    "\034.pb.network.messages.RawBody\"e\n\004Body\022\013\n"
    "\003uid\030\001 \001(\t\022\017\n\007isValid\030\002 \001(\010\022\r\n\005frame\030\005 \001"
    "(\r\0220\n\tskeletons\030\n \003(\0132\035.pb.network.messa"
    "ges.Skeleton\"}\n\rTrackedBodies\022)\n\006bodies\030"
    "\n \003(\0132\031.pb.network.messages.Body\022A\n\021cali"
    "brationValues\030\024 \001(\0132&.pb.network.message"
    "s.CalibrationValuesb\006proto3", 907);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "body.proto", &protobuf_RegisterTypes);
  Joint::default_instance_ = new Joint();
  Skeleton::default_instance_ = new Skeleton();
  RawBody::default_instance_ = new RawBody();
  RawBodies::default_instance_ = new RawBodies();
  Body::default_instance_ = new Body();
  TrackedBodies::default_instance_ = new TrackedBodies();
  Joint::default_instance_->InitAsDefaultInstance();
  Skeleton::default_instance_->InitAsDefaultInstance();
  RawBody::default_instance_->InitAsDefaultInstance();
  RawBodies::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  TrackedBodies::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_body_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_body_2eproto {
  StaticDescriptorInitializer_body_2eproto() {
    protobuf_AddDesc_body_2eproto();
  }
} static_descriptor_initializer_body_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Joint::kOrientationFieldNumber;
const int Joint::kOrientationConfidenceFieldNumber;
const int Joint::kPositionFieldNumber;
const int Joint::kPosition2DFieldNumber;
const int Joint::kPositionConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Joint::Joint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Joint)
}

void Joint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  orientation_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  position_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  position2d_ = const_cast< ::pb::network::messages::vec2*>(&::pb::network::messages::vec2::default_instance());
}

Joint::Joint(const Joint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Joint)
}

void Joint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  orientation_ = NULL;
  orientationconfidence_ = 0;
  position_ = NULL;
  position2d_ = NULL;
  positionconfidence_ = 0;
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  if (this != default_instance_) {
    delete orientation_;
    delete position_;
    delete position2d_;
  }
}

void Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_descriptor_;
}

const Joint& Joint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

Joint* Joint::default_instance_ = NULL;

Joint* Joint::New(::google::protobuf::Arena* arena) const {
  Joint* n = new Joint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Joint)
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  orientationconfidence_ = 0;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && position2d_ != NULL) delete position2d_;
  position2d_ = NULL;
  positionconfidence_ = 0;
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Joint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.network.messages.vec3 orientation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_orientationConfidence;
        break;
      }

      // optional double orientationConfidence = 2;
      case 2: {
        if (tag == 17) {
         parse_orientationConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientationconfidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .pb.network.messages.vec3 position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position2D;
        break;
      }

      // optional .pb.network.messages.vec2 position2D = 4;
      case 4: {
        if (tag == 34) {
         parse_position2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_positionConfidence;
        break;
      }

      // optional double positionConfidence = 5;
      case 5: {
        if (tag == 41) {
         parse_positionConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionconfidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Joint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Joint)
  return false;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Joint)
  // optional .pb.network.messages.vec3 orientation = 1;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->orientation_, output);
  }

  // optional double orientationConfidence = 2;
  if (this->orientationconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->orientationconfidence(), output);
  }

  // optional .pb.network.messages.vec3 position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional .pb.network.messages.vec2 position2D = 4;
  if (this->has_position2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position2d_, output);
  }

  // optional double positionConfidence = 5;
  if (this->positionconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->positionconfidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Joint)
}

::google::protobuf::uint8* Joint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Joint)
  // optional .pb.network.messages.vec3 orientation = 1;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->orientation_, false, target);
  }

  // optional double orientationConfidence = 2;
  if (this->orientationconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->orientationconfidence(), target);
  }

  // optional .pb.network.messages.vec3 position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  // optional .pb.network.messages.vec2 position2D = 4;
  if (this->has_position2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->position2d_, false, target);
  }

  // optional double positionConfidence = 5;
  if (this->positionconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->positionconfidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Joint)
  return target;
}

int Joint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Joint)
  int total_size = 0;

  // optional .pb.network.messages.vec3 orientation = 1;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional double orientationConfidence = 2;
  if (this->orientationconfidence() != 0) {
    total_size += 1 + 8;
  }

  // optional .pb.network.messages.vec3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .pb.network.messages.vec2 position2D = 4;
  if (this->has_position2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position2d_);
  }

  // optional double positionConfidence = 5;
  if (this->positionconfidence() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Joint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Joint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Joint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Joint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Joint)
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Joint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_orientation()) {
    mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from.orientation());
  }
  if (from.orientationconfidence() != 0) {
    set_orientationconfidence(from.orientationconfidence());
  }
  if (from.has_position()) {
    mutable_position()->::pb::network::messages::vec3::MergeFrom(from.position());
  }
  if (from.has_position2d()) {
    mutable_position2d()->::pb::network::messages::vec2::MergeFrom(from.position2d());
  }
  if (from.positionconfidence() != 0) {
    set_positionconfidence(from.positionconfidence());
  }
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {

  return true;
}

void Joint::Swap(Joint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joint::InternalSwap(Joint* other) {
  std::swap(orientation_, other->orientation_);
  std::swap(orientationconfidence_, other->orientationconfidence_);
  std::swap(position_, other->position_);
  std::swap(position2d_, other->position2d_);
  std::swap(positionconfidence_, other->positionconfidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joint_descriptor_;
  metadata.reflection = Joint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joint

// optional .pb.network.messages.vec3 orientation = 1;
bool Joint::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void Joint::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::pb::network::messages::vec3& Joint::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::pb::network::messages::vec3* Joint::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.orientation)
  return orientation_;
}
::pb::network::messages::vec3* Joint::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Joint::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.orientation)
}

// optional double orientationConfidence = 2;
void Joint::clear_orientationconfidence() {
  orientationconfidence_ = 0;
}
 double Joint::orientationconfidence() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.orientationConfidence)
  return orientationconfidence_;
}
 void Joint::set_orientationconfidence(double value) {
  
  orientationconfidence_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Joint.orientationConfidence)
}

// optional .pb.network.messages.vec3 position = 3;
bool Joint::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Joint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::pb::network::messages::vec3& Joint::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::pb::network::messages::vec3* Joint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.position)
  return position_;
}
::pb::network::messages::vec3* Joint::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
void Joint::set_allocated_position(::pb::network::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.position)
}

// optional .pb.network.messages.vec2 position2D = 4;
bool Joint::has_position2d() const {
  return !_is_default_instance_ && position2d_ != NULL;
}
void Joint::clear_position2d() {
  if (GetArenaNoVirtual() == NULL && position2d_ != NULL) delete position2d_;
  position2d_ = NULL;
}
const ::pb::network::messages::vec2& Joint::position2d() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.position2D)
  return position2d_ != NULL ? *position2d_ : *default_instance_->position2d_;
}
::pb::network::messages::vec2* Joint::mutable_position2d() {
  
  if (position2d_ == NULL) {
    position2d_ = new ::pb::network::messages::vec2;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.position2D)
  return position2d_;
}
::pb::network::messages::vec2* Joint::release_position2d() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.position2D)
  
  ::pb::network::messages::vec2* temp = position2d_;
  position2d_ = NULL;
  return temp;
}
void Joint::set_allocated_position2d(::pb::network::messages::vec2* position2d) {
  delete position2d_;
  position2d_ = position2d;
  if (position2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.position2D)
}

// optional double positionConfidence = 5;
void Joint::clear_positionconfidence() {
  positionconfidence_ = 0;
}
 double Joint::positionconfidence() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.positionConfidence)
  return positionconfidence_;
}
 void Joint::set_positionconfidence(double value) {
  
  positionconfidence_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Joint.positionConfidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Skeleton::kJointsFieldNumber;
const int Skeleton::kCenterOfMassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Skeleton::Skeleton()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Skeleton)
}

void Skeleton::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  centerofmass_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
}

Skeleton::Skeleton(const Skeleton& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Skeleton)
}

void Skeleton::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  centerofmass_ = NULL;
}

Skeleton::~Skeleton() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Skeleton)
  SharedDtor();
}

void Skeleton::SharedDtor() {
  if (this != default_instance_) {
    delete centerofmass_;
  }
}

void Skeleton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skeleton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skeleton_descriptor_;
}

const Skeleton& Skeleton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

Skeleton* Skeleton::default_instance_ = NULL;

Skeleton* Skeleton::New(::google::protobuf::Arena* arena) const {
  Skeleton* n = new Skeleton;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Skeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Skeleton)
  if (GetArenaNoVirtual() == NULL && centerofmass_ != NULL) delete centerofmass_;
  centerofmass_ = NULL;
  joints_.Clear();
}

bool Skeleton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Skeleton)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.network.messages.Joint joints = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_joints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_joints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_centerOfMass;
        break;
      }

      // optional .pb.network.messages.vec3 centerOfMass = 2;
      case 2: {
        if (tag == 18) {
         parse_centerOfMass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerofmass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Skeleton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Skeleton)
  return false;
#undef DO_
}

void Skeleton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Skeleton)
  // repeated .pb.network.messages.Joint joints = 1;
  for (unsigned int i = 0, n = this->joints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->joints(i), output);
  }

  // optional .pb.network.messages.vec3 centerOfMass = 2;
  if (this->has_centerofmass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->centerofmass_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Skeleton)
}

::google::protobuf::uint8* Skeleton::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Skeleton)
  // repeated .pb.network.messages.Joint joints = 1;
  for (unsigned int i = 0, n = this->joints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->joints(i), false, target);
  }

  // optional .pb.network.messages.vec3 centerOfMass = 2;
  if (this->has_centerofmass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->centerofmass_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Skeleton)
  return target;
}

int Skeleton::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Skeleton)
  int total_size = 0;

  // optional .pb.network.messages.vec3 centerOfMass = 2;
  if (this->has_centerofmass()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->centerofmass_);
  }

  // repeated .pb.network.messages.Joint joints = 1;
  total_size += 1 * this->joints_size();
  for (int i = 0; i < this->joints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skeleton::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Skeleton)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Skeleton* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Skeleton>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Skeleton)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Skeleton)
    MergeFrom(*source);
  }
}

void Skeleton::MergeFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Skeleton)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  joints_.MergeFrom(from.joints_);
  if (from.has_centerofmass()) {
    mutable_centerofmass()->::pb::network::messages::vec3::MergeFrom(from.centerofmass());
  }
}

void Skeleton::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skeleton::CopyFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skeleton::IsInitialized() const {

  return true;
}

void Skeleton::Swap(Skeleton* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Skeleton::InternalSwap(Skeleton* other) {
  joints_.UnsafeArenaSwap(&other->joints_);
  std::swap(centerofmass_, other->centerofmass_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Skeleton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skeleton_descriptor_;
  metadata.reflection = Skeleton_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Skeleton

// repeated .pb.network.messages.Joint joints = 1;
int Skeleton::joints_size() const {
  return joints_.size();
}
void Skeleton::clear_joints() {
  joints_.Clear();
}
const ::pb::network::messages::Joint& Skeleton::joints(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Skeleton.joints)
  return joints_.Get(index);
}
::pb::network::messages::Joint* Skeleton::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Skeleton.joints)
  return joints_.Mutable(index);
}
::pb::network::messages::Joint* Skeleton::add_joints() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Skeleton.joints)
  return joints_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >*
Skeleton::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Skeleton.joints)
  return &joints_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >&
Skeleton::joints() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Skeleton.joints)
  return joints_;
}

// optional .pb.network.messages.vec3 centerOfMass = 2;
bool Skeleton::has_centerofmass() const {
  return !_is_default_instance_ && centerofmass_ != NULL;
}
void Skeleton::clear_centerofmass() {
  if (GetArenaNoVirtual() == NULL && centerofmass_ != NULL) delete centerofmass_;
  centerofmass_ = NULL;
}
const ::pb::network::messages::vec3& Skeleton::centerofmass() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Skeleton.centerOfMass)
  return centerofmass_ != NULL ? *centerofmass_ : *default_instance_->centerofmass_;
}
::pb::network::messages::vec3* Skeleton::mutable_centerofmass() {
  
  if (centerofmass_ == NULL) {
    centerofmass_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Skeleton.centerOfMass)
  return centerofmass_;
}
::pb::network::messages::vec3* Skeleton::release_centerofmass() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Skeleton.centerOfMass)
  
  ::pb::network::messages::vec3* temp = centerofmass_;
  centerofmass_ = NULL;
  return temp;
}
void Skeleton::set_allocated_centerofmass(::pb::network::messages::vec3* centerofmass) {
  delete centerofmass_;
  centerofmass_ = centerofmass;
  if (centerofmass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Skeleton.centerOfMass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RawBody_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBody_State_descriptor_;
}
bool RawBody_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RawBody_State RawBody::error;
const RawBody_State RawBody::noSkeleton;
const RawBody_State RawBody::calibrating;
const RawBody_State RawBody::tracked;
const RawBody_State RawBody::missing;
const RawBody_State RawBody::lost;
const RawBody_State RawBody::State_MIN;
const RawBody_State RawBody::State_MAX;
const int RawBody::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBody::kUidFieldNumber;
const int RawBody::kSkeletonFieldNumber;
const int RawBody::kStateFieldNumber;
const int RawBody::kDeviceUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBody::RawBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.RawBody)
}

void RawBody::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  skeleton_ = const_cast< ::pb::network::messages::Skeleton*>(&::pb::network::messages::Skeleton::default_instance());
}

RawBody::RawBody(const RawBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.RawBody)
}

void RawBody::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  skeleton_ = NULL;
  state_ = 0;
  deviceuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RawBody::~RawBody() {
  // @@protoc_insertion_point(destructor:pb.network.messages.RawBody)
  SharedDtor();
}

void RawBody::SharedDtor() {
  deviceuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete skeleton_;
  }
}

void RawBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBody_descriptor_;
}

const RawBody& RawBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

RawBody* RawBody::default_instance_ = NULL;

RawBody* RawBody::New(::google::protobuf::Arena* arena) const {
  RawBody* n = new RawBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBody::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.RawBody)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RawBody, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RawBody*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, state_);
  if (GetArenaNoVirtual() == NULL && skeleton_ != NULL) delete skeleton_;
  skeleton_ = NULL;
  deviceuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RawBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.RawBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skeleton;
        break;
      }

      // optional .pb.network.messages.Skeleton skeleton = 2;
      case 2: {
        if (tag == 18) {
         parse_skeleton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skeleton()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .pb.network.messages.RawBody.State state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::pb::network::messages::RawBody_State >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceUID;
        break;
      }

      // optional string deviceUID = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceuid().data(), this->deviceuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.RawBody.deviceUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.RawBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.RawBody)
  return false;
#undef DO_
}

void RawBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.RawBody)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional .pb.network.messages.Skeleton skeleton = 2;
  if (this->has_skeleton()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->skeleton_, output);
  }

  // optional .pb.network.messages.RawBody.State state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string deviceUID = 4;
  if (this->deviceuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceuid().data(), this->deviceuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.RawBody.deviceUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.RawBody)
}

::google::protobuf::uint8* RawBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.RawBody)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional .pb.network.messages.Skeleton skeleton = 2;
  if (this->has_skeleton()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->skeleton_, false, target);
  }

  // optional .pb.network.messages.RawBody.State state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional string deviceUID = 4;
  if (this->deviceuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceuid().data(), this->deviceuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.RawBody.deviceUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.RawBody)
  return target;
}

int RawBody::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.RawBody)
  int total_size = 0;

  // optional int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional .pb.network.messages.Skeleton skeleton = 2;
  if (this->has_skeleton()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->skeleton_);
  }

  // optional .pb.network.messages.RawBody.State state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional string deviceUID = 4;
  if (this->deviceuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.RawBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RawBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.RawBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.RawBody)
    MergeFrom(*source);
  }
}

void RawBody::MergeFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.RawBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.has_skeleton()) {
    mutable_skeleton()->::pb::network::messages::Skeleton::MergeFrom(from.skeleton());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.deviceuid().size() > 0) {

    deviceuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceuid_);
  }
}

void RawBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBody::CopyFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBody::IsInitialized() const {

  return true;
}

void RawBody::Swap(RawBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBody::InternalSwap(RawBody* other) {
  std::swap(uid_, other->uid_);
  std::swap(skeleton_, other->skeleton_);
  std::swap(state_, other->state_);
  deviceuid_.Swap(&other->deviceuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBody_descriptor_;
  metadata.reflection = RawBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBody

// optional int32 uid = 1;
void RawBody::clear_uid() {
  uid_ = 0;
}
 ::google::protobuf::int32 RawBody::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.uid)
  return uid_;
}
 void RawBody::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.uid)
}

// optional .pb.network.messages.Skeleton skeleton = 2;
bool RawBody::has_skeleton() const {
  return !_is_default_instance_ && skeleton_ != NULL;
}
void RawBody::clear_skeleton() {
  if (GetArenaNoVirtual() == NULL && skeleton_ != NULL) delete skeleton_;
  skeleton_ = NULL;
}
const ::pb::network::messages::Skeleton& RawBody::skeleton() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.skeleton)
  return skeleton_ != NULL ? *skeleton_ : *default_instance_->skeleton_;
}
::pb::network::messages::Skeleton* RawBody::mutable_skeleton() {
  
  if (skeleton_ == NULL) {
    skeleton_ = new ::pb::network::messages::Skeleton;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBody.skeleton)
  return skeleton_;
}
::pb::network::messages::Skeleton* RawBody::release_skeleton() {
  // @@protoc_insertion_point(field_release:pb.network.messages.RawBody.skeleton)
  
  ::pb::network::messages::Skeleton* temp = skeleton_;
  skeleton_ = NULL;
  return temp;
}
void RawBody::set_allocated_skeleton(::pb::network::messages::Skeleton* skeleton) {
  delete skeleton_;
  skeleton_ = skeleton;
  if (skeleton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.RawBody.skeleton)
}

// optional .pb.network.messages.RawBody.State state = 3;
void RawBody::clear_state() {
  state_ = 0;
}
 ::pb::network::messages::RawBody_State RawBody::state() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.state)
  return static_cast< ::pb::network::messages::RawBody_State >(state_);
}
 void RawBody::set_state(::pb::network::messages::RawBody_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.state)
}

// optional string deviceUID = 4;
void RawBody::clear_deviceuid() {
  deviceuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RawBody::deviceuid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.deviceUID)
  return deviceuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawBody::set_deviceuid(const ::std::string& value) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.deviceUID)
}
 void RawBody::set_deviceuid(const char* value) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.RawBody.deviceUID)
}
 void RawBody::set_deviceuid(const char* value, size_t size) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.RawBody.deviceUID)
}
 ::std::string* RawBody::mutable_deviceuid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBody.deviceUID)
  return deviceuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RawBody::release_deviceuid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.RawBody.deviceUID)
  
  return deviceuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawBody::set_allocated_deviceuid(::std::string* deviceuid) {
  if (deviceuid != NULL) {
    
  } else {
    
  }
  deviceuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceuid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.RawBody.deviceUID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBodies::kRawBodiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBodies::RawBodies()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.RawBodies)
}

void RawBodies::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RawBodies::RawBodies(const RawBodies& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.RawBodies)
}

void RawBodies::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RawBodies::~RawBodies() {
  // @@protoc_insertion_point(destructor:pb.network.messages.RawBodies)
  SharedDtor();
}

void RawBodies::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RawBodies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBodies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBodies_descriptor_;
}

const RawBodies& RawBodies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

RawBodies* RawBodies::default_instance_ = NULL;

RawBodies* RawBodies::New(::google::protobuf::Arena* arena) const {
  RawBodies* n = new RawBodies;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBodies::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.RawBodies)
  rawbodies_.Clear();
}

bool RawBodies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.RawBodies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.network.messages.RawBody rawBodies = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rawBodies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rawbodies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rawBodies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.RawBodies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.RawBodies)
  return false;
#undef DO_
}

void RawBodies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.RawBodies)
  // repeated .pb.network.messages.RawBody rawBodies = 1;
  for (unsigned int i = 0, n = this->rawbodies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rawbodies(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.RawBodies)
}

::google::protobuf::uint8* RawBodies::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.RawBodies)
  // repeated .pb.network.messages.RawBody rawBodies = 1;
  for (unsigned int i = 0, n = this->rawbodies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rawbodies(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.RawBodies)
  return target;
}

int RawBodies::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.RawBodies)
  int total_size = 0;

  // repeated .pb.network.messages.RawBody rawBodies = 1;
  total_size += 1 * this->rawbodies_size();
  for (int i = 0; i < this->rawbodies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rawbodies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBodies::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.RawBodies)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RawBodies* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBodies>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.RawBodies)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.RawBodies)
    MergeFrom(*source);
  }
}

void RawBodies::MergeFrom(const RawBodies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.RawBodies)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rawbodies_.MergeFrom(from.rawbodies_);
}

void RawBodies::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.RawBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBodies::CopyFrom(const RawBodies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.RawBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBodies::IsInitialized() const {

  return true;
}

void RawBodies::Swap(RawBodies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBodies::InternalSwap(RawBodies* other) {
  rawbodies_.UnsafeArenaSwap(&other->rawbodies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBodies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBodies_descriptor_;
  metadata.reflection = RawBodies_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBodies

// repeated .pb.network.messages.RawBody rawBodies = 1;
int RawBodies::rawbodies_size() const {
  return rawbodies_.size();
}
void RawBodies::clear_rawbodies() {
  rawbodies_.Clear();
}
const ::pb::network::messages::RawBody& RawBodies::rawbodies(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Get(index);
}
::pb::network::messages::RawBody* RawBodies::mutable_rawbodies(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Mutable(index);
}
::pb::network::messages::RawBody* RawBodies::add_rawbodies() {
  // @@protoc_insertion_point(field_add:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >*
RawBodies::mutable_rawbodies() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.RawBodies.rawBodies)
  return &rawbodies_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >&
RawBodies::rawbodies() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body::kUidFieldNumber;
const int Body::kIsValidFieldNumber;
const int Body::kFrameFieldNumber;
const int Body::kSkeletonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Body)
}

void Body::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Body::Body(const Body& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Body)
}

void Body::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isvalid_ = false;
  frame_ = 0u;
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New(::google::protobuf::Arena* arena) const {
  Body* n = new Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Body)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Body, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Body*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(isvalid_, frame_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  skeletons_.Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Body.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isValid;
        break;
      }

      // optional bool isValid = 2;
      case 2: {
        if (tag == 16) {
         parse_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 5;
      case 5: {
        if (tag == 40) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_skeletons;
        break;
      }

      // repeated .pb.network.messages.Skeleton skeletons = 10;
      case 10: {
        if (tag == 82) {
         parse_skeletons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_skeletons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_skeletons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_skeletons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Body)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Body.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional bool isValid = 2;
  if (this->isvalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isvalid(), output);
  }

  // optional uint32 frame = 5;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frame(), output);
  }

  // repeated .pb.network.messages.Skeleton skeletons = 10;
  for (unsigned int i = 0, n = this->skeletons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->skeletons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Body)
}

::google::protobuf::uint8* Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Body)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Body.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional bool isValid = 2;
  if (this->isvalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isvalid(), target);
  }

  // optional uint32 frame = 5;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frame(), target);
  }

  // repeated .pb.network.messages.Skeleton skeletons = 10;
  for (unsigned int i = 0, n = this->skeletons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->skeletons(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Body)
  return target;
}

int Body::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Body)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional bool isValid = 2;
  if (this->isvalid() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 frame = 5;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame());
  }

  // repeated .pb.network.messages.Skeleton skeletons = 10;
  total_size += 1 * this->skeletons_size();
  for (int i = 0; i < this->skeletons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Body* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  skeletons_.MergeFrom(from.skeletons_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.isvalid() != 0) {
    set_isvalid(from.isvalid());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  uid_.Swap(&other->uid_);
  std::swap(isvalid_, other->isvalid_);
  std::swap(frame_, other->frame_);
  skeletons_.UnsafeArenaSwap(&other->skeletons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body

// optional string uid = 1;
void Body::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Body::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Body::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.uid)
}
 void Body::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Body.uid)
}
 void Body::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Body.uid)
}
 ::std::string* Body::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Body.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Body::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Body.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Body::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Body.uid)
}

// optional bool isValid = 2;
void Body::clear_isvalid() {
  isvalid_ = false;
}
 bool Body::isvalid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.isValid)
  return isvalid_;
}
 void Body::set_isvalid(bool value) {
  
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.isValid)
}

// optional uint32 frame = 5;
void Body::clear_frame() {
  frame_ = 0u;
}
 ::google::protobuf::uint32 Body::frame() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.frame)
  return frame_;
}
 void Body::set_frame(::google::protobuf::uint32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.frame)
}

// repeated .pb.network.messages.Skeleton skeletons = 10;
int Body::skeletons_size() const {
  return skeletons_.size();
}
void Body::clear_skeletons() {
  skeletons_.Clear();
}
const ::pb::network::messages::Skeleton& Body::skeletons(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.skeletons)
  return skeletons_.Get(index);
}
::pb::network::messages::Skeleton* Body::mutable_skeletons(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Body.skeletons)
  return skeletons_.Mutable(index);
}
::pb::network::messages::Skeleton* Body::add_skeletons() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Body.skeletons)
  return skeletons_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >*
Body::mutable_skeletons() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Body.skeletons)
  return &skeletons_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >&
Body::skeletons() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Body.skeletons)
  return skeletons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedBodies::kBodiesFieldNumber;
const int TrackedBodies::kCalibrationValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedBodies::TrackedBodies()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.TrackedBodies)
}

void TrackedBodies::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  calibrationvalues_ = const_cast< ::pb::network::messages::CalibrationValues*>(&::pb::network::messages::CalibrationValues::default_instance());
}

TrackedBodies::TrackedBodies(const TrackedBodies& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.TrackedBodies)
}

void TrackedBodies::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  calibrationvalues_ = NULL;
}

TrackedBodies::~TrackedBodies() {
  // @@protoc_insertion_point(destructor:pb.network.messages.TrackedBodies)
  SharedDtor();
}

void TrackedBodies::SharedDtor() {
  if (this != default_instance_) {
    delete calibrationvalues_;
  }
}

void TrackedBodies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackedBodies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackedBodies_descriptor_;
}

const TrackedBodies& TrackedBodies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_body_2eproto();
  return *default_instance_;
}

TrackedBodies* TrackedBodies::default_instance_ = NULL;

TrackedBodies* TrackedBodies::New(::google::protobuf::Arena* arena) const {
  TrackedBodies* n = new TrackedBodies;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackedBodies::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.TrackedBodies)
  if (GetArenaNoVirtual() == NULL && calibrationvalues_ != NULL) delete calibrationvalues_;
  calibrationvalues_ = NULL;
  bodies_.Clear();
}

bool TrackedBodies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.TrackedBodies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.network.messages.Body bodies = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bodies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bodies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_bodies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_calibrationValues;
        break;
      }

      // optional .pb.network.messages.CalibrationValues calibrationValues = 20;
      case 20: {
        if (tag == 162) {
         parse_calibrationValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibrationvalues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.TrackedBodies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.TrackedBodies)
  return false;
#undef DO_
}

void TrackedBodies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.TrackedBodies)
  // repeated .pb.network.messages.Body bodies = 10;
  for (unsigned int i = 0, n = this->bodies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bodies(i), output);
  }

  // optional .pb.network.messages.CalibrationValues calibrationValues = 20;
  if (this->has_calibrationvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->calibrationvalues_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.TrackedBodies)
}

::google::protobuf::uint8* TrackedBodies::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.TrackedBodies)
  // repeated .pb.network.messages.Body bodies = 10;
  for (unsigned int i = 0, n = this->bodies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->bodies(i), false, target);
  }

  // optional .pb.network.messages.CalibrationValues calibrationValues = 20;
  if (this->has_calibrationvalues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->calibrationvalues_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.TrackedBodies)
  return target;
}

int TrackedBodies::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.TrackedBodies)
  int total_size = 0;

  // optional .pb.network.messages.CalibrationValues calibrationValues = 20;
  if (this->has_calibrationvalues()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->calibrationvalues_);
  }

  // repeated .pb.network.messages.Body bodies = 10;
  total_size += 1 * this->bodies_size();
  for (int i = 0; i < this->bodies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackedBodies::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.TrackedBodies)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackedBodies* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackedBodies>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.TrackedBodies)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.TrackedBodies)
    MergeFrom(*source);
  }
}

void TrackedBodies::MergeFrom(const TrackedBodies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.TrackedBodies)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bodies_.MergeFrom(from.bodies_);
  if (from.has_calibrationvalues()) {
    mutable_calibrationvalues()->::pb::network::messages::CalibrationValues::MergeFrom(from.calibrationvalues());
  }
}

void TrackedBodies::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.TrackedBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedBodies::CopyFrom(const TrackedBodies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.TrackedBodies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedBodies::IsInitialized() const {

  return true;
}

void TrackedBodies::Swap(TrackedBodies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedBodies::InternalSwap(TrackedBodies* other) {
  bodies_.UnsafeArenaSwap(&other->bodies_);
  std::swap(calibrationvalues_, other->calibrationvalues_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackedBodies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackedBodies_descriptor_;
  metadata.reflection = TrackedBodies_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackedBodies

// repeated .pb.network.messages.Body bodies = 10;
int TrackedBodies::bodies_size() const {
  return bodies_.size();
}
void TrackedBodies::clear_bodies() {
  bodies_.Clear();
}
const ::pb::network::messages::Body& TrackedBodies::bodies(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Get(index);
}
::pb::network::messages::Body* TrackedBodies::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Mutable(index);
}
::pb::network::messages::Body* TrackedBodies::add_bodies() {
  // @@protoc_insertion_point(field_add:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >*
TrackedBodies::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.TrackedBodies.bodies)
  return &bodies_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >&
TrackedBodies::bodies() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.TrackedBodies.bodies)
  return bodies_;
}

// optional .pb.network.messages.CalibrationValues calibrationValues = 20;
bool TrackedBodies::has_calibrationvalues() const {
  return !_is_default_instance_ && calibrationvalues_ != NULL;
}
void TrackedBodies::clear_calibrationvalues() {
  if (GetArenaNoVirtual() == NULL && calibrationvalues_ != NULL) delete calibrationvalues_;
  calibrationvalues_ = NULL;
}
const ::pb::network::messages::CalibrationValues& TrackedBodies::calibrationvalues() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.TrackedBodies.calibrationValues)
  return calibrationvalues_ != NULL ? *calibrationvalues_ : *default_instance_->calibrationvalues_;
}
::pb::network::messages::CalibrationValues* TrackedBodies::mutable_calibrationvalues() {
  
  if (calibrationvalues_ == NULL) {
    calibrationvalues_ = new ::pb::network::messages::CalibrationValues;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.TrackedBodies.calibrationValues)
  return calibrationvalues_;
}
::pb::network::messages::CalibrationValues* TrackedBodies::release_calibrationvalues() {
  // @@protoc_insertion_point(field_release:pb.network.messages.TrackedBodies.calibrationValues)
  
  ::pb::network::messages::CalibrationValues* temp = calibrationvalues_;
  calibrationvalues_ = NULL;
  return temp;
}
void TrackedBodies::set_allocated_calibrationvalues(::pb::network::messages::CalibrationValues* calibrationvalues) {
  delete calibrationvalues_;
  calibrationvalues_ = calibrationvalues;
  if (calibrationvalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.TrackedBodies.calibrationValues)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace network
}  // namespace pb

// @@protoc_insertion_point(global_scope)
