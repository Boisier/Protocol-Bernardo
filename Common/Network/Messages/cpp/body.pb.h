// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#ifndef PROTOBUF_body_2eproto__INCLUDED
#define PROTOBUF_body_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "maths.pb.h"
#include "layout.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {
namespace network {
namespace messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_body_2eproto();
void protobuf_AssignDesc_body_2eproto();
void protobuf_ShutdownFile_body_2eproto();

class Body;
class Joint;
class RawBodies;
class RawBody;
class Skeleton;
class TrackedBodies;

enum RawBody_State {
  RawBody_State_error = 0,
  RawBody_State_noSkeleton = 1,
  RawBody_State_calibrating = 2,
  RawBody_State_tracked = 3,
  RawBody_State_missing = 4,
  RawBody_State_lost = 5,
  RawBody_State_RawBody_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RawBody_State_RawBody_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RawBody_State_IsValid(int value);
const RawBody_State RawBody_State_State_MIN = RawBody_State_error;
const RawBody_State RawBody_State_State_MAX = RawBody_State_lost;
const int RawBody_State_State_ARRAYSIZE = RawBody_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* RawBody_State_descriptor();
inline const ::std::string& RawBody_State_Name(RawBody_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    RawBody_State_descriptor(), value);
}
inline bool RawBody_State_Parse(
    const ::std::string& name, RawBody_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RawBody_State>(
    RawBody_State_descriptor(), name, value);
}
// ===================================================================

class Joint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Joint) */ {
 public:
  Joint();
  virtual ~Joint();

  Joint(const Joint& from);

  inline Joint& operator=(const Joint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Joint& default_instance();

  void Swap(Joint* other);

  // implements Message ----------------------------------------------

  inline Joint* New() const { return New(NULL); }

  Joint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Joint& from);
  void MergeFrom(const Joint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Joint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.network.messages.vec3 orientation = 1;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  const ::pb::network::messages::vec3& orientation() const;
  ::pb::network::messages::vec3* mutable_orientation();
  ::pb::network::messages::vec3* release_orientation();
  void set_allocated_orientation(::pb::network::messages::vec3* orientation);

  // optional double orientationConfidence = 2;
  void clear_orientationconfidence();
  static const int kOrientationConfidenceFieldNumber = 2;
  double orientationconfidence() const;
  void set_orientationconfidence(double value);

  // optional .pb.network.messages.vec3 position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::pb::network::messages::vec3& position() const;
  ::pb::network::messages::vec3* mutable_position();
  ::pb::network::messages::vec3* release_position();
  void set_allocated_position(::pb::network::messages::vec3* position);

  // optional .pb.network.messages.vec2 position2D = 4;
  bool has_position2d() const;
  void clear_position2d();
  static const int kPosition2DFieldNumber = 4;
  const ::pb::network::messages::vec2& position2d() const;
  ::pb::network::messages::vec2* mutable_position2d();
  ::pb::network::messages::vec2* release_position2d();
  void set_allocated_position2d(::pb::network::messages::vec2* position2d);

  // optional double positionConfidence = 5;
  void clear_positionconfidence();
  static const int kPositionConfidenceFieldNumber = 5;
  double positionconfidence() const;
  void set_positionconfidence(double value);

  // @@protoc_insertion_point(class_scope:pb.network.messages.Joint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb::network::messages::vec3* orientation_;
  double orientationconfidence_;
  ::pb::network::messages::vec3* position_;
  ::pb::network::messages::vec2* position2d_;
  double positionconfidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static Joint* default_instance_;
};
// -------------------------------------------------------------------

class Skeleton : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Skeleton) */ {
 public:
  Skeleton();
  virtual ~Skeleton();

  Skeleton(const Skeleton& from);

  inline Skeleton& operator=(const Skeleton& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Skeleton& default_instance();

  void Swap(Skeleton* other);

  // implements Message ----------------------------------------------

  inline Skeleton* New() const { return New(NULL); }

  Skeleton* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Skeleton& from);
  void MergeFrom(const Skeleton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Skeleton* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.network.messages.Joint joints = 1;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  const ::pb::network::messages::Joint& joints(int index) const;
  ::pb::network::messages::Joint* mutable_joints(int index);
  ::pb::network::messages::Joint* add_joints();
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >*
      mutable_joints();
  const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >&
      joints() const;

  // optional .pb.network.messages.vec3 centerOfMass = 2;
  bool has_centerofmass() const;
  void clear_centerofmass();
  static const int kCenterOfMassFieldNumber = 2;
  const ::pb::network::messages::vec3& centerofmass() const;
  ::pb::network::messages::vec3* mutable_centerofmass();
  ::pb::network::messages::vec3* release_centerofmass();
  void set_allocated_centerofmass(::pb::network::messages::vec3* centerofmass);

  // @@protoc_insertion_point(class_scope:pb.network.messages.Skeleton)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint > joints_;
  ::pb::network::messages::vec3* centerofmass_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static Skeleton* default_instance_;
};
// -------------------------------------------------------------------

class RawBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.RawBody) */ {
 public:
  RawBody();
  virtual ~RawBody();

  RawBody(const RawBody& from);

  inline RawBody& operator=(const RawBody& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawBody& default_instance();

  void Swap(RawBody* other);

  // implements Message ----------------------------------------------

  inline RawBody* New() const { return New(NULL); }

  RawBody* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawBody& from);
  void MergeFrom(const RawBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RawBody_State State;
  static const State error =
    RawBody_State_error;
  static const State noSkeleton =
    RawBody_State_noSkeleton;
  static const State calibrating =
    RawBody_State_calibrating;
  static const State tracked =
    RawBody_State_tracked;
  static const State missing =
    RawBody_State_missing;
  static const State lost =
    RawBody_State_lost;
  static inline bool State_IsValid(int value) {
    return RawBody_State_IsValid(value);
  }
  static const State State_MIN =
    RawBody_State_State_MIN;
  static const State State_MAX =
    RawBody_State_State_MAX;
  static const int State_ARRAYSIZE =
    RawBody_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return RawBody_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return RawBody_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return RawBody_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional .pb.network.messages.Skeleton skeleton = 2;
  bool has_skeleton() const;
  void clear_skeleton();
  static const int kSkeletonFieldNumber = 2;
  const ::pb::network::messages::Skeleton& skeleton() const;
  ::pb::network::messages::Skeleton* mutable_skeleton();
  ::pb::network::messages::Skeleton* release_skeleton();
  void set_allocated_skeleton(::pb::network::messages::Skeleton* skeleton);

  // optional .pb.network.messages.RawBody.State state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::pb::network::messages::RawBody_State state() const;
  void set_state(::pb::network::messages::RawBody_State value);

  // optional string deviceUID = 4;
  void clear_deviceuid();
  static const int kDeviceUIDFieldNumber = 4;
  const ::std::string& deviceuid() const;
  void set_deviceuid(const ::std::string& value);
  void set_deviceuid(const char* value);
  void set_deviceuid(const char* value, size_t size);
  ::std::string* mutable_deviceuid();
  ::std::string* release_deviceuid();
  void set_allocated_deviceuid(::std::string* deviceuid);

  // @@protoc_insertion_point(class_scope:pb.network.messages.RawBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb::network::messages::Skeleton* skeleton_;
  ::google::protobuf::int32 uid_;
  int state_;
  ::google::protobuf::internal::ArenaStringPtr deviceuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static RawBody* default_instance_;
};
// -------------------------------------------------------------------

class RawBodies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.RawBodies) */ {
 public:
  RawBodies();
  virtual ~RawBodies();

  RawBodies(const RawBodies& from);

  inline RawBodies& operator=(const RawBodies& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawBodies& default_instance();

  void Swap(RawBodies* other);

  // implements Message ----------------------------------------------

  inline RawBodies* New() const { return New(NULL); }

  RawBodies* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawBodies& from);
  void MergeFrom(const RawBodies& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawBodies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.network.messages.RawBody rawBodies = 1;
  int rawbodies_size() const;
  void clear_rawbodies();
  static const int kRawBodiesFieldNumber = 1;
  const ::pb::network::messages::RawBody& rawbodies(int index) const;
  ::pb::network::messages::RawBody* mutable_rawbodies(int index);
  ::pb::network::messages::RawBody* add_rawbodies();
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >*
      mutable_rawbodies();
  const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >&
      rawbodies() const;

  // @@protoc_insertion_point(class_scope:pb.network.messages.RawBodies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody > rawbodies_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static RawBodies* default_instance_;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  inline Body* New() const { return New(NULL); }

  Body* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional bool isValid = 2;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 2;
  bool isvalid() const;
  void set_isvalid(bool value);

  // optional uint32 frame = 5;
  void clear_frame();
  static const int kFrameFieldNumber = 5;
  ::google::protobuf::uint32 frame() const;
  void set_frame(::google::protobuf::uint32 value);

  // repeated .pb.network.messages.Skeleton skeletons = 10;
  int skeletons_size() const;
  void clear_skeletons();
  static const int kSkeletonsFieldNumber = 10;
  const ::pb::network::messages::Skeleton& skeletons(int index) const;
  ::pb::network::messages::Skeleton* mutable_skeletons(int index);
  ::pb::network::messages::Skeleton* add_skeletons();
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >*
      mutable_skeletons();
  const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >&
      skeletons() const;

  // @@protoc_insertion_point(class_scope:pb.network.messages.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  bool isvalid_;
  ::google::protobuf::uint32 frame_;
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton > skeletons_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static Body* default_instance_;
};
// -------------------------------------------------------------------

class TrackedBodies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.TrackedBodies) */ {
 public:
  TrackedBodies();
  virtual ~TrackedBodies();

  TrackedBodies(const TrackedBodies& from);

  inline TrackedBodies& operator=(const TrackedBodies& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedBodies& default_instance();

  void Swap(TrackedBodies* other);

  // implements Message ----------------------------------------------

  inline TrackedBodies* New() const { return New(NULL); }

  TrackedBodies* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackedBodies& from);
  void MergeFrom(const TrackedBodies& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackedBodies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.network.messages.Body bodies = 10;
  int bodies_size() const;
  void clear_bodies();
  static const int kBodiesFieldNumber = 10;
  const ::pb::network::messages::Body& bodies(int index) const;
  ::pb::network::messages::Body* mutable_bodies(int index);
  ::pb::network::messages::Body* add_bodies();
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >*
      mutable_bodies();
  const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >&
      bodies() const;

  // optional .pb.network.messages.CalibrationValues calibrationValues = 20;
  bool has_calibrationvalues() const;
  void clear_calibrationvalues();
  static const int kCalibrationValuesFieldNumber = 20;
  const ::pb::network::messages::CalibrationValues& calibrationvalues() const;
  ::pb::network::messages::CalibrationValues* mutable_calibrationvalues();
  ::pb::network::messages::CalibrationValues* release_calibrationvalues();
  void set_allocated_calibrationvalues(::pb::network::messages::CalibrationValues* calibrationvalues);

  // @@protoc_insertion_point(class_scope:pb.network.messages.TrackedBodies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body > bodies_;
  ::pb::network::messages::CalibrationValues* calibrationvalues_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_body_2eproto();
  friend void protobuf_AssignDesc_body_2eproto();
  friend void protobuf_ShutdownFile_body_2eproto();

  void InitAsDefaultInstance();
  static TrackedBodies* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Joint

// optional .pb.network.messages.vec3 orientation = 1;
inline bool Joint::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
inline void Joint::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::pb::network::messages::vec3& Joint::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::pb::network::messages::vec3* Joint::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.orientation)
  return orientation_;
}
inline ::pb::network::messages::vec3* Joint::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Joint::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.orientation)
}

// optional double orientationConfidence = 2;
inline void Joint::clear_orientationconfidence() {
  orientationconfidence_ = 0;
}
inline double Joint::orientationconfidence() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.orientationConfidence)
  return orientationconfidence_;
}
inline void Joint::set_orientationconfidence(double value) {
  
  orientationconfidence_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Joint.orientationConfidence)
}

// optional .pb.network.messages.vec3 position = 3;
inline bool Joint::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Joint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::pb::network::messages::vec3& Joint::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::pb::network::messages::vec3* Joint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.position)
  return position_;
}
inline ::pb::network::messages::vec3* Joint::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Joint::set_allocated_position(::pb::network::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.position)
}

// optional .pb.network.messages.vec2 position2D = 4;
inline bool Joint::has_position2d() const {
  return !_is_default_instance_ && position2d_ != NULL;
}
inline void Joint::clear_position2d() {
  if (GetArenaNoVirtual() == NULL && position2d_ != NULL) delete position2d_;
  position2d_ = NULL;
}
inline const ::pb::network::messages::vec2& Joint::position2d() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.position2D)
  return position2d_ != NULL ? *position2d_ : *default_instance_->position2d_;
}
inline ::pb::network::messages::vec2* Joint::mutable_position2d() {
  
  if (position2d_ == NULL) {
    position2d_ = new ::pb::network::messages::vec2;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Joint.position2D)
  return position2d_;
}
inline ::pb::network::messages::vec2* Joint::release_position2d() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Joint.position2D)
  
  ::pb::network::messages::vec2* temp = position2d_;
  position2d_ = NULL;
  return temp;
}
inline void Joint::set_allocated_position2d(::pb::network::messages::vec2* position2d) {
  delete position2d_;
  position2d_ = position2d;
  if (position2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Joint.position2D)
}

// optional double positionConfidence = 5;
inline void Joint::clear_positionconfidence() {
  positionconfidence_ = 0;
}
inline double Joint::positionconfidence() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Joint.positionConfidence)
  return positionconfidence_;
}
inline void Joint::set_positionconfidence(double value) {
  
  positionconfidence_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Joint.positionConfidence)
}

// -------------------------------------------------------------------

// Skeleton

// repeated .pb.network.messages.Joint joints = 1;
inline int Skeleton::joints_size() const {
  return joints_.size();
}
inline void Skeleton::clear_joints() {
  joints_.Clear();
}
inline const ::pb::network::messages::Joint& Skeleton::joints(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Skeleton.joints)
  return joints_.Get(index);
}
inline ::pb::network::messages::Joint* Skeleton::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Skeleton.joints)
  return joints_.Mutable(index);
}
inline ::pb::network::messages::Joint* Skeleton::add_joints() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Skeleton.joints)
  return joints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >*
Skeleton::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Skeleton.joints)
  return &joints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Joint >&
Skeleton::joints() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Skeleton.joints)
  return joints_;
}

// optional .pb.network.messages.vec3 centerOfMass = 2;
inline bool Skeleton::has_centerofmass() const {
  return !_is_default_instance_ && centerofmass_ != NULL;
}
inline void Skeleton::clear_centerofmass() {
  if (GetArenaNoVirtual() == NULL && centerofmass_ != NULL) delete centerofmass_;
  centerofmass_ = NULL;
}
inline const ::pb::network::messages::vec3& Skeleton::centerofmass() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Skeleton.centerOfMass)
  return centerofmass_ != NULL ? *centerofmass_ : *default_instance_->centerofmass_;
}
inline ::pb::network::messages::vec3* Skeleton::mutable_centerofmass() {
  
  if (centerofmass_ == NULL) {
    centerofmass_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Skeleton.centerOfMass)
  return centerofmass_;
}
inline ::pb::network::messages::vec3* Skeleton::release_centerofmass() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Skeleton.centerOfMass)
  
  ::pb::network::messages::vec3* temp = centerofmass_;
  centerofmass_ = NULL;
  return temp;
}
inline void Skeleton::set_allocated_centerofmass(::pb::network::messages::vec3* centerofmass) {
  delete centerofmass_;
  centerofmass_ = centerofmass;
  if (centerofmass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Skeleton.centerOfMass)
}

// -------------------------------------------------------------------

// RawBody

// optional int32 uid = 1;
inline void RawBody::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 RawBody::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.uid)
  return uid_;
}
inline void RawBody::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.uid)
}

// optional .pb.network.messages.Skeleton skeleton = 2;
inline bool RawBody::has_skeleton() const {
  return !_is_default_instance_ && skeleton_ != NULL;
}
inline void RawBody::clear_skeleton() {
  if (GetArenaNoVirtual() == NULL && skeleton_ != NULL) delete skeleton_;
  skeleton_ = NULL;
}
inline const ::pb::network::messages::Skeleton& RawBody::skeleton() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.skeleton)
  return skeleton_ != NULL ? *skeleton_ : *default_instance_->skeleton_;
}
inline ::pb::network::messages::Skeleton* RawBody::mutable_skeleton() {
  
  if (skeleton_ == NULL) {
    skeleton_ = new ::pb::network::messages::Skeleton;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBody.skeleton)
  return skeleton_;
}
inline ::pb::network::messages::Skeleton* RawBody::release_skeleton() {
  // @@protoc_insertion_point(field_release:pb.network.messages.RawBody.skeleton)
  
  ::pb::network::messages::Skeleton* temp = skeleton_;
  skeleton_ = NULL;
  return temp;
}
inline void RawBody::set_allocated_skeleton(::pb::network::messages::Skeleton* skeleton) {
  delete skeleton_;
  skeleton_ = skeleton;
  if (skeleton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.RawBody.skeleton)
}

// optional .pb.network.messages.RawBody.State state = 3;
inline void RawBody::clear_state() {
  state_ = 0;
}
inline ::pb::network::messages::RawBody_State RawBody::state() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.state)
  return static_cast< ::pb::network::messages::RawBody_State >(state_);
}
inline void RawBody::set_state(::pb::network::messages::RawBody_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.state)
}

// optional string deviceUID = 4;
inline void RawBody::clear_deviceuid() {
  deviceuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawBody::deviceuid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBody.deviceUID)
  return deviceuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawBody::set_deviceuid(const ::std::string& value) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.RawBody.deviceUID)
}
inline void RawBody::set_deviceuid(const char* value) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.RawBody.deviceUID)
}
inline void RawBody::set_deviceuid(const char* value, size_t size) {
  
  deviceuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.RawBody.deviceUID)
}
inline ::std::string* RawBody::mutable_deviceuid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBody.deviceUID)
  return deviceuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawBody::release_deviceuid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.RawBody.deviceUID)
  
  return deviceuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawBody::set_allocated_deviceuid(::std::string* deviceuid) {
  if (deviceuid != NULL) {
    
  } else {
    
  }
  deviceuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceuid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.RawBody.deviceUID)
}

// -------------------------------------------------------------------

// RawBodies

// repeated .pb.network.messages.RawBody rawBodies = 1;
inline int RawBodies::rawbodies_size() const {
  return rawbodies_.size();
}
inline void RawBodies::clear_rawbodies() {
  rawbodies_.Clear();
}
inline const ::pb::network::messages::RawBody& RawBodies::rawbodies(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Get(index);
}
inline ::pb::network::messages::RawBody* RawBodies::mutable_rawbodies(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Mutable(index);
}
inline ::pb::network::messages::RawBody* RawBodies::add_rawbodies() {
  // @@protoc_insertion_point(field_add:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >*
RawBodies::mutable_rawbodies() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.RawBodies.rawBodies)
  return &rawbodies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::RawBody >&
RawBodies::rawbodies() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.RawBodies.rawBodies)
  return rawbodies_;
}

// -------------------------------------------------------------------

// Body

// optional string uid = 1;
inline void Body::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Body::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Body::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.uid)
}
inline void Body::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Body.uid)
}
inline void Body::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Body.uid)
}
inline ::std::string* Body::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Body.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Body::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Body.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Body::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Body.uid)
}

// optional bool isValid = 2;
inline void Body::clear_isvalid() {
  isvalid_ = false;
}
inline bool Body::isvalid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.isValid)
  return isvalid_;
}
inline void Body::set_isvalid(bool value) {
  
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.isValid)
}

// optional uint32 frame = 5;
inline void Body::clear_frame() {
  frame_ = 0u;
}
inline ::google::protobuf::uint32 Body::frame() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.frame)
  return frame_;
}
inline void Body::set_frame(::google::protobuf::uint32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Body.frame)
}

// repeated .pb.network.messages.Skeleton skeletons = 10;
inline int Body::skeletons_size() const {
  return skeletons_.size();
}
inline void Body::clear_skeletons() {
  skeletons_.Clear();
}
inline const ::pb::network::messages::Skeleton& Body::skeletons(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Body.skeletons)
  return skeletons_.Get(index);
}
inline ::pb::network::messages::Skeleton* Body::mutable_skeletons(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Body.skeletons)
  return skeletons_.Mutable(index);
}
inline ::pb::network::messages::Skeleton* Body::add_skeletons() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Body.skeletons)
  return skeletons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >*
Body::mutable_skeletons() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Body.skeletons)
  return &skeletons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Skeleton >&
Body::skeletons() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Body.skeletons)
  return skeletons_;
}

// -------------------------------------------------------------------

// TrackedBodies

// repeated .pb.network.messages.Body bodies = 10;
inline int TrackedBodies::bodies_size() const {
  return bodies_.size();
}
inline void TrackedBodies::clear_bodies() {
  bodies_.Clear();
}
inline const ::pb::network::messages::Body& TrackedBodies::bodies(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Get(index);
}
inline ::pb::network::messages::Body* TrackedBodies::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Mutable(index);
}
inline ::pb::network::messages::Body* TrackedBodies::add_bodies() {
  // @@protoc_insertion_point(field_add:pb.network.messages.TrackedBodies.bodies)
  return bodies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >*
TrackedBodies::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.TrackedBodies.bodies)
  return &bodies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Body >&
TrackedBodies::bodies() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.TrackedBodies.bodies)
  return bodies_;
}

// optional .pb.network.messages.CalibrationValues calibrationValues = 20;
inline bool TrackedBodies::has_calibrationvalues() const {
  return !_is_default_instance_ && calibrationvalues_ != NULL;
}
inline void TrackedBodies::clear_calibrationvalues() {
  if (GetArenaNoVirtual() == NULL && calibrationvalues_ != NULL) delete calibrationvalues_;
  calibrationvalues_ = NULL;
}
inline const ::pb::network::messages::CalibrationValues& TrackedBodies::calibrationvalues() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.TrackedBodies.calibrationValues)
  return calibrationvalues_ != NULL ? *calibrationvalues_ : *default_instance_->calibrationvalues_;
}
inline ::pb::network::messages::CalibrationValues* TrackedBodies::mutable_calibrationvalues() {
  
  if (calibrationvalues_ == NULL) {
    calibrationvalues_ = new ::pb::network::messages::CalibrationValues;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.TrackedBodies.calibrationValues)
  return calibrationvalues_;
}
inline ::pb::network::messages::CalibrationValues* TrackedBodies::release_calibrationvalues() {
  // @@protoc_insertion_point(field_release:pb.network.messages.TrackedBodies.calibrationValues)
  
  ::pb::network::messages::CalibrationValues* temp = calibrationvalues_;
  calibrationvalues_ = NULL;
  return temp;
}
inline void TrackedBodies::set_allocated_calibrationvalues(::pb::network::messages::CalibrationValues* calibrationvalues) {
  delete calibrationvalues_;
  calibrationvalues_ = calibrationvalues;
  if (calibrationvalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.TrackedBodies.calibrationValues)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace network
}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::network::messages::RawBody_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::network::messages::RawBody_State>() {
  return ::pb::network::messages::RawBody_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_body_2eproto__INCLUDED
