// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layout.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace network {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* LayoutList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayoutName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Screen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Screen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Layout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layout_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationDevices_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_layout_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_layout_2eproto() {
  protobuf_AddDesc_layout_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "layout.proto");
  GOOGLE_CHECK(file != NULL);
  LayoutList_descriptor_ = file->message_type(0);
  static const int LayoutList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutList, layoutname_),
  };
  LayoutList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayoutList_descriptor_,
      LayoutList::default_instance_,
      LayoutList_offsets_,
      -1,
      -1,
      -1,
      sizeof(LayoutList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutList, _is_default_instance_));
  LayoutName_descriptor_ = file->message_type(1);
  static const int LayoutName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutName, name_),
  };
  LayoutName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayoutName_descriptor_,
      LayoutName::default_instance_,
      LayoutName_offsets_,
      -1,
      -1,
      -1,
      sizeof(LayoutName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutName, _is_default_instance_));
  Device_descriptor_ = file->message_type(2);
  static const int Device_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, horizontalfov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, mindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, maxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, physicaluid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, positiondelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, orientationdelta_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _is_default_instance_));
  Screen_descriptor_ = file->message_type(3);
  static const int Screen_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, size_),
  };
  Screen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Screen_descriptor_,
      Screen::default_instance_,
      Screen_offsets_,
      -1,
      -1,
      -1,
      sizeof(Screen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _is_default_instance_));
  Layout_descriptor_ = file->message_type(4);
  static const int Layout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, screens_),
  };
  Layout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Layout_descriptor_,
      Layout::default_instance_,
      Layout_offsets_,
      -1,
      -1,
      -1,
      sizeof(Layout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, _is_default_instance_));
  CalibrationValues_descriptor_ = file->message_type(5);
  static const int CalibrationValues_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationValues, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationValues, position_),
  };
  CalibrationValues_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalibrationValues_descriptor_,
      CalibrationValues::default_instance_,
      CalibrationValues_offsets_,
      -1,
      -1,
      -1,
      sizeof(CalibrationValues),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationValues, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationValues, _is_default_instance_));
  CalibrationDevices_descriptor_ = file->message_type(6);
  static const int CalibrationDevices_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDevices, devicea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDevices, deviceb_),
  };
  CalibrationDevices_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalibrationDevices_descriptor_,
      CalibrationDevices::default_instance_,
      CalibrationDevices_offsets_,
      -1,
      -1,
      -1,
      sizeof(CalibrationDevices),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDevices, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationDevices, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_layout_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayoutList_descriptor_, &LayoutList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayoutName_descriptor_, &LayoutName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Screen_descriptor_, &Screen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Layout_descriptor_, &Layout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalibrationValues_descriptor_, &CalibrationValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalibrationDevices_descriptor_, &CalibrationDevices::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_layout_2eproto() {
  delete LayoutList::default_instance_;
  delete LayoutList_reflection_;
  delete LayoutName::default_instance_;
  delete LayoutName_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete Screen::default_instance_;
  delete Screen_reflection_;
  delete Layout::default_instance_;
  delete Layout_reflection_;
  delete CalibrationValues::default_instance_;
  delete CalibrationValues_reflection_;
  delete CalibrationDevices::default_instance_;
  delete CalibrationDevices_reflection_;
}

void protobuf_AddDesc_layout_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_layout_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::network::messages::protobuf_AddDesc_maths_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014layout.proto\022\023pb.network.messages\032\013mat"
    "hs.proto\" \n\nLayoutList\022\022\n\nlayoutName\030\n \003"
    "(\t\"\032\n\nLayoutName\022\014\n\004name\030\n \001(\t\"\275\002\n\006Devic"
    "e\022\014\n\004name\030\n \001(\t\022\013\n\003uid\030\024 \001(\t\022\025\n\rhorizont"
    "alFOV\030\036 \001(\001\022\023\n\013minDistance\030( \001(\001\022\023\n\013maxD"
    "istance\0302 \001(\001\022+\n\010position\030< \001(\0132\031.pb.net"
    "work.messages.vec3\022.\n\013orientation\030F \001(\0132"
    "\031.pb.network.messages.vec3\022\023\n\013physicalui"
    "d\030P \001(\t\0220\n\rpositionDelta\030Z \001(\0132\031.pb.netw"
    "ork.messages.vec3\0223\n\020orientationDelta\030d "
    "\001(\0132\031.pb.network.messages.vec3\"\251\001\n\006Scree"
    "n\022\014\n\004name\030\n \001(\t\022\013\n\003uid\030\024 \001(\t\022+\n\010position"
    "\030\036 \001(\0132\031.pb.network.messages.vec3\022.\n\013ori"
    "entation\030( \001(\0132\031.pb.network.messages.vec"
    "3\022\'\n\004size\0302 \001(\0132\031.pb.network.messages.ve"
    "c2\"r\n\006Layout\022\014\n\004name\030\n \001(\t\022,\n\007devices\030\024 "
    "\003(\0132\033.pb.network.messages.Device\022,\n\007scre"
    "ens\030\036 \003(\0132\033.pb.network.messages.Screen\"j"
    "\n\021CalibrationValues\022(\n\005angle\030\n \001(\0132\031.pb."
    "network.messages.vec3\022+\n\010position\030\024 \001(\0132"
    "\031.pb.network.messages.vec3\"6\n\022Calibratio"
    "nDevices\022\017\n\007deviceA\030\n \001(\t\022\017\n\007deviceB\030\024 \001"
    "(\tb\006proto3", 890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "layout.proto", &protobuf_RegisterTypes);
  LayoutList::default_instance_ = new LayoutList();
  LayoutName::default_instance_ = new LayoutName();
  Device::default_instance_ = new Device();
  Screen::default_instance_ = new Screen();
  Layout::default_instance_ = new Layout();
  CalibrationValues::default_instance_ = new CalibrationValues();
  CalibrationDevices::default_instance_ = new CalibrationDevices();
  LayoutList::default_instance_->InitAsDefaultInstance();
  LayoutName::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  Screen::default_instance_->InitAsDefaultInstance();
  Layout::default_instance_->InitAsDefaultInstance();
  CalibrationValues::default_instance_->InitAsDefaultInstance();
  CalibrationDevices::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layout_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layout_2eproto {
  StaticDescriptorInitializer_layout_2eproto() {
    protobuf_AddDesc_layout_2eproto();
  }
} static_descriptor_initializer_layout_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayoutList::kLayoutNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayoutList::LayoutList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.LayoutList)
}

void LayoutList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LayoutList::LayoutList(const LayoutList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.LayoutList)
}

void LayoutList::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

LayoutList::~LayoutList() {
  // @@protoc_insertion_point(destructor:pb.network.messages.LayoutList)
  SharedDtor();
}

void LayoutList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayoutList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutList_descriptor_;
}

const LayoutList& LayoutList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

LayoutList* LayoutList::default_instance_ = NULL;

LayoutList* LayoutList::New(::google::protobuf::Arena* arena) const {
  LayoutList* n = new LayoutList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayoutList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.LayoutList)
  layoutname_.Clear();
}

bool LayoutList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.LayoutList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string layoutName = 10;
      case 10: {
        if (tag == 82) {
         parse_layoutName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layoutname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->layoutname(this->layoutname_size() - 1).data(),
            this->layoutname(this->layoutname_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.LayoutList.layoutName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_layoutName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.LayoutList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.LayoutList)
  return false;
#undef DO_
}

void LayoutList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.LayoutList)
  // repeated string layoutName = 10;
  for (int i = 0; i < this->layoutname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layoutname(i).data(), this->layoutname(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutList.layoutName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->layoutname(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.LayoutList)
}

::google::protobuf::uint8* LayoutList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.LayoutList)
  // repeated string layoutName = 10;
  for (int i = 0; i < this->layoutname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layoutname(i).data(), this->layoutname(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutList.layoutName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->layoutname(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.LayoutList)
  return target;
}

int LayoutList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.LayoutList)
  int total_size = 0;

  // repeated string layoutName = 10;
  total_size += 1 * this->layoutname_size();
  for (int i = 0; i < this->layoutname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layoutname(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.LayoutList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LayoutList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayoutList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.LayoutList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.LayoutList)
    MergeFrom(*source);
  }
}

void LayoutList::MergeFrom(const LayoutList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.LayoutList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  layoutname_.MergeFrom(from.layoutname_);
}

void LayoutList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.LayoutList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutList::CopyFrom(const LayoutList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.LayoutList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutList::IsInitialized() const {

  return true;
}

void LayoutList::Swap(LayoutList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayoutList::InternalSwap(LayoutList* other) {
  layoutname_.UnsafeArenaSwap(&other->layoutname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayoutList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutList_descriptor_;
  metadata.reflection = LayoutList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayoutList

// repeated string layoutName = 10;
int LayoutList::layoutname_size() const {
  return layoutname_.size();
}
void LayoutList::clear_layoutname() {
  layoutname_.Clear();
}
 const ::std::string& LayoutList::layoutname(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.LayoutList.layoutName)
  return layoutname_.Get(index);
}
 ::std::string* LayoutList::mutable_layoutname(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.LayoutList.layoutName)
  return layoutname_.Mutable(index);
}
 void LayoutList::set_layoutname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.network.messages.LayoutList.layoutName)
  layoutname_.Mutable(index)->assign(value);
}
 void LayoutList::set_layoutname(int index, const char* value) {
  layoutname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.network.messages.LayoutList.layoutName)
}
 void LayoutList::set_layoutname(int index, const char* value, size_t size) {
  layoutname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.LayoutList.layoutName)
}
 ::std::string* LayoutList::add_layoutname() {
  // @@protoc_insertion_point(field_add_mutable:pb.network.messages.LayoutList.layoutName)
  return layoutname_.Add();
}
 void LayoutList::add_layoutname(const ::std::string& value) {
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.network.messages.LayoutList.layoutName)
}
 void LayoutList::add_layoutname(const char* value) {
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.network.messages.LayoutList.layoutName)
}
 void LayoutList::add_layoutname(const char* value, size_t size) {
  layoutname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.network.messages.LayoutList.layoutName)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayoutList::layoutname() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.LayoutList.layoutName)
  return layoutname_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LayoutList::mutable_layoutname() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.LayoutList.layoutName)
  return &layoutname_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayoutName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayoutName::LayoutName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.LayoutName)
}

void LayoutName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LayoutName::LayoutName(const LayoutName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.LayoutName)
}

void LayoutName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LayoutName::~LayoutName() {
  // @@protoc_insertion_point(destructor:pb.network.messages.LayoutName)
  SharedDtor();
}

void LayoutName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LayoutName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutName_descriptor_;
}

const LayoutName& LayoutName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

LayoutName* LayoutName::default_instance_ = NULL;

LayoutName* LayoutName::New(::google::protobuf::Arena* arena) const {
  LayoutName* n = new LayoutName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayoutName::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.LayoutName)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LayoutName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.LayoutName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.LayoutName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.LayoutName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.LayoutName)
  return false;
#undef DO_
}

void LayoutName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.LayoutName)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.LayoutName)
}

::google::protobuf::uint8* LayoutName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.LayoutName)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.LayoutName)
  return target;
}

int LayoutName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.LayoutName)
  int total_size = 0;

  // optional string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.LayoutName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LayoutName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayoutName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.LayoutName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.LayoutName)
    MergeFrom(*source);
  }
}

void LayoutName::MergeFrom(const LayoutName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.LayoutName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void LayoutName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.LayoutName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutName::CopyFrom(const LayoutName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.LayoutName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutName::IsInitialized() const {

  return true;
}

void LayoutName::Swap(LayoutName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayoutName::InternalSwap(LayoutName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayoutName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutName_descriptor_;
  metadata.reflection = LayoutName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayoutName

// optional string name = 10;
void LayoutName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LayoutName::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.LayoutName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayoutName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.LayoutName.name)
}
 void LayoutName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.LayoutName.name)
}
 void LayoutName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.LayoutName.name)
}
 ::std::string* LayoutName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.LayoutName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayoutName::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.LayoutName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayoutName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.LayoutName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kNameFieldNumber;
const int Device::kUidFieldNumber;
const int Device::kHorizontalFOVFieldNumber;
const int Device::kMinDistanceFieldNumber;
const int Device::kMaxDistanceFieldNumber;
const int Device::kPositionFieldNumber;
const int Device::kOrientationFieldNumber;
const int Device::kPhysicaluidFieldNumber;
const int Device::kPositionDeltaFieldNumber;
const int Device::kOrientationDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Device)
}

void Device::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  orientation_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  positiondelta_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  orientationdelta_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Device)
}

void Device::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horizontalfov_ = 0;
  mindistance_ = 0;
  maxdistance_ = 0;
  position_ = NULL;
  orientation_ = NULL;
  physicaluid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondelta_ = NULL;
  orientationdelta_ = NULL;
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physicaluid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
    delete positiondelta_;
    delete orientationdelta_;
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Device)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Device, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Device*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(horizontalfov_, maxdistance_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  physicaluid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && positiondelta_ != NULL) delete positiondelta_;
  positiondelta_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientationdelta_ != NULL) delete orientationdelta_;
  orientationdelta_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Device.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_uid;
        break;
      }

      // optional string uid = 20;
      case 20: {
        if (tag == 162) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Device.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_horizontalFOV;
        break;
      }

      // optional double horizontalFOV = 30;
      case 30: {
        if (tag == 241) {
         parse_horizontalFOV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontalfov_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_minDistance;
        break;
      }

      // optional double minDistance = 40;
      case 40: {
        if (tag == 321) {
         parse_minDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mindistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_maxDistance;
        break;
      }

      // optional double maxDistance = 50;
      case 50: {
        if (tag == 401) {
         parse_maxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxdistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_position;
        break;
      }

      // optional .pb.network.messages.vec3 position = 60;
      case 60: {
        if (tag == 482) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_orientation;
        break;
      }

      // optional .pb.network.messages.vec3 orientation = 70;
      case 70: {
        if (tag == 562) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_physicaluid;
        break;
      }

      // optional string physicaluid = 80;
      case 80: {
        if (tag == 642) {
         parse_physicaluid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physicaluid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physicaluid().data(), this->physicaluid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Device.physicaluid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_positionDelta;
        break;
      }

      // optional .pb.network.messages.vec3 positionDelta = 90;
      case 90: {
        if (tag == 722) {
         parse_positionDelta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiondelta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_orientationDelta;
        break;
      }

      // optional .pb.network.messages.vec3 orientationDelta = 100;
      case 100: {
        if (tag == 802) {
         parse_orientationDelta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientationdelta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Device)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->uid(), output);
  }

  // optional double horizontalFOV = 30;
  if (this->horizontalfov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->horizontalfov(), output);
  }

  // optional double minDistance = 40;
  if (this->mindistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->mindistance(), output);
  }

  // optional double maxDistance = 50;
  if (this->maxdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->maxdistance(), output);
  }

  // optional .pb.network.messages.vec3 position = 60;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->position_, output);
  }

  // optional .pb.network.messages.vec3 orientation = 70;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, *this->orientation_, output);
  }

  // optional string physicaluid = 80;
  if (this->physicaluid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physicaluid().data(), this->physicaluid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.physicaluid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->physicaluid(), output);
  }

  // optional .pb.network.messages.vec3 positionDelta = 90;
  if (this->has_positiondelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, *this->positiondelta_, output);
  }

  // optional .pb.network.messages.vec3 orientationDelta = 100;
  if (this->has_orientationdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->orientationdelta_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Device)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->uid(), target);
  }

  // optional double horizontalFOV = 30;
  if (this->horizontalfov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->horizontalfov(), target);
  }

  // optional double minDistance = 40;
  if (this->mindistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->mindistance(), target);
  }

  // optional double maxDistance = 50;
  if (this->maxdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->maxdistance(), target);
  }

  // optional .pb.network.messages.vec3 position = 60;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *this->position_, false, target);
  }

  // optional .pb.network.messages.vec3 orientation = 70;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        70, *this->orientation_, false, target);
  }

  // optional string physicaluid = 80;
  if (this->physicaluid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physicaluid().data(), this->physicaluid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.physicaluid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->physicaluid(), target);
  }

  // optional .pb.network.messages.vec3 positionDelta = 90;
  if (this->has_positiondelta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        90, *this->positiondelta_, false, target);
  }

  // optional .pb.network.messages.vec3 orientationDelta = 100;
  if (this->has_orientationdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->orientationdelta_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Device)
  return target;
}

int Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Device)
  int total_size = 0;

  // optional string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional double horizontalFOV = 30;
  if (this->horizontalfov() != 0) {
    total_size += 2 + 8;
  }

  // optional double minDistance = 40;
  if (this->mindistance() != 0) {
    total_size += 2 + 8;
  }

  // optional double maxDistance = 50;
  if (this->maxdistance() != 0) {
    total_size += 2 + 8;
  }

  // optional .pb.network.messages.vec3 position = 60;
  if (this->has_position()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .pb.network.messages.vec3 orientation = 70;
  if (this->has_orientation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional string physicaluid = 80;
  if (this->physicaluid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physicaluid());
  }

  // optional .pb.network.messages.vec3 positionDelta = 90;
  if (this->has_positiondelta()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->positiondelta_);
  }

  // optional .pb.network.messages.vec3 orientationDelta = 100;
  if (this->has_orientationdelta()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientationdelta_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.horizontalfov() != 0) {
    set_horizontalfov(from.horizontalfov());
  }
  if (from.mindistance() != 0) {
    set_mindistance(from.mindistance());
  }
  if (from.maxdistance() != 0) {
    set_maxdistance(from.maxdistance());
  }
  if (from.has_position()) {
    mutable_position()->::pb::network::messages::vec3::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from.orientation());
  }
  if (from.physicaluid().size() > 0) {

    physicaluid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physicaluid_);
  }
  if (from.has_positiondelta()) {
    mutable_positiondelta()->::pb::network::messages::vec3::MergeFrom(from.positiondelta());
  }
  if (from.has_orientationdelta()) {
    mutable_orientationdelta()->::pb::network::messages::vec3::MergeFrom(from.orientationdelta());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  name_.Swap(&other->name_);
  uid_.Swap(&other->uid_);
  std::swap(horizontalfov_, other->horizontalfov_);
  std::swap(mindistance_, other->mindistance_);
  std::swap(maxdistance_, other->maxdistance_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  physicaluid_.Swap(&other->physicaluid_);
  std::swap(positiondelta_, other->positiondelta_);
  std::swap(orientationdelta_, other->orientationdelta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional string name = 10;
void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.name)
}
 void Device::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.name)
}
 void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.name)
}
 ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.name)
}

// optional string uid = 20;
void Device::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.uid)
}
 void Device::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.uid)
}
 void Device::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.uid)
}
 ::std::string* Device::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.uid)
}

// optional double horizontalFOV = 30;
void Device::clear_horizontalfov() {
  horizontalfov_ = 0;
}
 double Device::horizontalfov() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.horizontalFOV)
  return horizontalfov_;
}
 void Device::set_horizontalfov(double value) {
  
  horizontalfov_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.horizontalFOV)
}

// optional double minDistance = 40;
void Device::clear_mindistance() {
  mindistance_ = 0;
}
 double Device::mindistance() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.minDistance)
  return mindistance_;
}
 void Device::set_mindistance(double value) {
  
  mindistance_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.minDistance)
}

// optional double maxDistance = 50;
void Device::clear_maxdistance() {
  maxdistance_ = 0;
}
 double Device::maxdistance() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.maxDistance)
  return maxdistance_;
}
 void Device::set_maxdistance(double value) {
  
  maxdistance_ = value;
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.maxDistance)
}

// optional .pb.network.messages.vec3 position = 60;
bool Device::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Device::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::pb::network::messages::vec3& Device::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::pb::network::messages::vec3* Device::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.position)
  return position_;
}
::pb::network::messages::vec3* Device::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
void Device::set_allocated_position(::pb::network::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.position)
}

// optional .pb.network.messages.vec3 orientation = 70;
bool Device::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void Device::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::pb::network::messages::vec3& Device::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::pb::network::messages::vec3* Device::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.orientation)
  return orientation_;
}
::pb::network::messages::vec3* Device::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Device::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.orientation)
}

// optional string physicaluid = 80;
void Device::clear_physicaluid() {
  physicaluid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::physicaluid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.physicaluid)
  return physicaluid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_physicaluid(const ::std::string& value) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.physicaluid)
}
 void Device::set_physicaluid(const char* value) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.physicaluid)
}
 void Device::set_physicaluid(const char* value, size_t size) {
  
  physicaluid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.physicaluid)
}
 ::std::string* Device::mutable_physicaluid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.physicaluid)
  return physicaluid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_physicaluid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.physicaluid)
  
  return physicaluid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_physicaluid(::std::string* physicaluid) {
  if (physicaluid != NULL) {
    
  } else {
    
  }
  physicaluid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physicaluid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.physicaluid)
}

// optional .pb.network.messages.vec3 positionDelta = 90;
bool Device::has_positiondelta() const {
  return !_is_default_instance_ && positiondelta_ != NULL;
}
void Device::clear_positiondelta() {
  if (GetArenaNoVirtual() == NULL && positiondelta_ != NULL) delete positiondelta_;
  positiondelta_ = NULL;
}
const ::pb::network::messages::vec3& Device::positiondelta() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.positionDelta)
  return positiondelta_ != NULL ? *positiondelta_ : *default_instance_->positiondelta_;
}
::pb::network::messages::vec3* Device::mutable_positiondelta() {
  
  if (positiondelta_ == NULL) {
    positiondelta_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.positionDelta)
  return positiondelta_;
}
::pb::network::messages::vec3* Device::release_positiondelta() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.positionDelta)
  
  ::pb::network::messages::vec3* temp = positiondelta_;
  positiondelta_ = NULL;
  return temp;
}
void Device::set_allocated_positiondelta(::pb::network::messages::vec3* positiondelta) {
  delete positiondelta_;
  positiondelta_ = positiondelta;
  if (positiondelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.positionDelta)
}

// optional .pb.network.messages.vec3 orientationDelta = 100;
bool Device::has_orientationdelta() const {
  return !_is_default_instance_ && orientationdelta_ != NULL;
}
void Device::clear_orientationdelta() {
  if (GetArenaNoVirtual() == NULL && orientationdelta_ != NULL) delete orientationdelta_;
  orientationdelta_ = NULL;
}
const ::pb::network::messages::vec3& Device::orientationdelta() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.orientationDelta)
  return orientationdelta_ != NULL ? *orientationdelta_ : *default_instance_->orientationdelta_;
}
::pb::network::messages::vec3* Device::mutable_orientationdelta() {
  
  if (orientationdelta_ == NULL) {
    orientationdelta_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.orientationDelta)
  return orientationdelta_;
}
::pb::network::messages::vec3* Device::release_orientationdelta() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.orientationDelta)
  
  ::pb::network::messages::vec3* temp = orientationdelta_;
  orientationdelta_ = NULL;
  return temp;
}
void Device::set_allocated_orientationdelta(::pb::network::messages::vec3* orientationdelta) {
  delete orientationdelta_;
  orientationdelta_ = orientationdelta;
  if (orientationdelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.orientationDelta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen::kNameFieldNumber;
const int Screen::kUidFieldNumber;
const int Screen::kPositionFieldNumber;
const int Screen::kOrientationFieldNumber;
const int Screen::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen::Screen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Screen)
}

void Screen::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  orientation_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  size_ = const_cast< ::pb::network::messages::vec2*>(&::pb::network::messages::vec2::default_instance());
}

Screen::Screen(const Screen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Screen)
}

void Screen::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  orientation_ = NULL;
  size_ = NULL;
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
    delete size_;
  }
}

void Screen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Screen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Screen_descriptor_;
}

const Screen& Screen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

Screen* Screen::default_instance_ = NULL;

Screen* Screen::New(::google::protobuf::Arena* arena) const {
  Screen* n = new Screen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Screen)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}

bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Screen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Screen.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_uid;
        break;
      }

      // optional string uid = 20;
      case 20: {
        if (tag == 162) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Screen.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_position;
        break;
      }

      // optional .pb.network.messages.vec3 position = 30;
      case 30: {
        if (tag == 242) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_orientation;
        break;
      }

      // optional .pb.network.messages.vec3 orientation = 40;
      case 40: {
        if (tag == 322) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_size;
        break;
      }

      // optional .pb.network.messages.vec2 size = 50;
      case 50: {
        if (tag == 402) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Screen)
  return false;
#undef DO_
}

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Screen)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->uid(), output);
  }

  // optional .pb.network.messages.vec3 position = 30;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->position_, output);
  }

  // optional .pb.network.messages.vec3 orientation = 40;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->orientation_, output);
  }

  // optional .pb.network.messages.vec2 size = 50;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->size_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Screen)
}

::google::protobuf::uint8* Screen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Screen)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->uid(), target);
  }

  // optional .pb.network.messages.vec3 position = 30;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->position_, false, target);
  }

  // optional .pb.network.messages.vec3 orientation = 40;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->orientation_, false, target);
  }

  // optional .pb.network.messages.vec2 size = 50;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->size_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Screen)
  return target;
}

int Screen::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Screen)
  int total_size = 0;

  // optional string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string uid = 20;
  if (this->uid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional .pb.network.messages.vec3 position = 30;
  if (this->has_position()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .pb.network.messages.vec3 orientation = 40;
  if (this->has_orientation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional .pb.network.messages.vec2 size = 50;
  if (this->has_size()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Screen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Screen)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Screen* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Screen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Screen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Screen)
    MergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Screen)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_position()) {
    mutable_position()->::pb::network::messages::vec3::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from.orientation());
  }
  if (from.has_size()) {
    mutable_size()->::pb::network::messages::vec2::MergeFrom(from.size());
  }
}

void Screen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {

  return true;
}

void Screen::Swap(Screen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen::InternalSwap(Screen* other) {
  name_.Swap(&other->name_);
  uid_.Swap(&other->uid_);
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Screen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Screen_descriptor_;
  metadata.reflection = Screen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Screen

// optional string name = 10;
void Screen::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Screen::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Screen::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Screen.name)
}
 void Screen::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Screen.name)
}
 void Screen::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Screen.name)
}
 ::std::string* Screen::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Screen::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Screen::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.name)
}

// optional string uid = 20;
void Screen::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Screen::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Screen::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Screen.uid)
}
 void Screen::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Screen.uid)
}
 void Screen::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Screen.uid)
}
 ::std::string* Screen::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Screen::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Screen::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.uid)
}

// optional .pb.network.messages.vec3 position = 30;
bool Screen::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Screen::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::pb::network::messages::vec3& Screen::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::pb::network::messages::vec3* Screen::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.position)
  return position_;
}
::pb::network::messages::vec3* Screen::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
void Screen::set_allocated_position(::pb::network::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.position)
}

// optional .pb.network.messages.vec3 orientation = 40;
bool Screen::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void Screen::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::pb::network::messages::vec3& Screen::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::pb::network::messages::vec3* Screen::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.orientation)
  return orientation_;
}
::pb::network::messages::vec3* Screen::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Screen::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.orientation)
}

// optional .pb.network.messages.vec2 size = 50;
bool Screen::has_size() const {
  return !_is_default_instance_ && size_ != NULL;
}
void Screen::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
const ::pb::network::messages::vec2& Screen::size() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
::pb::network::messages::vec2* Screen::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::pb::network::messages::vec2;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.size)
  return size_;
}
::pb::network::messages::vec2* Screen::release_size() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.size)
  
  ::pb::network::messages::vec2* temp = size_;
  size_ = NULL;
  return temp;
}
void Screen::set_allocated_size(::pb::network::messages::vec2* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layout::kNameFieldNumber;
const int Layout::kDevicesFieldNumber;
const int Layout::kScreensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layout::Layout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Layout)
}

void Layout::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Layout::Layout(const Layout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Layout)
}

void Layout::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Layout)
  SharedDtor();
}

void Layout::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Layout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layout_descriptor_;
}

const Layout& Layout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

Layout* Layout::default_instance_ = NULL;

Layout* Layout::New(::google::protobuf::Arena* arena) const {
  Layout* n = new Layout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Layout)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devices_.Clear();
  screens_.Clear();
}

bool Layout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.Layout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.Layout.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_devices;
        break;
      }

      // repeated .pb.network.messages.Device devices = 20;
      case 20: {
        if (tag == 162) {
         parse_devices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_devices;
        if (input->ExpectTag(242)) goto parse_loop_screens;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb.network.messages.Screen screens = 30;
      case 30: {
        if (tag == 242) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_screens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_screens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_screens;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.Layout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.Layout)
  return false;
#undef DO_
}

void Layout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.Layout)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Layout.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // repeated .pb.network.messages.Device devices = 20;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->devices(i), output);
  }

  // repeated .pb.network.messages.Screen screens = 30;
  for (unsigned int i = 0, n = this->screens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->screens(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.Layout)
}

::google::protobuf::uint8* Layout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Layout)
  // optional string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Layout.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // repeated .pb.network.messages.Device devices = 20;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->devices(i), false, target);
  }

  // repeated .pb.network.messages.Screen screens = 30;
  for (unsigned int i = 0, n = this->screens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->screens(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Layout)
  return target;
}

int Layout::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Layout)
  int total_size = 0;

  // optional string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .pb.network.messages.Device devices = 20;
  total_size += 2 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  // repeated .pb.network.messages.Screen screens = 30;
  total_size += 2 * this->screens_size();
  for (int i = 0; i < this->screens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screens(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Layout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Layout* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Layout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Layout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Layout)
    MergeFrom(*source);
  }
}

void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Layout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  devices_.MergeFrom(from.devices_);
  screens_.MergeFrom(from.screens_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Layout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {

  return true;
}

void Layout::Swap(Layout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layout::InternalSwap(Layout* other) {
  name_.Swap(&other->name_);
  devices_.UnsafeArenaSwap(&other->devices_);
  screens_.UnsafeArenaSwap(&other->screens_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layout_descriptor_;
  metadata.reflection = Layout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layout

// optional string name = 10;
void Layout::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Layout::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Layout::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Layout.name)
}
 void Layout::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Layout.name)
}
 void Layout::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Layout.name)
}
 ::std::string* Layout::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Layout::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Layout.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Layout::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Layout.name)
}

// repeated .pb.network.messages.Device devices = 20;
int Layout::devices_size() const {
  return devices_.size();
}
void Layout::clear_devices() {
  devices_.Clear();
}
const ::pb::network::messages::Device& Layout::devices(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.devices)
  return devices_.Get(index);
}
::pb::network::messages::Device* Layout::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.devices)
  return devices_.Mutable(index);
}
::pb::network::messages::Device* Layout::add_devices() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Layout.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::Device >*
Layout::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Layout.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Device >&
Layout::devices() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Layout.devices)
  return devices_;
}

// repeated .pb.network.messages.Screen screens = 30;
int Layout::screens_size() const {
  return screens_.size();
}
void Layout::clear_screens() {
  screens_.Clear();
}
const ::pb::network::messages::Screen& Layout::screens(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.screens)
  return screens_.Get(index);
}
::pb::network::messages::Screen* Layout::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.screens)
  return screens_.Mutable(index);
}
::pb::network::messages::Screen* Layout::add_screens() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Layout.screens)
  return screens_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::network::messages::Screen >*
Layout::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Layout.screens)
  return &screens_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::network::messages::Screen >&
Layout::screens() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Layout.screens)
  return screens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationValues::kAngleFieldNumber;
const int CalibrationValues::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationValues::CalibrationValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.CalibrationValues)
}

void CalibrationValues::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  angle_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
  position_ = const_cast< ::pb::network::messages::vec3*>(&::pb::network::messages::vec3::default_instance());
}

CalibrationValues::CalibrationValues(const CalibrationValues& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.CalibrationValues)
}

void CalibrationValues::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  angle_ = NULL;
  position_ = NULL;
}

CalibrationValues::~CalibrationValues() {
  // @@protoc_insertion_point(destructor:pb.network.messages.CalibrationValues)
  SharedDtor();
}

void CalibrationValues::SharedDtor() {
  if (this != default_instance_) {
    delete angle_;
    delete position_;
  }
}

void CalibrationValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationValues_descriptor_;
}

const CalibrationValues& CalibrationValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

CalibrationValues* CalibrationValues::default_instance_ = NULL;

CalibrationValues* CalibrationValues::New(::google::protobuf::Arena* arena) const {
  CalibrationValues* n = new CalibrationValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationValues::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.CalibrationValues)
  if (GetArenaNoVirtual() == NULL && angle_ != NULL) delete angle_;
  angle_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}

bool CalibrationValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.CalibrationValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.network.messages.vec3 angle = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_position;
        break;
      }

      // optional .pb.network.messages.vec3 position = 20;
      case 20: {
        if (tag == 162) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.CalibrationValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.CalibrationValues)
  return false;
#undef DO_
}

void CalibrationValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.CalibrationValues)
  // optional .pb.network.messages.vec3 angle = 10;
  if (this->has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->angle_, output);
  }

  // optional .pb.network.messages.vec3 position = 20;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->position_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.CalibrationValues)
}

::google::protobuf::uint8* CalibrationValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.CalibrationValues)
  // optional .pb.network.messages.vec3 angle = 10;
  if (this->has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->angle_, false, target);
  }

  // optional .pb.network.messages.vec3 position = 20;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->position_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.CalibrationValues)
  return target;
}

int CalibrationValues::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.CalibrationValues)
  int total_size = 0;

  // optional .pb.network.messages.vec3 angle = 10;
  if (this->has_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angle_);
  }

  // optional .pb.network.messages.vec3 position = 20;
  if (this->has_position()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.CalibrationValues)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalibrationValues* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.CalibrationValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.CalibrationValues)
    MergeFrom(*source);
  }
}

void CalibrationValues::MergeFrom(const CalibrationValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.CalibrationValues)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_angle()) {
    mutable_angle()->::pb::network::messages::vec3::MergeFrom(from.angle());
  }
  if (from.has_position()) {
    mutable_position()->::pb::network::messages::vec3::MergeFrom(from.position());
  }
}

void CalibrationValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.CalibrationValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationValues::CopyFrom(const CalibrationValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.CalibrationValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationValues::IsInitialized() const {

  return true;
}

void CalibrationValues::Swap(CalibrationValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationValues::InternalSwap(CalibrationValues* other) {
  std::swap(angle_, other->angle_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationValues_descriptor_;
  metadata.reflection = CalibrationValues_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationValues

// optional .pb.network.messages.vec3 angle = 10;
bool CalibrationValues::has_angle() const {
  return !_is_default_instance_ && angle_ != NULL;
}
void CalibrationValues::clear_angle() {
  if (GetArenaNoVirtual() == NULL && angle_ != NULL) delete angle_;
  angle_ = NULL;
}
const ::pb::network::messages::vec3& CalibrationValues::angle() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationValues.angle)
  return angle_ != NULL ? *angle_ : *default_instance_->angle_;
}
::pb::network::messages::vec3* CalibrationValues::mutable_angle() {
  
  if (angle_ == NULL) {
    angle_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationValues.angle)
  return angle_;
}
::pb::network::messages::vec3* CalibrationValues::release_angle() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationValues.angle)
  
  ::pb::network::messages::vec3* temp = angle_;
  angle_ = NULL;
  return temp;
}
void CalibrationValues::set_allocated_angle(::pb::network::messages::vec3* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationValues.angle)
}

// optional .pb.network.messages.vec3 position = 20;
bool CalibrationValues::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void CalibrationValues::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::pb::network::messages::vec3& CalibrationValues::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationValues.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::pb::network::messages::vec3* CalibrationValues::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::pb::network::messages::vec3;
  }
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationValues.position)
  return position_;
}
::pb::network::messages::vec3* CalibrationValues::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationValues.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = NULL;
  return temp;
}
void CalibrationValues::set_allocated_position(::pb::network::messages::vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationValues.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationDevices::kDeviceAFieldNumber;
const int CalibrationDevices::kDeviceBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationDevices::CalibrationDevices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.CalibrationDevices)
}

void CalibrationDevices::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CalibrationDevices::CalibrationDevices(const CalibrationDevices& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.CalibrationDevices)
}

void CalibrationDevices::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicea_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CalibrationDevices::~CalibrationDevices() {
  // @@protoc_insertion_point(destructor:pb.network.messages.CalibrationDevices)
  SharedDtor();
}

void CalibrationDevices::SharedDtor() {
  devicea_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalibrationDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationDevices_descriptor_;
}

const CalibrationDevices& CalibrationDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layout_2eproto();
  return *default_instance_;
}

CalibrationDevices* CalibrationDevices::default_instance_ = NULL;

CalibrationDevices* CalibrationDevices::New(::google::protobuf::Arena* arena) const {
  CalibrationDevices* n = new CalibrationDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.CalibrationDevices)
  devicea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CalibrationDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.network.messages.CalibrationDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceA = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicea()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicea().data(), this->devicea().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.CalibrationDevices.deviceA"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_deviceB;
        break;
      }

      // optional string deviceB = 20;
      case 20: {
        if (tag == 162) {
         parse_deviceB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceb()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceb().data(), this->deviceb().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.network.messages.CalibrationDevices.deviceB"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.network.messages.CalibrationDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.network.messages.CalibrationDevices)
  return false;
#undef DO_
}

void CalibrationDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.network.messages.CalibrationDevices)
  // optional string deviceA = 10;
  if (this->devicea().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicea().data(), this->devicea().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceA");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->devicea(), output);
  }

  // optional string deviceB = 20;
  if (this->deviceb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceb().data(), this->deviceb().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceB");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->deviceb(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.network.messages.CalibrationDevices)
}

::google::protobuf::uint8* CalibrationDevices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.CalibrationDevices)
  // optional string deviceA = 10;
  if (this->devicea().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicea().data(), this->devicea().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceA");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->devicea(), target);
  }

  // optional string deviceB = 20;
  if (this->deviceb().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceb().data(), this->deviceb().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceB");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->deviceb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.CalibrationDevices)
  return target;
}

int CalibrationDevices::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.CalibrationDevices)
  int total_size = 0;

  // optional string deviceA = 10;
  if (this->devicea().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicea());
  }

  // optional string deviceB = 20;
  if (this->deviceb().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceb());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationDevices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.CalibrationDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalibrationDevices* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationDevices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.CalibrationDevices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.CalibrationDevices)
    MergeFrom(*source);
  }
}

void CalibrationDevices::MergeFrom(const CalibrationDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.CalibrationDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicea().size() > 0) {

    devicea_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicea_);
  }
  if (from.deviceb().size() > 0) {

    deviceb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceb_);
  }
}

void CalibrationDevices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.CalibrationDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationDevices::CopyFrom(const CalibrationDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.CalibrationDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationDevices::IsInitialized() const {

  return true;
}

void CalibrationDevices::Swap(CalibrationDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationDevices::InternalSwap(CalibrationDevices* other) {
  devicea_.Swap(&other->devicea_);
  deviceb_.Swap(&other->deviceb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationDevices_descriptor_;
  metadata.reflection = CalibrationDevices_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationDevices

// optional string deviceA = 10;
void CalibrationDevices::clear_devicea() {
  devicea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CalibrationDevices::devicea() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationDevices.deviceA)
  return devicea_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalibrationDevices::set_devicea(const ::std::string& value) {
  
  devicea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.CalibrationDevices.deviceA)
}
 void CalibrationDevices::set_devicea(const char* value) {
  
  devicea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.CalibrationDevices.deviceA)
}
 void CalibrationDevices::set_devicea(const char* value, size_t size) {
  
  devicea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.CalibrationDevices.deviceA)
}
 ::std::string* CalibrationDevices::mutable_devicea() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationDevices.deviceA)
  return devicea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalibrationDevices::release_devicea() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationDevices.deviceA)
  
  return devicea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalibrationDevices::set_allocated_devicea(::std::string* devicea) {
  if (devicea != NULL) {
    
  } else {
    
  }
  devicea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicea);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationDevices.deviceA)
}

// optional string deviceB = 20;
void CalibrationDevices::clear_deviceb() {
  deviceb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CalibrationDevices::deviceb() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationDevices.deviceB)
  return deviceb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalibrationDevices::set_deviceb(const ::std::string& value) {
  
  deviceb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.network.messages.CalibrationDevices.deviceB)
}
 void CalibrationDevices::set_deviceb(const char* value) {
  
  deviceb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.CalibrationDevices.deviceB)
}
 void CalibrationDevices::set_deviceb(const char* value, size_t size) {
  
  deviceb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.CalibrationDevices.deviceB)
}
 ::std::string* CalibrationDevices::mutable_deviceb() {
  
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationDevices.deviceB)
  return deviceb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalibrationDevices::release_deviceb() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationDevices.deviceB)
  
  return deviceb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalibrationDevices::set_allocated_deviceb(::std::string* deviceb) {
  if (deviceb != NULL) {
    
  } else {
    
  }
  deviceb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceb);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationDevices.deviceB)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace network
}  // namespace pb

// @@protoc_insertion_point(global_scope)
