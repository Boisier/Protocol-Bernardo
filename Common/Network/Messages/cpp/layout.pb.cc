// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout.proto

#include "layout.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_layout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Device_layout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_layout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Screen_layout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_maths_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec2_maths_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_maths_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec3_maths_2eproto;
namespace pb {
namespace network {
namespace messages {
class LayoutListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayoutList> _instance;
} _LayoutList_default_instance_;
class LayoutNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayoutName> _instance;
} _LayoutName_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class ScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Screen> _instance;
} _Screen_default_instance_;
class LayoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layout> _instance;
} _Layout_default_instance_;
class CalibrationValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationValues> _instance;
} _CalibrationValues_default_instance_;
class CalibrationDevicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationDevices> _instance;
} _CalibrationDevices_default_instance_;
}  // namespace messages
}  // namespace network
}  // namespace pb
static void InitDefaultsscc_info_CalibrationDevices_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_CalibrationDevices_default_instance_;
    new (ptr) ::pb::network::messages::CalibrationDevices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::CalibrationDevices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalibrationDevices_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CalibrationDevices_layout_2eproto}, {}};

static void InitDefaultsscc_info_CalibrationValues_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_CalibrationValues_default_instance_;
    new (ptr) ::pb::network::messages::CalibrationValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::CalibrationValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationValues_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CalibrationValues_layout_2eproto}, {
      &scc_info_vec3_maths_2eproto.base,}};

static void InitDefaultsscc_info_Device_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_Device_default_instance_;
    new (ptr) ::pb::network::messages::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Device_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Device_layout_2eproto}, {
      &scc_info_vec3_maths_2eproto.base,}};

static void InitDefaultsscc_info_Layout_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_Layout_default_instance_;
    new (ptr) ::pb::network::messages::Layout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::Layout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Layout_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Layout_layout_2eproto}, {
      &scc_info_Device_layout_2eproto.base,
      &scc_info_Screen_layout_2eproto.base,}};

static void InitDefaultsscc_info_LayoutList_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_LayoutList_default_instance_;
    new (ptr) ::pb::network::messages::LayoutList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::LayoutList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayoutList_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayoutList_layout_2eproto}, {}};

static void InitDefaultsscc_info_LayoutName_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_LayoutName_default_instance_;
    new (ptr) ::pb::network::messages::LayoutName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::LayoutName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayoutName_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayoutName_layout_2eproto}, {}};

static void InitDefaultsscc_info_Screen_layout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::network::messages::_Screen_default_instance_;
    new (ptr) ::pb::network::messages::Screen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::network::messages::Screen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Screen_layout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Screen_layout_2eproto}, {
      &scc_info_vec3_maths_2eproto.base,
      &scc_info_vec2_maths_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_layout_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_layout_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_layout_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_layout_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::LayoutList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::LayoutList, layoutname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::LayoutName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::LayoutName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, name_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, horizontalfov_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, mindistance_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, maxdistance_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, position_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, orientation_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, physicaluid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, positiondelta_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Device, orientationdelta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, name_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, position_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, orientation_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Screen, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Layout, name_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Layout, devices_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::Layout, screens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationValues, angle_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationValues, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationDevices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationDevices, devicea_),
  PROTOBUF_FIELD_OFFSET(::pb::network::messages::CalibrationDevices, deviceb_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::network::messages::LayoutList)},
  { 6, -1, sizeof(::pb::network::messages::LayoutName)},
  { 12, -1, sizeof(::pb::network::messages::Device)},
  { 27, -1, sizeof(::pb::network::messages::Screen)},
  { 37, -1, sizeof(::pb::network::messages::Layout)},
  { 45, -1, sizeof(::pb::network::messages::CalibrationValues)},
  { 52, -1, sizeof(::pb::network::messages::CalibrationDevices)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_LayoutList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_LayoutName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_Screen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_Layout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_CalibrationValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::network::messages::_CalibrationDevices_default_instance_),
};

const char descriptor_table_protodef_layout_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014layout.proto\022\023pb.network.messages\032\013mat"
  "hs.proto\" \n\nLayoutList\022\022\n\nlayoutName\030\n \003"
  "(\t\"\032\n\nLayoutName\022\014\n\004name\030\n \001(\t\"\275\002\n\006Devic"
  "e\022\014\n\004name\030\n \001(\t\022\013\n\003uid\030\024 \001(\t\022\025\n\rhorizont"
  "alFOV\030\036 \001(\001\022\023\n\013minDistance\030( \001(\001\022\023\n\013maxD"
  "istance\0302 \001(\001\022+\n\010position\030< \001(\0132\031.pb.net"
  "work.messages.vec3\022.\n\013orientation\030F \001(\0132"
  "\031.pb.network.messages.vec3\022\023\n\013physicalui"
  "d\030P \001(\t\0220\n\rpositionDelta\030Z \001(\0132\031.pb.netw"
  "ork.messages.vec3\0223\n\020orientationDelta\030d "
  "\001(\0132\031.pb.network.messages.vec3\"\251\001\n\006Scree"
  "n\022\014\n\004name\030\n \001(\t\022\013\n\003uid\030\024 \001(\t\022+\n\010position"
  "\030\036 \001(\0132\031.pb.network.messages.vec3\022.\n\013ori"
  "entation\030( \001(\0132\031.pb.network.messages.vec"
  "3\022\'\n\004size\0302 \001(\0132\031.pb.network.messages.ve"
  "c2\"r\n\006Layout\022\014\n\004name\030\n \001(\t\022,\n\007devices\030\024 "
  "\003(\0132\033.pb.network.messages.Device\022,\n\007scre"
  "ens\030\036 \003(\0132\033.pb.network.messages.Screen\"j"
  "\n\021CalibrationValues\022(\n\005angle\030\n \001(\0132\031.pb."
  "network.messages.vec3\022+\n\010position\030\024 \001(\0132"
  "\031.pb.network.messages.vec3\"6\n\022Calibratio"
  "nDevices\022\017\n\007deviceA\030\n \001(\t\022\017\n\007deviceB\030\024 \001"
  "(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_layout_2eproto_deps[1] = {
  &::descriptor_table_maths_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_layout_2eproto_sccs[7] = {
  &scc_info_CalibrationDevices_layout_2eproto.base,
  &scc_info_CalibrationValues_layout_2eproto.base,
  &scc_info_Device_layout_2eproto.base,
  &scc_info_Layout_layout_2eproto.base,
  &scc_info_LayoutList_layout_2eproto.base,
  &scc_info_LayoutName_layout_2eproto.base,
  &scc_info_Screen_layout_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_layout_2eproto_once;
static bool descriptor_table_layout_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_layout_2eproto = {
  &descriptor_table_layout_2eproto_initialized, descriptor_table_protodef_layout_2eproto, "layout.proto", 890,
  &descriptor_table_layout_2eproto_once, descriptor_table_layout_2eproto_sccs, descriptor_table_layout_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_layout_2eproto::offsets,
  file_level_metadata_layout_2eproto, 7, file_level_enum_descriptors_layout_2eproto, file_level_service_descriptors_layout_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_layout_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_layout_2eproto), true);
namespace pb {
namespace network {
namespace messages {

// ===================================================================

void LayoutList::InitAsDefaultInstance() {
}
class LayoutList::_Internal {
 public:
};

LayoutList::LayoutList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.LayoutList)
}
LayoutList::LayoutList(const LayoutList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      layoutname_(from.layoutname_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.LayoutList)
}

void LayoutList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayoutList_layout_2eproto.base);
}

LayoutList::~LayoutList() {
  // @@protoc_insertion_point(destructor:pb.network.messages.LayoutList)
  SharedDtor();
}

void LayoutList::SharedDtor() {
}

void LayoutList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayoutList& LayoutList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayoutList_layout_2eproto.base);
  return *internal_default_instance();
}


void LayoutList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.LayoutList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layoutname_.Clear();
  _internal_metadata_.Clear();
}

const char* LayoutList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string layoutName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_layoutname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.LayoutList.layoutName"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.LayoutList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string layoutName = 10;
  for (int i = 0, n = this->_internal_layoutname_size(); i < n; i++) {
    const auto& s = this->_internal_layoutname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutList.layoutName");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.LayoutList)
  return target;
}

size_t LayoutList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.LayoutList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layoutName = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(layoutname_.size());
  for (int i = 0, n = layoutname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      layoutname_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayoutList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.LayoutList)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayoutList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.LayoutList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.LayoutList)
    MergeFrom(*source);
  }
}

void LayoutList::MergeFrom(const LayoutList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.LayoutList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layoutname_.MergeFrom(from.layoutname_);
}

void LayoutList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.LayoutList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutList::CopyFrom(const LayoutList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.LayoutList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutList::IsInitialized() const {
  return true;
}

void LayoutList::InternalSwap(LayoutList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layoutname_.InternalSwap(&other->layoutname_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayoutName::InitAsDefaultInstance() {
}
class LayoutName::_Internal {
 public:
};

LayoutName::LayoutName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.LayoutName)
}
LayoutName::LayoutName(const LayoutName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.LayoutName)
}

void LayoutName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayoutName_layout_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LayoutName::~LayoutName() {
  // @@protoc_insertion_point(destructor:pb.network.messages.LayoutName)
  SharedDtor();
}

void LayoutName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LayoutName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayoutName& LayoutName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayoutName_layout_2eproto.base);
  return *internal_default_instance();
}


void LayoutName::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.LayoutName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LayoutName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.LayoutName.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.LayoutName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.LayoutName.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.LayoutName)
  return target;
}

size_t LayoutName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.LayoutName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayoutName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.LayoutName)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayoutName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.LayoutName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.LayoutName)
    MergeFrom(*source);
  }
}

void LayoutName::MergeFrom(const LayoutName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.LayoutName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void LayoutName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.LayoutName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutName::CopyFrom(const LayoutName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.LayoutName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutName::IsInitialized() const {
  return true;
}

void LayoutName::InternalSwap(LayoutName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Device::InitAsDefaultInstance() {
  ::pb::network::messages::_Device_default_instance_._instance.get_mutable()->position_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Device_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Device_default_instance_._instance.get_mutable()->positiondelta_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Device_default_instance_._instance.get_mutable()->orientationdelta_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
}
class Device::_Internal {
 public:
  static const ::pb::network::messages::vec3& position(const Device* msg);
  static const ::pb::network::messages::vec3& orientation(const Device* msg);
  static const ::pb::network::messages::vec3& positiondelta(const Device* msg);
  static const ::pb::network::messages::vec3& orientationdelta(const Device* msg);
};

const ::pb::network::messages::vec3&
Device::_Internal::position(const Device* msg) {
  return *msg->position_;
}
const ::pb::network::messages::vec3&
Device::_Internal::orientation(const Device* msg) {
  return *msg->orientation_;
}
const ::pb::network::messages::vec3&
Device::_Internal::positiondelta(const Device* msg) {
  return *msg->positiondelta_;
}
const ::pb::network::messages::vec3&
Device::_Internal::orientationdelta(const Device* msg) {
  return *msg->orientationdelta_;
}
void Device::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Device::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void Device::clear_positiondelta() {
  if (GetArenaNoVirtual() == nullptr && positiondelta_ != nullptr) {
    delete positiondelta_;
  }
  positiondelta_ = nullptr;
}
void Device::clear_orientationdelta() {
  if (GetArenaNoVirtual() == nullptr && orientationdelta_ != nullptr) {
    delete orientationdelta_;
  }
  orientationdelta_ = nullptr;
}
Device::Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  physicaluid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physicaluid().empty()) {
    physicaluid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicaluid_);
  }
  if (from._internal_has_position()) {
    position_ = new ::pb::network::messages::vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::pb::network::messages::vec3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_positiondelta()) {
    positiondelta_ = new ::pb::network::messages::vec3(*from.positiondelta_);
  } else {
    positiondelta_ = nullptr;
  }
  if (from._internal_has_orientationdelta()) {
    orientationdelta_ = new ::pb::network::messages::vec3(*from.orientationdelta_);
  } else {
    orientationdelta_ = nullptr;
  }
  ::memcpy(&horizontalfov_, &from.horizontalfov_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxdistance_) -
    reinterpret_cast<char*>(&horizontalfov_)) + sizeof(maxdistance_));
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_layout_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicaluid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxdistance_) -
      reinterpret_cast<char*>(&position_)) + sizeof(maxdistance_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicaluid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete positiondelta_;
  if (this != internal_default_instance()) delete orientationdelta_;
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_layout_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicaluid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positiondelta_ != nullptr) {
    delete positiondelta_;
  }
  positiondelta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientationdelta_ != nullptr) {
    delete orientationdelta_;
  }
  orientationdelta_ = nullptr;
  ::memset(&horizontalfov_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxdistance_) -
      reinterpret_cast<char*>(&horizontalfov_)) + sizeof(maxdistance_));
  _internal_metadata_.Clear();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Device.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Device.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double horizontalFOV = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          horizontalfov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double minDistance = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          mindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxDistance = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          maxdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 position = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 orientation = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string physicaluid = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_physicaluid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Device.physicaluid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 positionDelta = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiondelta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 orientationDelta = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientationdelta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string uid = 20;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.uid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_uid(), target);
  }

  // double horizontalFOV = 30;
  if (!(this->horizontalfov() <= 0 && this->horizontalfov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_horizontalfov(), target);
  }

  // double minDistance = 40;
  if (!(this->mindistance() <= 0 && this->mindistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_mindistance(), target);
  }

  // double maxDistance = 50;
  if (!(this->maxdistance() <= 0 && this->maxdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_maxdistance(), target);
  }

  // .pb.network.messages.vec3 position = 60;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::position(this), target, stream);
  }

  // .pb.network.messages.vec3 orientation = 70;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::orientation(this), target, stream);
  }

  // string physicaluid = 80;
  if (this->physicaluid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physicaluid().data(), static_cast<int>(this->_internal_physicaluid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Device.physicaluid");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_physicaluid(), target);
  }

  // .pb.network.messages.vec3 positionDelta = 90;
  if (this->has_positiondelta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::positiondelta(this), target, stream);
  }

  // .pb.network.messages.vec3 orientationDelta = 100;
  if (this->has_orientationdelta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::orientationdelta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 20;
  if (this->uid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string physicaluid = 80;
  if (this->physicaluid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physicaluid());
  }

  // .pb.network.messages.vec3 position = 60;
  if (this->has_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .pb.network.messages.vec3 orientation = 70;
  if (this->has_orientation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .pb.network.messages.vec3 positionDelta = 90;
  if (this->has_positiondelta()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiondelta_);
  }

  // .pb.network.messages.vec3 orientationDelta = 100;
  if (this->has_orientationdelta()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientationdelta_);
  }

  // double horizontalFOV = 30;
  if (!(this->horizontalfov() <= 0 && this->horizontalfov() >= 0)) {
    total_size += 2 + 8;
  }

  // double minDistance = 40;
  if (!(this->mindistance() <= 0 && this->mindistance() >= 0)) {
    total_size += 2 + 8;
  }

  // double maxDistance = 50;
  if (!(this->maxdistance() <= 0 && this->maxdistance() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.physicaluid().size() > 0) {

    physicaluid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicaluid_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::pb::network::messages::vec3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from._internal_orientation());
  }
  if (from.has_positiondelta()) {
    _internal_mutable_positiondelta()->::pb::network::messages::vec3::MergeFrom(from._internal_positiondelta());
  }
  if (from.has_orientationdelta()) {
    _internal_mutable_orientationdelta()->::pb::network::messages::vec3::MergeFrom(from._internal_orientationdelta());
  }
  if (!(from.horizontalfov() <= 0 && from.horizontalfov() >= 0)) {
    _internal_set_horizontalfov(from._internal_horizontalfov());
  }
  if (!(from.mindistance() <= 0 && from.mindistance() >= 0)) {
    _internal_set_mindistance(from._internal_mindistance());
  }
  if (!(from.maxdistance() <= 0 && from.maxdistance() >= 0)) {
    _internal_set_maxdistance(from._internal_maxdistance());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  physicaluid_.Swap(&other->physicaluid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(positiondelta_, other->positiondelta_);
  swap(orientationdelta_, other->orientationdelta_);
  swap(horizontalfov_, other->horizontalfov_);
  swap(mindistance_, other->mindistance_);
  swap(maxdistance_, other->maxdistance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Screen::InitAsDefaultInstance() {
  ::pb::network::messages::_Screen_default_instance_._instance.get_mutable()->position_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Screen_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_Screen_default_instance_._instance.get_mutable()->size_ = const_cast< ::pb::network::messages::vec2*>(
      ::pb::network::messages::vec2::internal_default_instance());
}
class Screen::_Internal {
 public:
  static const ::pb::network::messages::vec3& position(const Screen* msg);
  static const ::pb::network::messages::vec3& orientation(const Screen* msg);
  static const ::pb::network::messages::vec2& size(const Screen* msg);
};

const ::pb::network::messages::vec3&
Screen::_Internal::position(const Screen* msg) {
  return *msg->position_;
}
const ::pb::network::messages::vec3&
Screen::_Internal::orientation(const Screen* msg) {
  return *msg->orientation_;
}
const ::pb::network::messages::vec2&
Screen::_Internal::size(const Screen* msg) {
  return *msg->size_;
}
void Screen::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Screen::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void Screen::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
Screen::Screen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Screen)
}
Screen::Screen(const Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from._internal_has_position()) {
    position_ = new ::pb::network::messages::vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::pb::network::messages::vec3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::pb::network::messages::vec2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Screen)
}

void Screen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Screen_layout_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&position_)) + sizeof(size_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete size_;
}

void Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screen& Screen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Screen_layout_2eproto.base);
  return *internal_default_instance();
}


void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Screen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Screen.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Screen.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 position = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 orientation = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec2 size = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Screen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string uid = 20;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Screen.uid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_uid(), target);
  }

  // .pb.network.messages.vec3 position = 30;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::position(this), target, stream);
  }

  // .pb.network.messages.vec3 orientation = 40;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::orientation(this), target, stream);
  }

  // .pb.network.messages.vec2 size = 50;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Screen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 20;
  if (this->uid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .pb.network.messages.vec3 position = 30;
  if (this->has_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .pb.network.messages.vec3 orientation = 40;
  if (this->has_orientation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .pb.network.messages.vec2 size = 50;
  if (this->has_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  const Screen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Screen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Screen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Screen)
    MergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::pb::network::messages::vec3::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::pb::network::messages::vec3::MergeFrom(from._internal_orientation());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::pb::network::messages::vec2::MergeFrom(from._internal_size());
  }
}

void Screen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::InternalSwap(Screen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Screen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layout::InitAsDefaultInstance() {
}
class Layout::_Internal {
 public:
};

Layout::Layout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.Layout)
}
Layout::Layout(const Layout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_),
      screens_(from.screens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.Layout)
}

void Layout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layout_layout_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:pb.network.messages.Layout)
  SharedDtor();
}

void Layout::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Layout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layout& Layout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layout_layout_2eproto.base);
  return *internal_default_instance();
}


void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.Layout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  screens_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Layout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.Layout.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.network.messages.Device devices = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.network.messages.Screen screens = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_screens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.Layout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 10;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.Layout.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // repeated .pb.network.messages.Device devices = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_devices(i), target, stream);
  }

  // repeated .pb.network.messages.Screen screens = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_screens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_screens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.Layout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.network.messages.Device devices = 20;
  total_size += 2UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.network.messages.Screen screens = 30;
  total_size += 2UL * this->_internal_screens_size();
  for (const auto& msg : this->screens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  const Layout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.Layout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.Layout)
    MergeFrom(*source);
  }
}

void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  screens_.MergeFrom(from.screens_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Layout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::InternalSwap(Layout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  screens_.InternalSwap(&other->screens_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Layout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibrationValues::InitAsDefaultInstance() {
  ::pb::network::messages::_CalibrationValues_default_instance_._instance.get_mutable()->angle_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
  ::pb::network::messages::_CalibrationValues_default_instance_._instance.get_mutable()->position_ = const_cast< ::pb::network::messages::vec3*>(
      ::pb::network::messages::vec3::internal_default_instance());
}
class CalibrationValues::_Internal {
 public:
  static const ::pb::network::messages::vec3& angle(const CalibrationValues* msg);
  static const ::pb::network::messages::vec3& position(const CalibrationValues* msg);
};

const ::pb::network::messages::vec3&
CalibrationValues::_Internal::angle(const CalibrationValues* msg) {
  return *msg->angle_;
}
const ::pb::network::messages::vec3&
CalibrationValues::_Internal::position(const CalibrationValues* msg) {
  return *msg->position_;
}
void CalibrationValues::clear_angle() {
  if (GetArenaNoVirtual() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
}
void CalibrationValues::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CalibrationValues::CalibrationValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.CalibrationValues)
}
CalibrationValues::CalibrationValues(const CalibrationValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_angle()) {
    angle_ = new ::pb::network::messages::vec3(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::pb::network::messages::vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.CalibrationValues)
}

void CalibrationValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationValues_layout_2eproto.base);
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(position_));
}

CalibrationValues::~CalibrationValues() {
  // @@protoc_insertion_point(destructor:pb.network.messages.CalibrationValues)
  SharedDtor();
}

void CalibrationValues::SharedDtor() {
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete position_;
}

void CalibrationValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationValues& CalibrationValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationValues_layout_2eproto.base);
  return *internal_default_instance();
}


void CalibrationValues::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.CalibrationValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CalibrationValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.network.messages.vec3 angle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.network.messages.vec3 position = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.CalibrationValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.network.messages.vec3 angle = 10;
  if (this->has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::angle(this), target, stream);
  }

  // .pb.network.messages.vec3 position = 20;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.CalibrationValues)
  return target;
}

size_t CalibrationValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.CalibrationValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.network.messages.vec3 angle = 10;
  if (this->has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  // .pb.network.messages.vec3 position = 20;
  if (this->has_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.CalibrationValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.CalibrationValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.CalibrationValues)
    MergeFrom(*source);
  }
}

void CalibrationValues::MergeFrom(const CalibrationValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.CalibrationValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angle()) {
    _internal_mutable_angle()->::pb::network::messages::vec3::MergeFrom(from._internal_angle());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::pb::network::messages::vec3::MergeFrom(from._internal_position());
  }
}

void CalibrationValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.CalibrationValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationValues::CopyFrom(const CalibrationValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.CalibrationValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationValues::IsInitialized() const {
  return true;
}

void CalibrationValues::InternalSwap(CalibrationValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibrationDevices::InitAsDefaultInstance() {
}
class CalibrationDevices::_Internal {
 public:
};

CalibrationDevices::CalibrationDevices()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.network.messages.CalibrationDevices)
}
CalibrationDevices::CalibrationDevices(const CalibrationDevices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicea().empty()) {
    devicea_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devicea_);
  }
  deviceb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceb().empty()) {
    deviceb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceb_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.network.messages.CalibrationDevices)
}

void CalibrationDevices::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationDevices_layout_2eproto.base);
  devicea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CalibrationDevices::~CalibrationDevices() {
  // @@protoc_insertion_point(destructor:pb.network.messages.CalibrationDevices)
  SharedDtor();
}

void CalibrationDevices::SharedDtor() {
  devicea_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalibrationDevices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationDevices& CalibrationDevices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationDevices_layout_2eproto.base);
  return *internal_default_instance();
}


void CalibrationDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.network.messages.CalibrationDevices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicea_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CalibrationDevices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceA = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_devicea();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.CalibrationDevices.deviceA"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceB = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_deviceb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.network.messages.CalibrationDevices.deviceB"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationDevices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.network.messages.CalibrationDevices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceA = 10;
  if (this->devicea().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicea().data(), static_cast<int>(this->_internal_devicea().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceA");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_devicea(), target);
  }

  // string deviceB = 20;
  if (this->deviceb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceb().data(), static_cast<int>(this->_internal_deviceb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.network.messages.CalibrationDevices.deviceB");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_deviceb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.network.messages.CalibrationDevices)
  return target;
}

size_t CalibrationDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.network.messages.CalibrationDevices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceA = 10;
  if (this->devicea().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicea());
  }

  // string deviceB = 20;
  if (this->deviceb().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationDevices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.network.messages.CalibrationDevices)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationDevices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationDevices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.network.messages.CalibrationDevices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.network.messages.CalibrationDevices)
    MergeFrom(*source);
  }
}

void CalibrationDevices::MergeFrom(const CalibrationDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.network.messages.CalibrationDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicea().size() > 0) {

    devicea_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devicea_);
  }
  if (from.deviceb().size() > 0) {

    deviceb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceb_);
  }
}

void CalibrationDevices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.network.messages.CalibrationDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationDevices::CopyFrom(const CalibrationDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.network.messages.CalibrationDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationDevices::IsInitialized() const {
  return true;
}

void CalibrationDevices::InternalSwap(CalibrationDevices* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devicea_.Swap(&other->devicea_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceb_.Swap(&other->deviceb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationDevices::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace network
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::network::messages::LayoutList* Arena::CreateMaybeMessage< ::pb::network::messages::LayoutList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::LayoutList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::LayoutName* Arena::CreateMaybeMessage< ::pb::network::messages::LayoutName >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::LayoutName >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::Device* Arena::CreateMaybeMessage< ::pb::network::messages::Device >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::Screen* Arena::CreateMaybeMessage< ::pb::network::messages::Screen >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::Layout* Arena::CreateMaybeMessage< ::pb::network::messages::Layout >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::Layout >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::CalibrationValues* Arena::CreateMaybeMessage< ::pb::network::messages::CalibrationValues >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::CalibrationValues >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::network::messages::CalibrationDevices* Arena::CreateMaybeMessage< ::pb::network::messages::CalibrationDevices >(Arena* arena) {
  return Arena::CreateInternal< ::pb::network::messages::CalibrationDevices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
