// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_layout_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_layout_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "maths.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_layout_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_layout_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_layout_2eproto;
namespace pb {
namespace network {
namespace messages {
class CalibrationDevices;
class CalibrationDevicesDefaultTypeInternal;
extern CalibrationDevicesDefaultTypeInternal _CalibrationDevices_default_instance_;
class CalibrationValues;
class CalibrationValuesDefaultTypeInternal;
extern CalibrationValuesDefaultTypeInternal _CalibrationValues_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Layout;
class LayoutDefaultTypeInternal;
extern LayoutDefaultTypeInternal _Layout_default_instance_;
class LayoutList;
class LayoutListDefaultTypeInternal;
extern LayoutListDefaultTypeInternal _LayoutList_default_instance_;
class LayoutName;
class LayoutNameDefaultTypeInternal;
extern LayoutNameDefaultTypeInternal _LayoutName_default_instance_;
class Screen;
class ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
}  // namespace messages
}  // namespace network
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::network::messages::CalibrationDevices* Arena::CreateMaybeMessage<::pb::network::messages::CalibrationDevices>(Arena*);
template<> ::pb::network::messages::CalibrationValues* Arena::CreateMaybeMessage<::pb::network::messages::CalibrationValues>(Arena*);
template<> ::pb::network::messages::Device* Arena::CreateMaybeMessage<::pb::network::messages::Device>(Arena*);
template<> ::pb::network::messages::Layout* Arena::CreateMaybeMessage<::pb::network::messages::Layout>(Arena*);
template<> ::pb::network::messages::LayoutList* Arena::CreateMaybeMessage<::pb::network::messages::LayoutList>(Arena*);
template<> ::pb::network::messages::LayoutName* Arena::CreateMaybeMessage<::pb::network::messages::LayoutName>(Arena*);
template<> ::pb::network::messages::Screen* Arena::CreateMaybeMessage<::pb::network::messages::Screen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace network {
namespace messages {

// ===================================================================

class LayoutList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.LayoutList) */ {
 public:
  LayoutList();
  virtual ~LayoutList();

  LayoutList(const LayoutList& from);
  LayoutList(LayoutList&& from) noexcept
    : LayoutList() {
    *this = ::std::move(from);
  }

  inline LayoutList& operator=(const LayoutList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutList& operator=(LayoutList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayoutList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayoutList* internal_default_instance() {
    return reinterpret_cast<const LayoutList*>(
               &_LayoutList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayoutList& a, LayoutList& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayoutList* New() const final {
    return CreateMaybeMessage<LayoutList>(nullptr);
  }

  LayoutList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayoutList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayoutList& from);
  void MergeFrom(const LayoutList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.LayoutList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutNameFieldNumber = 10,
  };
  // repeated string layoutName = 10;
  int layoutname_size() const;
  private:
  int _internal_layoutname_size() const;
  public:
  void clear_layoutname();
  const std::string& layoutname(int index) const;
  std::string* mutable_layoutname(int index);
  void set_layoutname(int index, const std::string& value);
  void set_layoutname(int index, std::string&& value);
  void set_layoutname(int index, const char* value);
  void set_layoutname(int index, const char* value, size_t size);
  std::string* add_layoutname();
  void add_layoutname(const std::string& value);
  void add_layoutname(std::string&& value);
  void add_layoutname(const char* value);
  void add_layoutname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& layoutname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_layoutname();
  private:
  const std::string& _internal_layoutname(int index) const;
  std::string* _internal_add_layoutname();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.LayoutList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> layoutname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class LayoutName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.LayoutName) */ {
 public:
  LayoutName();
  virtual ~LayoutName();

  LayoutName(const LayoutName& from);
  LayoutName(LayoutName&& from) noexcept
    : LayoutName() {
    *this = ::std::move(from);
  }

  inline LayoutName& operator=(const LayoutName& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutName& operator=(LayoutName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayoutName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayoutName* internal_default_instance() {
    return reinterpret_cast<const LayoutName*>(
               &_LayoutName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LayoutName& a, LayoutName& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayoutName* New() const final {
    return CreateMaybeMessage<LayoutName>(nullptr);
  }

  LayoutName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayoutName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayoutName& from);
  void MergeFrom(const LayoutName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.LayoutName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.LayoutName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class Device :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kUidFieldNumber = 20,
    kPhysicaluidFieldNumber = 80,
    kPositionFieldNumber = 60,
    kOrientationFieldNumber = 70,
    kPositionDeltaFieldNumber = 90,
    kOrientationDeltaFieldNumber = 100,
    kHorizontalFOVFieldNumber = 30,
    kMinDistanceFieldNumber = 40,
    kMaxDistanceFieldNumber = 50,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 20;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string physicaluid = 80;
  void clear_physicaluid();
  const std::string& physicaluid() const;
  void set_physicaluid(const std::string& value);
  void set_physicaluid(std::string&& value);
  void set_physicaluid(const char* value);
  void set_physicaluid(const char* value, size_t size);
  std::string* mutable_physicaluid();
  std::string* release_physicaluid();
  void set_allocated_physicaluid(std::string* physicaluid);
  private:
  const std::string& _internal_physicaluid() const;
  void _internal_set_physicaluid(const std::string& value);
  std::string* _internal_mutable_physicaluid();
  public:

  // .pb.network.messages.vec3 position = 60;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::network::messages::vec3& position() const;
  ::pb::network::messages::vec3* release_position();
  ::pb::network::messages::vec3* mutable_position();
  void set_allocated_position(::pb::network::messages::vec3* position);
  private:
  const ::pb::network::messages::vec3& _internal_position() const;
  ::pb::network::messages::vec3* _internal_mutable_position();
  public:

  // .pb.network.messages.vec3 orientation = 70;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::pb::network::messages::vec3& orientation() const;
  ::pb::network::messages::vec3* release_orientation();
  ::pb::network::messages::vec3* mutable_orientation();
  void set_allocated_orientation(::pb::network::messages::vec3* orientation);
  private:
  const ::pb::network::messages::vec3& _internal_orientation() const;
  ::pb::network::messages::vec3* _internal_mutable_orientation();
  public:

  // .pb.network.messages.vec3 positionDelta = 90;
  bool has_positiondelta() const;
  private:
  bool _internal_has_positiondelta() const;
  public:
  void clear_positiondelta();
  const ::pb::network::messages::vec3& positiondelta() const;
  ::pb::network::messages::vec3* release_positiondelta();
  ::pb::network::messages::vec3* mutable_positiondelta();
  void set_allocated_positiondelta(::pb::network::messages::vec3* positiondelta);
  private:
  const ::pb::network::messages::vec3& _internal_positiondelta() const;
  ::pb::network::messages::vec3* _internal_mutable_positiondelta();
  public:

  // .pb.network.messages.vec3 orientationDelta = 100;
  bool has_orientationdelta() const;
  private:
  bool _internal_has_orientationdelta() const;
  public:
  void clear_orientationdelta();
  const ::pb::network::messages::vec3& orientationdelta() const;
  ::pb::network::messages::vec3* release_orientationdelta();
  ::pb::network::messages::vec3* mutable_orientationdelta();
  void set_allocated_orientationdelta(::pb::network::messages::vec3* orientationdelta);
  private:
  const ::pb::network::messages::vec3& _internal_orientationdelta() const;
  ::pb::network::messages::vec3* _internal_mutable_orientationdelta();
  public:

  // double horizontalFOV = 30;
  void clear_horizontalfov();
  double horizontalfov() const;
  void set_horizontalfov(double value);
  private:
  double _internal_horizontalfov() const;
  void _internal_set_horizontalfov(double value);
  public:

  // double minDistance = 40;
  void clear_mindistance();
  double mindistance() const;
  void set_mindistance(double value);
  private:
  double _internal_mindistance() const;
  void _internal_set_mindistance(double value);
  public:

  // double maxDistance = 50;
  void clear_maxdistance();
  double maxdistance() const;
  void set_maxdistance(double value);
  private:
  double _internal_maxdistance() const;
  void _internal_set_maxdistance(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.Device)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physicaluid_;
  ::pb::network::messages::vec3* position_;
  ::pb::network::messages::vec3* orientation_;
  ::pb::network::messages::vec3* positiondelta_;
  ::pb::network::messages::vec3* orientationdelta_;
  double horizontalfov_;
  double mindistance_;
  double maxdistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class Screen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Screen) */ {
 public:
  Screen();
  virtual ~Screen();

  Screen(const Screen& from);
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screen& operator=(Screen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Screen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(Screen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Screen* New() const final {
    return CreateMaybeMessage<Screen>(nullptr);
  }

  Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.Screen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kUidFieldNumber = 20,
    kPositionFieldNumber = 30,
    kOrientationFieldNumber = 40,
    kSizeFieldNumber = 50,
  };
  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uid = 20;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // .pb.network.messages.vec3 position = 30;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::network::messages::vec3& position() const;
  ::pb::network::messages::vec3* release_position();
  ::pb::network::messages::vec3* mutable_position();
  void set_allocated_position(::pb::network::messages::vec3* position);
  private:
  const ::pb::network::messages::vec3& _internal_position() const;
  ::pb::network::messages::vec3* _internal_mutable_position();
  public:

  // .pb.network.messages.vec3 orientation = 40;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::pb::network::messages::vec3& orientation() const;
  ::pb::network::messages::vec3* release_orientation();
  ::pb::network::messages::vec3* mutable_orientation();
  void set_allocated_orientation(::pb::network::messages::vec3* orientation);
  private:
  const ::pb::network::messages::vec3& _internal_orientation() const;
  ::pb::network::messages::vec3* _internal_mutable_orientation();
  public:

  // .pb.network.messages.vec2 size = 50;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::pb::network::messages::vec2& size() const;
  ::pb::network::messages::vec2* release_size();
  ::pb::network::messages::vec2* mutable_size();
  void set_allocated_size(::pb::network::messages::vec2* size);
  private:
  const ::pb::network::messages::vec2& _internal_size() const;
  ::pb::network::messages::vec2* _internal_mutable_size();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.Screen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::pb::network::messages::vec3* position_;
  ::pb::network::messages::vec3* orientation_;
  ::pb::network::messages::vec2* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class Layout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.Layout) */ {
 public:
  Layout();
  virtual ~Layout();

  Layout(const Layout& from);
  Layout(Layout&& from) noexcept
    : Layout() {
    *this = ::std::move(from);
  }

  inline Layout& operator=(const Layout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layout& operator=(Layout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layout* internal_default_instance() {
    return reinterpret_cast<const Layout*>(
               &_Layout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Layout& a, Layout& b) {
    a.Swap(&b);
  }
  inline void Swap(Layout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layout* New() const final {
    return CreateMaybeMessage<Layout>(nullptr);
  }

  Layout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layout& from);
  void MergeFrom(const Layout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.Layout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 20,
    kScreensFieldNumber = 30,
    kNameFieldNumber = 10,
  };
  // repeated .pb.network.messages.Device devices = 20;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::pb::network::messages::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Device >*
      mutable_devices();
  private:
  const ::pb::network::messages::Device& _internal_devices(int index) const;
  ::pb::network::messages::Device* _internal_add_devices();
  public:
  const ::pb::network::messages::Device& devices(int index) const;
  ::pb::network::messages::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Device >&
      devices() const;

  // repeated .pb.network.messages.Screen screens = 30;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::pb::network::messages::Screen* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Screen >*
      mutable_screens();
  private:
  const ::pb::network::messages::Screen& _internal_screens(int index) const;
  ::pb::network::messages::Screen* _internal_add_screens();
  public:
  const ::pb::network::messages::Screen& screens(int index) const;
  ::pb::network::messages::Screen* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Screen >&
      screens() const;

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.Layout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Screen > screens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class CalibrationValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.CalibrationValues) */ {
 public:
  CalibrationValues();
  virtual ~CalibrationValues();

  CalibrationValues(const CalibrationValues& from);
  CalibrationValues(CalibrationValues&& from) noexcept
    : CalibrationValues() {
    *this = ::std::move(from);
  }

  inline CalibrationValues& operator=(const CalibrationValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationValues& operator=(CalibrationValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibrationValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationValues* internal_default_instance() {
    return reinterpret_cast<const CalibrationValues*>(
               &_CalibrationValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CalibrationValues& a, CalibrationValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibrationValues* New() const final {
    return CreateMaybeMessage<CalibrationValues>(nullptr);
  }

  CalibrationValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibrationValues& from);
  void MergeFrom(const CalibrationValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.CalibrationValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 10,
    kPositionFieldNumber = 20,
  };
  // .pb.network.messages.vec3 angle = 10;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::pb::network::messages::vec3& angle() const;
  ::pb::network::messages::vec3* release_angle();
  ::pb::network::messages::vec3* mutable_angle();
  void set_allocated_angle(::pb::network::messages::vec3* angle);
  private:
  const ::pb::network::messages::vec3& _internal_angle() const;
  ::pb::network::messages::vec3* _internal_mutable_angle();
  public:

  // .pb.network.messages.vec3 position = 20;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::pb::network::messages::vec3& position() const;
  ::pb::network::messages::vec3* release_position();
  ::pb::network::messages::vec3* mutable_position();
  void set_allocated_position(::pb::network::messages::vec3* position);
  private:
  const ::pb::network::messages::vec3& _internal_position() const;
  ::pb::network::messages::vec3* _internal_mutable_position();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.CalibrationValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::network::messages::vec3* angle_;
  ::pb::network::messages::vec3* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// -------------------------------------------------------------------

class CalibrationDevices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.network.messages.CalibrationDevices) */ {
 public:
  CalibrationDevices();
  virtual ~CalibrationDevices();

  CalibrationDevices(const CalibrationDevices& from);
  CalibrationDevices(CalibrationDevices&& from) noexcept
    : CalibrationDevices() {
    *this = ::std::move(from);
  }

  inline CalibrationDevices& operator=(const CalibrationDevices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationDevices& operator=(CalibrationDevices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibrationDevices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationDevices* internal_default_instance() {
    return reinterpret_cast<const CalibrationDevices*>(
               &_CalibrationDevices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CalibrationDevices& a, CalibrationDevices& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationDevices* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibrationDevices* New() const final {
    return CreateMaybeMessage<CalibrationDevices>(nullptr);
  }

  CalibrationDevices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationDevices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibrationDevices& from);
  void MergeFrom(const CalibrationDevices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationDevices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.network.messages.CalibrationDevices";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_layout_2eproto);
    return ::descriptor_table_layout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceAFieldNumber = 10,
    kDeviceBFieldNumber = 20,
  };
  // string deviceA = 10;
  void clear_devicea();
  const std::string& devicea() const;
  void set_devicea(const std::string& value);
  void set_devicea(std::string&& value);
  void set_devicea(const char* value);
  void set_devicea(const char* value, size_t size);
  std::string* mutable_devicea();
  std::string* release_devicea();
  void set_allocated_devicea(std::string* devicea);
  private:
  const std::string& _internal_devicea() const;
  void _internal_set_devicea(const std::string& value);
  std::string* _internal_mutable_devicea();
  public:

  // string deviceB = 20;
  void clear_deviceb();
  const std::string& deviceb() const;
  void set_deviceb(const std::string& value);
  void set_deviceb(std::string&& value);
  void set_deviceb(const char* value);
  void set_deviceb(const char* value, size_t size);
  std::string* mutable_deviceb();
  std::string* release_deviceb();
  void set_allocated_deviceb(std::string* deviceb);
  private:
  const std::string& _internal_deviceb() const;
  void _internal_set_deviceb(const std::string& value);
  std::string* _internal_mutable_deviceb();
  public:

  // @@protoc_insertion_point(class_scope:pb.network.messages.CalibrationDevices)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicea_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_layout_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayoutList

// repeated string layoutName = 10;
inline int LayoutList::_internal_layoutname_size() const {
  return layoutname_.size();
}
inline int LayoutList::layoutname_size() const {
  return _internal_layoutname_size();
}
inline void LayoutList::clear_layoutname() {
  layoutname_.Clear();
}
inline std::string* LayoutList::add_layoutname() {
  // @@protoc_insertion_point(field_add_mutable:pb.network.messages.LayoutList.layoutName)
  return _internal_add_layoutname();
}
inline const std::string& LayoutList::_internal_layoutname(int index) const {
  return layoutname_.Get(index);
}
inline const std::string& LayoutList::layoutname(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.LayoutList.layoutName)
  return _internal_layoutname(index);
}
inline std::string* LayoutList::mutable_layoutname(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.LayoutList.layoutName)
  return layoutname_.Mutable(index);
}
inline void LayoutList::set_layoutname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.network.messages.LayoutList.layoutName)
  layoutname_.Mutable(index)->assign(value);
}
inline void LayoutList::set_layoutname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.network.messages.LayoutList.layoutName)
  layoutname_.Mutable(index)->assign(std::move(value));
}
inline void LayoutList::set_layoutname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layoutname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.network.messages.LayoutList.layoutName)
}
inline void LayoutList::set_layoutname(int index, const char* value, size_t size) {
  layoutname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.LayoutList.layoutName)
}
inline std::string* LayoutList::_internal_add_layoutname() {
  return layoutname_.Add();
}
inline void LayoutList::add_layoutname(const std::string& value) {
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.network.messages.LayoutList.layoutName)
}
inline void LayoutList::add_layoutname(std::string&& value) {
  layoutname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.network.messages.LayoutList.layoutName)
}
inline void LayoutList::add_layoutname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layoutname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.network.messages.LayoutList.layoutName)
}
inline void LayoutList::add_layoutname(const char* value, size_t size) {
  layoutname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.network.messages.LayoutList.layoutName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayoutList::layoutname() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.LayoutList.layoutName)
  return layoutname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayoutList::mutable_layoutname() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.LayoutList.layoutName)
  return &layoutname_;
}

// -------------------------------------------------------------------

// LayoutName

// string name = 10;
inline void LayoutName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LayoutName::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.LayoutName.name)
  return _internal_name();
}
inline void LayoutName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.LayoutName.name)
}
inline std::string* LayoutName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.LayoutName.name)
  return _internal_mutable_name();
}
inline const std::string& LayoutName::_internal_name() const {
  return name_.GetNoArena();
}
inline void LayoutName::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LayoutName::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.LayoutName.name)
}
inline void LayoutName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.LayoutName.name)
}
inline void LayoutName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.LayoutName.name)
}
inline std::string* LayoutName::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayoutName::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.LayoutName.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayoutName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.LayoutName.name)
}

// -------------------------------------------------------------------

// Device

// string name = 10;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.GetNoArena();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.name)
}

// string uid = 20;
inline void Device::clear_uid() {
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.uid)
  return _internal_uid();
}
inline void Device::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.uid)
}
inline std::string* Device::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.uid)
  return _internal_mutable_uid();
}
inline const std::string& Device::_internal_uid() const {
  return uid_.GetNoArena();
}
inline void Device::_internal_set_uid(const std::string& value) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_uid(std::string&& value) {
  
  uid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Device.uid)
}
inline void Device::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.uid)
}
inline void Device::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.uid)
}
inline std::string* Device::_internal_mutable_uid() {
  
  return uid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.uid)
  
  return uid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.uid)
}

// double horizontalFOV = 30;
inline void Device::clear_horizontalfov() {
  horizontalfov_ = 0;
}
inline double Device::_internal_horizontalfov() const {
  return horizontalfov_;
}
inline double Device::horizontalfov() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.horizontalFOV)
  return _internal_horizontalfov();
}
inline void Device::_internal_set_horizontalfov(double value) {
  
  horizontalfov_ = value;
}
inline void Device::set_horizontalfov(double value) {
  _internal_set_horizontalfov(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.horizontalFOV)
}

// double minDistance = 40;
inline void Device::clear_mindistance() {
  mindistance_ = 0;
}
inline double Device::_internal_mindistance() const {
  return mindistance_;
}
inline double Device::mindistance() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.minDistance)
  return _internal_mindistance();
}
inline void Device::_internal_set_mindistance(double value) {
  
  mindistance_ = value;
}
inline void Device::set_mindistance(double value) {
  _internal_set_mindistance(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.minDistance)
}

// double maxDistance = 50;
inline void Device::clear_maxdistance() {
  maxdistance_ = 0;
}
inline double Device::_internal_maxdistance() const {
  return maxdistance_;
}
inline double Device::maxdistance() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.maxDistance)
  return _internal_maxdistance();
}
inline void Device::_internal_set_maxdistance(double value) {
  
  maxdistance_ = value;
}
inline void Device::set_maxdistance(double value) {
  _internal_set_maxdistance(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.maxDistance)
}

// .pb.network.messages.vec3 position = 60;
inline bool Device::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Device::has_position() const {
  return _internal_has_position();
}
inline const ::pb::network::messages::vec3& Device::_internal_position() const {
  const ::pb::network::messages::vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Device::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.position)
  return _internal_position();
}
inline ::pb::network::messages::vec3* Device::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Device::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::pb::network::messages::vec3* Device::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.position)
  return _internal_mutable_position();
}
inline void Device::set_allocated_position(::pb::network::messages::vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.position)
}

// .pb.network.messages.vec3 orientation = 70;
inline bool Device::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Device::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::pb::network::messages::vec3& Device::_internal_orientation() const {
  const ::pb::network::messages::vec3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Device::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.orientation)
  return _internal_orientation();
}
inline ::pb::network::messages::vec3* Device::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Device::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::pb::network::messages::vec3* Device::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.orientation)
  return _internal_mutable_orientation();
}
inline void Device::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.orientation)
}

// string physicaluid = 80;
inline void Device::clear_physicaluid() {
  physicaluid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::physicaluid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.physicaluid)
  return _internal_physicaluid();
}
inline void Device::set_physicaluid(const std::string& value) {
  _internal_set_physicaluid(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Device.physicaluid)
}
inline std::string* Device::mutable_physicaluid() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.physicaluid)
  return _internal_mutable_physicaluid();
}
inline const std::string& Device::_internal_physicaluid() const {
  return physicaluid_.GetNoArena();
}
inline void Device::_internal_set_physicaluid(const std::string& value) {
  
  physicaluid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_physicaluid(std::string&& value) {
  
  physicaluid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Device.physicaluid)
}
inline void Device::set_physicaluid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physicaluid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Device.physicaluid)
}
inline void Device::set_physicaluid(const char* value, size_t size) {
  
  physicaluid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Device.physicaluid)
}
inline std::string* Device::_internal_mutable_physicaluid() {
  
  return physicaluid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_physicaluid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.physicaluid)
  
  return physicaluid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_physicaluid(std::string* physicaluid) {
  if (physicaluid != nullptr) {
    
  } else {
    
  }
  physicaluid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physicaluid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.physicaluid)
}

// .pb.network.messages.vec3 positionDelta = 90;
inline bool Device::_internal_has_positiondelta() const {
  return this != internal_default_instance() && positiondelta_ != nullptr;
}
inline bool Device::has_positiondelta() const {
  return _internal_has_positiondelta();
}
inline const ::pb::network::messages::vec3& Device::_internal_positiondelta() const {
  const ::pb::network::messages::vec3* p = positiondelta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Device::positiondelta() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.positionDelta)
  return _internal_positiondelta();
}
inline ::pb::network::messages::vec3* Device::release_positiondelta() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.positionDelta)
  
  ::pb::network::messages::vec3* temp = positiondelta_;
  positiondelta_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Device::_internal_mutable_positiondelta() {
  
  if (positiondelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    positiondelta_ = p;
  }
  return positiondelta_;
}
inline ::pb::network::messages::vec3* Device::mutable_positiondelta() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.positionDelta)
  return _internal_mutable_positiondelta();
}
inline void Device::set_allocated_positiondelta(::pb::network::messages::vec3* positiondelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiondelta_);
  }
  if (positiondelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positiondelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiondelta, submessage_arena);
    }
    
  } else {
    
  }
  positiondelta_ = positiondelta;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.positionDelta)
}

// .pb.network.messages.vec3 orientationDelta = 100;
inline bool Device::_internal_has_orientationdelta() const {
  return this != internal_default_instance() && orientationdelta_ != nullptr;
}
inline bool Device::has_orientationdelta() const {
  return _internal_has_orientationdelta();
}
inline const ::pb::network::messages::vec3& Device::_internal_orientationdelta() const {
  const ::pb::network::messages::vec3* p = orientationdelta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Device::orientationdelta() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Device.orientationDelta)
  return _internal_orientationdelta();
}
inline ::pb::network::messages::vec3* Device::release_orientationdelta() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Device.orientationDelta)
  
  ::pb::network::messages::vec3* temp = orientationdelta_;
  orientationdelta_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Device::_internal_mutable_orientationdelta() {
  
  if (orientationdelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    orientationdelta_ = p;
  }
  return orientationdelta_;
}
inline ::pb::network::messages::vec3* Device::mutable_orientationdelta() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Device.orientationDelta)
  return _internal_mutable_orientationdelta();
}
inline void Device::set_allocated_orientationdelta(::pb::network::messages::vec3* orientationdelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationdelta_);
  }
  if (orientationdelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientationdelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationdelta, submessage_arena);
    }
    
  } else {
    
  }
  orientationdelta_ = orientationdelta;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Device.orientationDelta)
}

// -------------------------------------------------------------------

// Screen

// string name = 10;
inline void Screen::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Screen::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.name)
  return _internal_name();
}
inline void Screen::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Screen.name)
}
inline std::string* Screen::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.name)
  return _internal_mutable_name();
}
inline const std::string& Screen::_internal_name() const {
  return name_.GetNoArena();
}
inline void Screen::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Screen::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Screen.name)
}
inline void Screen::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Screen.name)
}
inline void Screen::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Screen.name)
}
inline std::string* Screen::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Screen::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.name)
}

// string uid = 20;
inline void Screen::clear_uid() {
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Screen::uid() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.uid)
  return _internal_uid();
}
inline void Screen::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Screen.uid)
}
inline std::string* Screen::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.uid)
  return _internal_mutable_uid();
}
inline const std::string& Screen::_internal_uid() const {
  return uid_.GetNoArena();
}
inline void Screen::_internal_set_uid(const std::string& value) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Screen::set_uid(std::string&& value) {
  
  uid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Screen.uid)
}
inline void Screen::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Screen.uid)
}
inline void Screen::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Screen.uid)
}
inline std::string* Screen::_internal_mutable_uid() {
  
  return uid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Screen::release_uid() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.uid)
  
  return uid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Screen::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.uid)
}

// .pb.network.messages.vec3 position = 30;
inline bool Screen::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Screen::has_position() const {
  return _internal_has_position();
}
inline const ::pb::network::messages::vec3& Screen::_internal_position() const {
  const ::pb::network::messages::vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Screen::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.position)
  return _internal_position();
}
inline ::pb::network::messages::vec3* Screen::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Screen::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::pb::network::messages::vec3* Screen::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.position)
  return _internal_mutable_position();
}
inline void Screen::set_allocated_position(::pb::network::messages::vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.position)
}

// .pb.network.messages.vec3 orientation = 40;
inline bool Screen::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Screen::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::pb::network::messages::vec3& Screen::_internal_orientation() const {
  const ::pb::network::messages::vec3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& Screen::orientation() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.orientation)
  return _internal_orientation();
}
inline ::pb::network::messages::vec3* Screen::release_orientation() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.orientation)
  
  ::pb::network::messages::vec3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* Screen::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::pb::network::messages::vec3* Screen::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.orientation)
  return _internal_mutable_orientation();
}
inline void Screen::set_allocated_orientation(::pb::network::messages::vec3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.orientation)
}

// .pb.network.messages.vec2 size = 50;
inline bool Screen::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool Screen::has_size() const {
  return _internal_has_size();
}
inline const ::pb::network::messages::vec2& Screen::_internal_size() const {
  const ::pb::network::messages::vec2* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec2*>(
      &::pb::network::messages::_vec2_default_instance_);
}
inline const ::pb::network::messages::vec2& Screen::size() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Screen.size)
  return _internal_size();
}
inline ::pb::network::messages::vec2* Screen::release_size() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Screen.size)
  
  ::pb::network::messages::vec2* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec2* Screen::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec2>(GetArenaNoVirtual());
    size_ = p;
  }
  return size_;
}
inline ::pb::network::messages::vec2* Screen::mutable_size() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Screen.size)
  return _internal_mutable_size();
}
inline void Screen::set_allocated_size(::pb::network::messages::vec2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Screen.size)
}

// -------------------------------------------------------------------

// Layout

// string name = 10;
inline void Layout::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Layout::name() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.name)
  return _internal_name();
}
inline void Layout::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.Layout.name)
}
inline std::string* Layout::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.name)
  return _internal_mutable_name();
}
inline const std::string& Layout::_internal_name() const {
  return name_.GetNoArena();
}
inline void Layout::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Layout::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.Layout.name)
}
inline void Layout::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.Layout.name)
}
inline void Layout::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.Layout.name)
}
inline std::string* Layout::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Layout::release_name() {
  // @@protoc_insertion_point(field_release:pb.network.messages.Layout.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Layout::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.Layout.name)
}

// repeated .pb.network.messages.Device devices = 20;
inline int Layout::_internal_devices_size() const {
  return devices_.size();
}
inline int Layout::devices_size() const {
  return _internal_devices_size();
}
inline void Layout::clear_devices() {
  devices_.Clear();
}
inline ::pb::network::messages::Device* Layout::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Device >*
Layout::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Layout.devices)
  return &devices_;
}
inline const ::pb::network::messages::Device& Layout::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::pb::network::messages::Device& Layout::devices(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.devices)
  return _internal_devices(index);
}
inline ::pb::network::messages::Device* Layout::_internal_add_devices() {
  return devices_.Add();
}
inline ::pb::network::messages::Device* Layout::add_devices() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Layout.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Device >&
Layout::devices() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Layout.devices)
  return devices_;
}

// repeated .pb.network.messages.Screen screens = 30;
inline int Layout::_internal_screens_size() const {
  return screens_.size();
}
inline int Layout::screens_size() const {
  return _internal_screens_size();
}
inline void Layout::clear_screens() {
  screens_.Clear();
}
inline ::pb::network::messages::Screen* Layout::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.Layout.screens)
  return screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Screen >*
Layout::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:pb.network.messages.Layout.screens)
  return &screens_;
}
inline const ::pb::network::messages::Screen& Layout::_internal_screens(int index) const {
  return screens_.Get(index);
}
inline const ::pb::network::messages::Screen& Layout::screens(int index) const {
  // @@protoc_insertion_point(field_get:pb.network.messages.Layout.screens)
  return _internal_screens(index);
}
inline ::pb::network::messages::Screen* Layout::_internal_add_screens() {
  return screens_.Add();
}
inline ::pb::network::messages::Screen* Layout::add_screens() {
  // @@protoc_insertion_point(field_add:pb.network.messages.Layout.screens)
  return _internal_add_screens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::network::messages::Screen >&
Layout::screens() const {
  // @@protoc_insertion_point(field_list:pb.network.messages.Layout.screens)
  return screens_;
}

// -------------------------------------------------------------------

// CalibrationValues

// .pb.network.messages.vec3 angle = 10;
inline bool CalibrationValues::_internal_has_angle() const {
  return this != internal_default_instance() && angle_ != nullptr;
}
inline bool CalibrationValues::has_angle() const {
  return _internal_has_angle();
}
inline const ::pb::network::messages::vec3& CalibrationValues::_internal_angle() const {
  const ::pb::network::messages::vec3* p = angle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& CalibrationValues::angle() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationValues.angle)
  return _internal_angle();
}
inline ::pb::network::messages::vec3* CalibrationValues::release_angle() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationValues.angle)
  
  ::pb::network::messages::vec3* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* CalibrationValues::_internal_mutable_angle() {
  
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    angle_ = p;
  }
  return angle_;
}
inline ::pb::network::messages::vec3* CalibrationValues::mutable_angle() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationValues.angle)
  return _internal_mutable_angle();
}
inline void CalibrationValues::set_allocated_angle(::pb::network::messages::vec3* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationValues.angle)
}

// .pb.network.messages.vec3 position = 20;
inline bool CalibrationValues::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CalibrationValues::has_position() const {
  return _internal_has_position();
}
inline const ::pb::network::messages::vec3& CalibrationValues::_internal_position() const {
  const ::pb::network::messages::vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::network::messages::vec3*>(
      &::pb::network::messages::_vec3_default_instance_);
}
inline const ::pb::network::messages::vec3& CalibrationValues::position() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationValues.position)
  return _internal_position();
}
inline ::pb::network::messages::vec3* CalibrationValues::release_position() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationValues.position)
  
  ::pb::network::messages::vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::pb::network::messages::vec3* CalibrationValues::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::network::messages::vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::pb::network::messages::vec3* CalibrationValues::mutable_position() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationValues.position)
  return _internal_mutable_position();
}
inline void CalibrationValues::set_allocated_position(::pb::network::messages::vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationValues.position)
}

// -------------------------------------------------------------------

// CalibrationDevices

// string deviceA = 10;
inline void CalibrationDevices::clear_devicea() {
  devicea_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalibrationDevices::devicea() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationDevices.deviceA)
  return _internal_devicea();
}
inline void CalibrationDevices::set_devicea(const std::string& value) {
  _internal_set_devicea(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.CalibrationDevices.deviceA)
}
inline std::string* CalibrationDevices::mutable_devicea() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationDevices.deviceA)
  return _internal_mutable_devicea();
}
inline const std::string& CalibrationDevices::_internal_devicea() const {
  return devicea_.GetNoArena();
}
inline void CalibrationDevices::_internal_set_devicea(const std::string& value) {
  
  devicea_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CalibrationDevices::set_devicea(std::string&& value) {
  
  devicea_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.CalibrationDevices.deviceA)
}
inline void CalibrationDevices::set_devicea(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicea_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.CalibrationDevices.deviceA)
}
inline void CalibrationDevices::set_devicea(const char* value, size_t size) {
  
  devicea_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.CalibrationDevices.deviceA)
}
inline std::string* CalibrationDevices::_internal_mutable_devicea() {
  
  return devicea_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalibrationDevices::release_devicea() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationDevices.deviceA)
  
  return devicea_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationDevices::set_allocated_devicea(std::string* devicea) {
  if (devicea != nullptr) {
    
  } else {
    
  }
  devicea_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicea);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationDevices.deviceA)
}

// string deviceB = 20;
inline void CalibrationDevices::clear_deviceb() {
  deviceb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalibrationDevices::deviceb() const {
  // @@protoc_insertion_point(field_get:pb.network.messages.CalibrationDevices.deviceB)
  return _internal_deviceb();
}
inline void CalibrationDevices::set_deviceb(const std::string& value) {
  _internal_set_deviceb(value);
  // @@protoc_insertion_point(field_set:pb.network.messages.CalibrationDevices.deviceB)
}
inline std::string* CalibrationDevices::mutable_deviceb() {
  // @@protoc_insertion_point(field_mutable:pb.network.messages.CalibrationDevices.deviceB)
  return _internal_mutable_deviceb();
}
inline const std::string& CalibrationDevices::_internal_deviceb() const {
  return deviceb_.GetNoArena();
}
inline void CalibrationDevices::_internal_set_deviceb(const std::string& value) {
  
  deviceb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CalibrationDevices::set_deviceb(std::string&& value) {
  
  deviceb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.network.messages.CalibrationDevices.deviceB)
}
inline void CalibrationDevices::set_deviceb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.network.messages.CalibrationDevices.deviceB)
}
inline void CalibrationDevices::set_deviceb(const char* value, size_t size) {
  
  deviceb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.network.messages.CalibrationDevices.deviceB)
}
inline std::string* CalibrationDevices::_internal_mutable_deviceb() {
  
  return deviceb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalibrationDevices::release_deviceb() {
  // @@protoc_insertion_point(field_release:pb.network.messages.CalibrationDevices.deviceB)
  
  return deviceb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationDevices::set_allocated_deviceb(std::string* deviceb) {
  if (deviceb != nullptr) {
    
  } else {
    
  }
  deviceb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceb);
  // @@protoc_insertion_point(field_set_allocated:pb.network.messages.CalibrationDevices.deviceB)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace network
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_layout_2eproto
