// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talkers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_talkers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_talkers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_talkers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_talkers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_talkers_2eproto;
namespace messages {
class Talkers;
class TalkersDefaultTypeInternal;
extern TalkersDefaultTypeInternal _Talkers_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::Talkers* Arena::CreateMaybeMessage<::messages::Talkers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

// ===================================================================

class Talkers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Talkers) */ {
 public:
  Talkers();
  virtual ~Talkers();

  Talkers(const Talkers& from);
  Talkers(Talkers&& from) noexcept
    : Talkers() {
    *this = ::std::move(from);
  }

  inline Talkers& operator=(const Talkers& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talkers& operator=(Talkers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Talkers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Talkers* internal_default_instance() {
    return reinterpret_cast<const Talkers*>(
               &_Talkers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Talkers& a, Talkers& b) {
    a.Swap(&b);
  }
  inline void Swap(Talkers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Talkers* New() const final {
    return CreateMaybeMessage<Talkers>(nullptr);
  }

  Talkers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Talkers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Talkers& from);
  void MergeFrom(const Talkers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talkers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Talkers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_talkers_2eproto);
    return ::descriptor_table_talkers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLabelFieldNumber = 2,
    kCaptionFieldNumber = 5,
    kEventFieldNumber = 20,
    kBodyCountFieldNumber = 10,
    kAverageActivityFieldNumber = 11,
    kMaximumActivityFieldNumber = 12,
    kTreeFieldNumber = 13,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string caption = 5;
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // string event = 20;
  void clear_event();
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // int32 bodyCount = 10;
  void clear_bodycount();
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount() const;
  void set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bodycount() const;
  void _internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float averageActivity = 11;
  void clear_averageactivity();
  float averageactivity() const;
  void set_averageactivity(float value);
  private:
  float _internal_averageactivity() const;
  void _internal_set_averageactivity(float value);
  public:

  // float maximumActivity = 12;
  void clear_maximumactivity();
  float maximumactivity() const;
  void set_maximumactivity(float value);
  private:
  float _internal_maximumactivity() const;
  void _internal_set_maximumactivity(float value);
  public:

  // bool tree = 13;
  void clear_tree();
  bool tree() const;
  void set_tree(bool value);
  private:
  bool _internal_tree() const;
  void _internal_set_tree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:messages.Talkers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::int32 bodycount_;
  float averageactivity_;
  float maximumactivity_;
  bool tree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_talkers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Talkers

// string type = 1;
inline void Talkers::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Talkers::type() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.type)
  return _internal_type();
}
inline void Talkers::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.type)
}
inline std::string* Talkers::mutable_type() {
  // @@protoc_insertion_point(field_mutable:messages.Talkers.type)
  return _internal_mutable_type();
}
inline const std::string& Talkers::_internal_type() const {
  return type_.GetNoArena();
}
inline void Talkers::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Talkers::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Talkers.type)
}
inline void Talkers::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Talkers.type)
}
inline void Talkers::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Talkers.type)
}
inline std::string* Talkers::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Talkers::release_type() {
  // @@protoc_insertion_point(field_release:messages.Talkers.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Talkers::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:messages.Talkers.type)
}

// string label = 2;
inline void Talkers::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Talkers::label() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.label)
  return _internal_label();
}
inline void Talkers::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.label)
}
inline std::string* Talkers::mutable_label() {
  // @@protoc_insertion_point(field_mutable:messages.Talkers.label)
  return _internal_mutable_label();
}
inline const std::string& Talkers::_internal_label() const {
  return label_.GetNoArena();
}
inline void Talkers::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Talkers::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Talkers.label)
}
inline void Talkers::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Talkers.label)
}
inline void Talkers::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Talkers.label)
}
inline std::string* Talkers::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Talkers::release_label() {
  // @@protoc_insertion_point(field_release:messages.Talkers.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Talkers::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:messages.Talkers.label)
}

// string caption = 5;
inline void Talkers::clear_caption() {
  caption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Talkers::caption() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.caption)
  return _internal_caption();
}
inline void Talkers::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.caption)
}
inline std::string* Talkers::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:messages.Talkers.caption)
  return _internal_mutable_caption();
}
inline const std::string& Talkers::_internal_caption() const {
  return caption_.GetNoArena();
}
inline void Talkers::_internal_set_caption(const std::string& value) {
  
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Talkers::set_caption(std::string&& value) {
  
  caption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Talkers.caption)
}
inline void Talkers::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Talkers.caption)
}
inline void Talkers::set_caption(const char* value, size_t size) {
  
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Talkers.caption)
}
inline std::string* Talkers::_internal_mutable_caption() {
  
  return caption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Talkers::release_caption() {
  // @@protoc_insertion_point(field_release:messages.Talkers.caption)
  
  return caption_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Talkers::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    
  } else {
    
  }
  caption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:messages.Talkers.caption)
}

// int32 bodyCount = 10;
inline void Talkers::clear_bodycount() {
  bodycount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Talkers::_internal_bodycount() const {
  return bodycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Talkers::bodycount() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.bodyCount)
  return _internal_bodycount();
}
inline void Talkers::_internal_set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bodycount_ = value;
}
inline void Talkers::set_bodycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bodycount(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.bodyCount)
}

// float averageActivity = 11;
inline void Talkers::clear_averageactivity() {
  averageactivity_ = 0;
}
inline float Talkers::_internal_averageactivity() const {
  return averageactivity_;
}
inline float Talkers::averageactivity() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.averageActivity)
  return _internal_averageactivity();
}
inline void Talkers::_internal_set_averageactivity(float value) {
  
  averageactivity_ = value;
}
inline void Talkers::set_averageactivity(float value) {
  _internal_set_averageactivity(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.averageActivity)
}

// float maximumActivity = 12;
inline void Talkers::clear_maximumactivity() {
  maximumactivity_ = 0;
}
inline float Talkers::_internal_maximumactivity() const {
  return maximumactivity_;
}
inline float Talkers::maximumactivity() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.maximumActivity)
  return _internal_maximumactivity();
}
inline void Talkers::_internal_set_maximumactivity(float value) {
  
  maximumactivity_ = value;
}
inline void Talkers::set_maximumactivity(float value) {
  _internal_set_maximumactivity(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.maximumActivity)
}

// bool tree = 13;
inline void Talkers::clear_tree() {
  tree_ = false;
}
inline bool Talkers::_internal_tree() const {
  return tree_;
}
inline bool Talkers::tree() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.tree)
  return _internal_tree();
}
inline void Talkers::_internal_set_tree(bool value) {
  
  tree_ = value;
}
inline void Talkers::set_tree(bool value) {
  _internal_set_tree(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.tree)
}

// string event = 20;
inline void Talkers::clear_event() {
  event_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Talkers::event() const {
  // @@protoc_insertion_point(field_get:messages.Talkers.event)
  return _internal_event();
}
inline void Talkers::set_event(const std::string& value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:messages.Talkers.event)
}
inline std::string* Talkers::mutable_event() {
  // @@protoc_insertion_point(field_mutable:messages.Talkers.event)
  return _internal_mutable_event();
}
inline const std::string& Talkers::_internal_event() const {
  return event_.GetNoArena();
}
inline void Talkers::_internal_set_event(const std::string& value) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Talkers::set_event(std::string&& value) {
  
  event_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messages.Talkers.event)
}
inline void Talkers::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messages.Talkers.event)
}
inline void Talkers::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messages.Talkers.event)
}
inline std::string* Talkers::_internal_mutable_event() {
  
  return event_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Talkers::release_event() {
  // @@protoc_insertion_point(field_release:messages.Talkers.event)
  
  return event_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Talkers::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:messages.Talkers.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_talkers_2eproto
